--
-- PostgreSQL database dump
--

-- Dumped from database version 9.6.13
-- Dumped by pg_dump version 9.6.13

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: attinae_db; Type: DATABASE; Schema: -; Owner: attinae_user
--
-- DROP USER IF EXISTS attinae_user;
-- CREATE USER attinae_user SUPERUSER PASSWORD 'AttinaeBasePass-';
-- LC_COLLATE = 'es_ES.UTF-8' LC_CTYPE = 'es_ES.UTF-8';

CREATE DATABASE attinae_db WITH TEMPLATE = template0 ENCODING = 'UTF8' ;
ALTER DATABASE attinae_db OWNER TO attinae_user;

\connect attinae_db

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: academico; Type: SCHEMA; Schema: -; Owner: attinae_user
--

CREATE SCHEMA academico;


ALTER SCHEMA academico OWNER TO attinae_user;

--
-- Name: finanzas; Type: SCHEMA; Schema: -; Owner: attinae_user
--

CREATE SCHEMA finanzas;


ALTER SCHEMA finanzas OWNER TO attinae_user;

--
-- Name: pgagent; Type: SCHEMA; Schema: -; Owner: attinae_user
--

CREATE SCHEMA pgagent;


ALTER SCHEMA pgagent OWNER TO attinae_user;

--
-- Name: SCHEMA pgagent; Type: COMMENT; Schema: -; Owner: attinae_user
--

COMMENT ON SCHEMA pgagent IS 'pgAgent system tables';


--
-- Name: seguridad; Type: SCHEMA; Schema: -; Owner: attinae_user
--

CREATE SCHEMA seguridad;


ALTER SCHEMA seguridad OWNER TO attinae_user;

--
-- Name: typ_documentos_aspirante; Type: TYPE; Schema: academico; Owner: attinae_user
--

CREATE TYPE academico.typ_documentos_aspirante AS (
	id integer,
	requisito_id integer,
	descripcion character varying(200),
	alias1 character varying(100),
	periodo_id integer,
	validasecretaria boolean,
	ruta text,
	anio integer
);


ALTER TYPE academico.typ_documentos_aspirante OWNER TO attinae_user;

--
-- Name: typ_mensajefuncion2; Type: TYPE; Schema: academico; Owner: attinae_user
--

CREATE TYPE academico.typ_mensajefuncion2 AS (
	error bit(1),
	mensaje character varying,
	id integer
);


ALTER TYPE academico.typ_mensajefuncion2 OWNER TO attinae_user;

--
-- Name: TYPE typ_mensajefuncion2; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON TYPE academico.typ_mensajefuncion2 IS 'Creado por LC me servira para funciones que necesito se envien 3 valores como el id del nuevo valor generado';


--
-- Name: COLUMN typ_mensajefuncion2.mensaje; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON COLUMN academico.typ_mensajefuncion2.mensaje IS 'Aqui obtengo el mensaje de la base de datos';


--
-- Name: COLUMN typ_mensajefuncion2.id; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON COLUMN academico.typ_mensajefuncion2.id IS 'Es el id del nuevo o existente elemento en la base de datos';


--
-- Name: typ_mensajefuncion; Type: TYPE; Schema: public; Owner: attinae_user
--

CREATE TYPE public.typ_mensajefuncion AS (
	error bit(1),
	mensaje character varying,
	id integer
);


ALTER TYPE public.typ_mensajefuncion OWNER TO attinae_user;

--
-- Name: items_requisitos; Type: TYPE; Schema: seguridad; Owner: attinae_user
--

CREATE TYPE seguridad.items_requisitos AS (
	id integer,
	fk_id integer,
	descripcion character varying,
	orden integer,
	color character varying(10),
	entidad_educativa integer,
	precio numeric(10,2),
	tipo character(1),
	anio_id integer,
	periodo_id integer,
	semestre_id integer,
	estado_id integer,
	creadopor integer,
	creado timestamp(0) without time zone,
	actualizadopor integer,
	actualizado timestamp(0) without time zone,
	activo character(1)
);


ALTER TYPE seguridad.items_requisitos OWNER TO attinae_user;

--
-- Name: opcion_existe; Type: TYPE; Schema: seguridad; Owner: attinae_user
--

CREATE TYPE seguridad.opcion_existe AS (
	existe boolean,
	opcion_id integer,
	opcionpadre_id integer,
	nombre character varying(100),
	url character varying(200),
	estado_id integer,
	creadopor integer,
	creado timestamp(0) without time zone,
	actualizadopor integer,
	actualizado timestamp(0) without time zone,
	activo character(1),
	orden smallint
);


ALTER TYPE seguridad.opcion_existe OWNER TO attinae_user;

--
-- Name: func_actualizapromedioestudiante(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.func_actualizapromedioestudiante() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	cur_tabla refcursor;
	rec_registro record;
	rec_paralelo record;
	var_paralelo_id integer;
BEGIN
	open cur_tabla for  select  dc.desglosecalificacionestudiante_id, dc.calificacion_equivalencia
							from academico.desglosecalificaciconestudiante as dc
							join academico.calificacionestudiante as ce on ce.calificacionestudiante_id = dc.calificacionestudiante_id
							join academico.paraleloestudiante as pe on pe.paraleloestudiante_id = ce.paraleloestudiante_id
							join academico.paralelo as pa on pa.paralelo_id = pe.paralelo_id
							where dc.activo = 'S' and ce.activo = 'S' and pe.activo = 'S'
							and pa.carrera_id = 3
							and pa.periodo_id = 5
							and ce.parcial_id = 13
							and dc.calificacion_equivalencia is not null
							--and pa.ciclo_id = 1
							--and pa.paralelo = 'A'
							--and pa.elementoeducativo_id = 8
							--and pe.persona_id = 392
							--and dc.desglosecalificacionestudiante_id not in (130588, 130585)
							;
	
	loop
		fetch cur_tabla into rec_registro;
		exit when not found;
		raise notice '%', rec_registro.desglosecalificacionestudiante_id;
		update academico.desglosecalificaciconestudiante set calificacion_equivalencia = rec_registro.calificacion_equivalencia
				where desglosecalificacionestudiante_id = rec_registro.desglosecalificacionestudiante_id;
		
	end loop;

END;
$$;


ALTER FUNCTION academico.func_actualizapromedioestudiante() OWNER TO attinae_user;

--
-- Name: func_actualizapromedioestudiantesuple(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.func_actualizapromedioestudiantesuple() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	cur_tabla refcursor;
	rec_registro record;
	rec_paralelo record;
	var_paralelo_id integer;
BEGIN
	open cur_tabla for  select  dc.calificacionestudiante_id, dc.calificacion_equivalencia, dc.calificacion_numerica
							from academico.desglosecalificaciconestudiante as dc
							join academico.calificacionestudiante as ce on ce.calificacionestudiante_id = dc.calificacionestudiante_id
							join academico.paraleloestudiante as pe on pe.paraleloestudiante_id = ce.paraleloestudiante_id
							join academico.paralelo as pa on pa.paralelo_id = pe.paralelo_id
							where dc.activo = 'S' and ce.activo = 'S' and pe.activo = 'S'
							--and pa.carrera_id = 3
							and pa.periodo_id = 3
							and ce.parcial_id = 10
							and dc.calificacion_equivalencia is not null
							--and pa.ciclo_id = 1
							--and pa.paralelo = 'A'
							--and pa.elementoeducativo_id = 19
							--and pe.persona_id = 392
							--and dc.desglosecalificacionestudiante_id not in (130588, 130585)
							;
	
	loop
		fetch cur_tabla into rec_registro;
		exit when not found;
		raise notice '%', rec_registro.calificacionestudiante_id;
		update academico.calificacionestudiante set 
				calificacion_equivalencia = rec_registro.calificacion_equivalencia,
				calificacion_numerica = rec_registro.calificacion_numerica
				where calificacionestudiante_id = rec_registro.calificacionestudiante_id;
		
	end loop;

END;
$$;


ALTER FUNCTION academico.func_actualizapromedioestudiantesuple() OWNER TO attinae_user;

--
-- Name: func_aspirante_get_lista_documentos_detalles(integer, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.func_aspirante_get_lista_documentos_detalles(in_requisitoaspiranteperiodo integer, in_numdocumentoidentificacion character varying) RETURNS SETOF academico.typ_documentos_aspirante
    LANGUAGE plpgsql
    AS $$
DECLARE
outDocumentosAspirantes academico.typ_documentos_aspirante;
documentosAspirantesQuantity INTEGER;
anio INTEGER;
id_requisitoArray INTEGER[];

BEGIN

SELECT INTO anio
EXTRACT(YEAR FROM  academico.registrorequisitoaspirante.creado)
FROM
  academico.persona
  INNER JOIN academico.registrorequisitoaspirante ON (academico.persona.persona_id = academico.registrorequisitoaspirante.persona_id)
WHERE
  academico.registrorequisitoaspirante.requisitoaspiranteperiodo_id =in_requisitoaspiranteperiodo  AND 
  academico.persona.documentoidentificacion = in_numdocumentoidentificacion;



id_requisitoArray :=array(
SELECT 
  academico.registrorequisitoaspirante.requisito_id
FROM
  academico.persona
  INNER JOIN academico.registrorequisitoaspirante ON (academico.persona.persona_id = academico.registrorequisitoaspirante.persona_id)
WHERE
  academico.registrorequisitoaspirante.requisitoaspiranteperiodo_id =in_requisitoaspiranteperiodo  AND 
  academico.persona.documentoidentificacion = in_numdocumentoidentificacion);


IF array_length(id_requisitoArray,1) IS NULL THEN

RAISE NOTICE 'Ingrese en el if';

FOR outDocumentosAspirantes IN
 SELECT 
  row_number() over(ORDER BY academico.requisito.requisito_id, academico.requisito.descripcion, academico.requisitoaspiranteperiodo.periodo_id, academico.requisitoaspiranteperiodo.validasecretaria)::int AS id,
  academico.requisito.requisito_id,
  academico.requisito.descripcion,
  academico.requisito.alias1,
  academico.requisitoaspiranteperiodo.periodo_id,
  academico.requisitoaspiranteperiodo.validasecretaria,
  'pixelBlanco.png'::text,
  EXTRACT(YEAR FROM academico.requisitoaspiranteperiodo.creado)::integer
FROM
  academico.requisitoaspiranteperiodo
  INNER JOIN academico.requisito ON (academico.requisitoaspiranteperiodo.requisito_id = academico.requisito.requisito_id)
WHERE
  academico.requisito.estado_id = 1 AND 
academico.requisito.activo = 'S' AND
academico.requisitoaspiranteperiodo.validasecretaria = false AND
academico.requisitoaspiranteperiodo.periodo_id=in_requisitoaspiranteperiodo

        LOOP
		RETURN NEXT outDocumentosAspirantes;
	END LOOP;

ELSE
	
    RAISE NOTICE 'Ingrese en el else';
    
FOR outDocumentosAspirantes IN

 SELECT 
  row_number() over(ORDER BY academico.requisito.requisito_id, academico.requisito.descripcion, academico.requisitoaspiranteperiodo.periodo_id, academico.requisitoaspiranteperiodo.validasecretaria)::int AS id,
  academico.requisito.requisito_id,
  academico.requisito.descripcion,
  academico.requisito.alias1,
  academico.requisitoaspiranteperiodo.periodo_id,
  academico.requisitoaspiranteperiodo.validasecretaria,
  in_numdocumentoidentificacion::text,
  anio
FROM
  academico.requisitoaspiranteperiodo
  INNER JOIN academico.requisito ON (academico.requisitoaspiranteperiodo.requisito_id = academico.requisito.requisito_id)
WHERE
academico.requisito.estado_id = 1 AND 
academico.requisito.activo = 'S' AND
academico.requisitoaspiranteperiodo.periodo_id=in_requisitoaspiranteperiodo
	LOOP
	    IF NOT outDocumentosAspirantes.requisito_id= ANY(id_requisitoArray) THEN	        
	       outDocumentosAspirantes.ruta:='pixelBlanco.png';
	    END IF;
		RETURN NEXT outDocumentosAspirantes;
	END LOOP;
END IF;

END;
$$;


ALTER FUNCTION academico.func_aspirante_get_lista_documentos_detalles(in_requisitoaspiranteperiodo integer, in_numdocumentoidentificacion character varying) OWNER TO attinae_user;

--
-- Name: func_estaplanificado(); Type: FUNCTION; Schema: academico; Owner: postgres
--

CREATE FUNCTION academico.func_estaplanificado() RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN

PERFORM 
  *
FROM
  academico.vi_planificacionregistro
WHERE
  academico.vi_planificacionregistro.ambito = 'A' AND 
  academico.vi_planificacionregistro.estado_id = 3 AND
  CURRENT_DATE BETWEEN  academico.vi_planificacionregistro.fechainicio_inscripcion AND academico.vi_planificacionregistro.fechafin_inscripcion;
  IF NOT FOUND THEN 
  	RETURN false;
  ELSE
  	RETURN true;
  END IF;



END;
$$;


ALTER FUNCTION academico.func_estaplanificado() OWNER TO postgres;

--
-- Name: func_obtener_requisitos(integer); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.func_obtener_requisitos(integer) RETURNS SETOF seguridad.items_requisitos
    LANGUAGE plpgsql
    AS $_$
DECLARE 
		par_entidad_educativa ALIAS FOR $1;
		outItemsRequisitosRow seguridad.items_requisitos;
	
	BEGIN
	    
		FOR outItemsRequisitosRow IN
			Select (Row_number() OVER(ORDER BY tipo,fk_id ) )*-1 id,b.* FROM
			(
			  SELECT			
			  finanzas.rubro.rubro_id as fk_id,
			  finanzas.rubro.descripcion,
			  0::integer as orden,
			  'yellowRow'::varchar as color,
			  finanzas.rubro.entidad_educativa,
			  null::NUMERIC(10,2) as precio,
			  'R' as tipo,
			  null::integer as anio_id,
			  null::integer as periodo_id,
			  null::integer as semestre_id,
			  null::integer as estado_id,
              null::integer as creadopor,
              null::TIMESTAMP as creado,
              null::INTEGER as  actualizadopor,
              null::TIMESTAMP as actualizado,
              null::CHAR(1) as activo
			FROM
			  finanzas.rubro
			WHERE
			  finanzas.rubro.estado_id = 6 AND
			  finanzas.rubro.activo = 'S'
			  AND
			  finanzas.rubro.entidad_educativa=par_entidad_educativa

			UNION

			SELECT 
			
			  academico.tipodocumento.tipodocumento_id as fk_id,
			  academico.tipodocumento.descripcion,
			   0::integer as orden,
			  'yellowRow'::varchar as color,
			  academico.tipodocumento.entidad_educativa,
			   null::NUMERIC(10,2) as precio,
			  'D' as tipo,
			  null::integer as anio_id,
			  null::integer as periodo_id,
			  null::integer as semestre_id,
			  null::integer as estado_id,
              null::integer as creadopor,
              null::TIMESTAMP as creado,
              null::INTEGER as  actualizadopor,
              null::TIMESTAMP as actualizado,
              null::CHAR(1) as activo
			FROM
			  academico.tipodocumento
			WHERE
			  academico.tipodocumento.estado_id=1 AND 
			  academico.tipodocumento.activo='S' AND 
			  academico.tipodocumento.entidad_educativa=par_entidad_educativa) b
		LOOP
			
			RETURN NEXT outItemsRequisitosRow;
		END LOOP;
	END;
$_$;


ALTER FUNCTION academico.func_obtener_requisitos(integer) OWNER TO attinae_user;

--
-- Name: func_obtenernumeroordenpago(character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.func_obtenernumeroordenpago(par_numeroorden character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
    var_nuevonumeroorden character varying;
    var_fechaactual date;
    var_anio character varying;
    var_mes character varying;
    var_dia character varying;
    var_secuencia integer;
    var_fechaordenpago date;
    var_fechagenerada date;
BEGIN
    var_fechaactual := current_date;
    
    var_anio := substring(par_numeroorden from 1 for 4);
    var_mes := substring(par_numeroorden from 5 for 2);
    var_dia := substring(par_numeroorden from 7 for 2);
    var_secuencia := (substring(par_numeroorden from 10 for 4))::integer;
    var_fechaordenpago := (var_anio || '-' || var_mes || '-' || var_dia)::date;

    
    if (var_fechaactual = var_fechaordenpago) then
    begin
	var_secuencia := var_secuencia + 1;
    end;
    else
    begin
	var_anio := extract(year from var_fechaactual)::text;
	var_mes := lpad(extract(month from current_date)::text, 2, '0');
	var_dia := lpad(extract(day from current_date)::text, 2, '0');
	var_secuencia := 1;
    end;
    end if;

    var_nuevonumeroorden := var_anio || var_mes || var_dia || '-' || lpad(var_secuencia::character varying, 4, '0');
    RETURN var_nuevonumeroorden;
END;
$$;


ALTER FUNCTION academico.func_obtenernumeroordenpago(par_numeroorden character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION func_obtenernumeroordenpago(par_numeroorden character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.func_obtenernumeroordenpago(par_numeroorden character varying) IS 'Genera número de órdenes';


--
-- Name: func_obtenerprerequisito(integer); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.func_obtenerprerequisito(par_mallaelemento_id integer) RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_prerequisito character varying;
	cur_prerequisito refcursor;
	rec_prerequisito record;
BEGIN
	var_prerequisito := '';
	open cur_prerequisito for select codigo from academico.elementoeducativo 
					where elementoeducativo_id in (select elementoeducativo_id 
									from academico.prerequisitoelemento 
									where mallaelemento_id = par_mallaelemento_id);
	loop
		fetch cur_prerequisito into rec_prerequisito;
		exit when not found;
		var_prerequisito := var_prerequisito || rec_prerequisito.codigo || ' ';
	end loop;
	close cur_prerequisito;
    RETURN next trim(var_prerequisito);
END;
$$;


ALTER FUNCTION academico.func_obtenerprerequisito(par_mallaelemento_id integer) OWNER TO attinae_user;

--
-- Name: FUNCTION func_obtenerprerequisito(par_mallaelemento_id integer); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.func_obtenerprerequisito(par_mallaelemento_id integer) IS 'Obtiene los prerequisitos de un mallaelemento en formato string';


--
-- Name: mant_aniolectivo(integer, character varying, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_aniolectivo(integer, character varying, integer, integer, integer, character, character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $_$
DECLARE
	par_anio_lectivo_id ALIAS FOR $1;
	par_anio ALIAS FOR $2;
	par_entidad_educativa ALIAS FOR $3;
	par_estado_id ALIAS FOR $4;
	par_usuario_id ALIAS FOR $5;
	par_accion ALIAS FOR $6;
	par_ip ALIAS FOR $7;

	var_tabla character varying;
	var_fechaevento timestamp;
	var_anio_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.anio_lectivo IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'anio_lectivo';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.anio_lectivo (anio,entidad_educativa, estado_id, creadopor, creado) values (par_anio,par_entidad_educativa, par_estado_id, par_usuario_id, var_fechaevento) returning anio_lectivo_id into par_anio_lectivo_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'anio', par_anio_lectivo_id, par_anio, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_anio_lectivo_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select anio, estado_id into var_anio_base, var_estado_id_base from academico.anio_lectivo where anio_lectivo_id = par_anio_lectivo_id;
			update academico.anio_lectivo set anio = par_anio, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento where anio_lectivo_id = par_anio_lectivo_id;
			if var_anio_base <> par_anio then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'anio', par_anio_lectivo_id, var_anio_base, par_anio, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_anio_lectivo_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.anio_lectivo set activo = 'N' where anio_lectivo_id = par_anio_lectivo_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_anio_lectivo_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_anio_lectivo_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_anio_lectivo_id;
	END;
    RETURN next reg_mensaje;
END;
$_$;


ALTER FUNCTION academico.mant_aniolectivo(integer, character varying, integer, integer, integer, character, character varying) OWNER TO attinae_user;

--
-- Name: mant_aspirante(character varying, integer, character varying, date, numeric, smallint, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_aspirante(par_documentoidentificacion character varying, par_unidadeducativa_id integer, par_titulobachiller character varying, par_fechagraduacion date, par_calificaciongraduacion numeric, par_calificacionsobre smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_persona_id_base integer;
	var_unidadeducativa_id_base integer;
	var_titulobachiller_base character varying;
	var_fechagraduacion_base date;
	var_calificaciongraduacion_base numeric;
	var_calificacionsobre_base smallint;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.aspirante IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'aspirante';
		var_fechaevento := (select current_timestamp);
		var_persona_id_base := (select persona_id from academico.persona where documentoidentificacion = par_documentoidentificacion);
		
        	IF EXISTS(SELECT 1 FROM academico.aspirante  where academico.aspirante.persona_id=var_persona_id_base AND  academico.aspirante.activo='S' AND academico.aspirante.estado_id=1) THEN
	            par_accion:='U';
                   SELECT academico.aspirante.persona_id INTO var_persona_id_base FROM academico.aspirante  where academico.aspirante.persona_id=var_persona_id_base AND  academico.aspirante.activo='S' AND academico.aspirante.estado_id=1;
                END IF;	
        
        
		if par_accion = 'I' then
			insert into academico.aspirante (persona_id, unidadeducativa_id, titulobachiller, fechagraduacion, calificaciongraduacion, calificacionsobre, estado_id, creadopor, creado) 
						values (var_persona_id_base, par_unidadeducativa_id, par_titulobachiller, par_fechagraduacion, par_calificaciongraduacion, par_calificacionsobre, par_estado_id, par_usuario_id, var_fechaevento);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'unidadeducativa_id', var_persona_id_base, par_unidadeducativa_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'titulobachiller', var_persona_id_base, par_titulobachiller, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechagraduacion', var_persona_id_base, par_fechagraduacion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'calificaciongraduacion', var_persona_id_base, par_calificaciongraduacion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'calificacionsobre', var_persona_id_base, par_calificacionsobre, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', var_persona_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select unidadeducativa_id, titulobachiller, fechagraduacion, calificaciongraduacion, calificacionsobre, estado_id 
				into var_unidadeducativa_id_base, var_titulobachiller_base, var_fechagraduacion_base, var_calificaciongraduacion_base, var_calificacionsobre_base, var_estado_id_base 
					from academico.aspirante where persona_id = var_persona_id_base;
			update academico.aspirante set unidadeducativa_id = par_unidadeducativa_id, titulobachiller = par_titulobachiller, fechagraduacion = par_fechagraduacion, 
							calificaciongraduacion = par_calificaciongraduacion, calificacionsobre = par_calificacionsobre,
							estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where persona_id = var_persona_id_base;
			if var_unidadeducativa_id_base <> par_unidadeducativa_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'unidadeducativa_id', var_persona_id_base, var_unidadeducativa_id_base, par_unidadeducativa_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_titulobachiller_base <> par_titulobachiller then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'titulobachiller', var_persona_id_base, var_titulobachiller_base, par_titulobachiller, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_fechagraduacion_base <> par_fechagraduacion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechagraduacion', var_persona_id_base, var_fechagraduacion_base, par_fechagraduacion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_calificaciongraduacion_base <> par_calificaciongraduacion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'calificaciongraduacion', var_persona_id_base, var_calificaciongraduacion_base, par_calificaciongraduacion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_calificacionsobre_base <> par_calificacionsobre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'calificacionsobre', var_persona_id_base, var_calificacionsobre_base, par_calificacionsobre, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', var_persona_id_base, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.aspirante set activo = 'N' where persona_id = var_persona_id_base;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, var_persona_id_base, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito (mant_aspirante)'; 
		reg_mensaje.id:=var_persona_id_base;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: (mant_aspirante) ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id:=var_persona_id_base;
    END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_aspirante(par_documentoidentificacion character varying, par_unidadeducativa_id integer, par_titulobachiller character varying, par_fechagraduacion date, par_calificaciongraduacion numeric, par_calificacionsobre smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_aspirante(par_documentoidentificacion character varying, par_unidadeducativa_id integer, par_titulobachiller character varying, par_fechagraduacion date, par_calificaciongraduacion numeric, par_calificacionsobre smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_aspirante(par_documentoidentificacion character varying, par_unidadeducativa_id integer, par_titulobachiller character varying, par_fechagraduacion date, par_calificaciongraduacion numeric, par_calificacionsobre smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla aspirante';


--
-- Name: mant_campoformacion(integer, character varying, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_campoformacion(par_campoformacion_id integer, par_descripcion character varying, par_color character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_color_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.campoformacion IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'campoformacion';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.campoformacion (descripcion, color, estado_id, creadopor, creado) values (par_descripcion, par_color, par_estado_id, par_usuario_id, var_fechaevento)
					returning campoformacion_id into par_campoformacion_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_campoformacion_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'color', par_campoformacion_id, par_color, par_usuario_id, var_fechaevento, par_ip);												
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_campoformacion_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, color, estado_id into var_descripcion_base, var_color_base, var_estado_id_base from academico.campoformacion where campoformacion_id = par_campoformacion_id;
			update academico.campoformacion set descripcion = par_descripcion, color = var_color_base, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where campoformacion_id = par_campoformacion_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_campoformacion_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_color_base <> par_color then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'color', par_campoformacion_id, var_color_base, par_color, par_usuario_id, var_fechaevento, par_ip);
			end if;		
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_campoformacion_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.campoformacion set activo = 'N' where campoformacion_id = par_campoformacion_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_campoformacion_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_campoformacion_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 	
	reg_mensaje.id := par_campoformacion_id;	
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_campoformacion(par_campoformacion_id integer, par_descripcion character varying, par_color character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_campoformacion(par_campoformacion_id integer, par_descripcion character varying, par_color character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_campoformacion(par_campoformacion_id integer, par_descripcion character varying, par_color character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla campoformacion';


--
-- Name: mant_carrera(integer, integer, character varying, character varying, character varying, smallint, smallint, text, text, text, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_carrera(integer, integer, character varying, character varying, character varying, smallint, smallint, text, text, text, integer, integer, integer, character, character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $_$
DECLARE
	par_carrera_id ALIAS FOR $1;
	par_facultad_id ALIAS FOR $2;
	par_codigo ALIAS FOR $3;
	par_nombre ALIAS FOR $4;
	par_titulo_ofrece ALIAS FOR $5;
	par_cantidad_ciclo ALIAS FOR $6;
	par_creditos ALIAS FOR $7;
	par_precompetencias ALIAS FOR $8;
	par_competencias ALIAS FOR $9;
	par_perfilprofesional ALIAS FOR $10;
	par_entidad_educativa ALIAS FOR $11;

	par_estado_id ALIAS FOR $12;
	par_usuario_id ALIAS FOR $13;
	par_accion ALIAS FOR $14;
	par_ip ALIAS FOR $15;
	

	var_tabla character varying;
	var_fechaevento timestamp;
	var_facultad_id_base integer;
	var_codigo_base character varying;
	var_nombre_base character varying;
	var_titulo_ofrece_base character varying;
	var_cantidad_ciclo_base smallint;
	var_creditos_base smallint;
	var_precompetencias_base text;
	var_competencias_base text;
	var_perfilprofesional_base text;
	var_entidad_educativa_base integer;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.carrera IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'carrera';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.carrera (facultad_id, codigo, nombre, titulo_ofrece, cantidad_ciclo, creditos, precompetencias, competencias, perfilprofesional, entidad_educativa,estado_id, creadopor, creado) 
						values (par_facultad_id, par_codigo, par_nombre, par_titulo_ofrece, par_cantidad_ciclo, par_creditos, par_precompetencias, par_competencias, par_perfilprofesional,par_entidad_educativa, par_estado_id, par_usuario_id, var_fechaevento)
						returning carrera_id into par_carrera_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'facultad_id', par_carrera_id, par_facultad_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'codigo', par_carrera_id, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nombre', par_carrera_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'tiulo_ofrece', par_carrera_id, par_titulo_ofrece, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'cantidad_ciclo', par_carrera_id, par_cantidad_ciclo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'creditos', par_carrera_id, par_cantidad_ciclo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'precompetencias', par_carrera_id, par_cantidad_ciclo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'competencias', par_carrera_id, par_cantidad_ciclo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'perfilprofesional', par_carrera_id, par_cantidad_ciclo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_carrera_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select facultad_id, codigo, nombre, titulo_ofrece, cantidad_ciclo, creditos, precompetencias, competencias, perfilprofesional, estado_id 
				into var_facultad_id_base, var_codigo_base, var_nombre_base, var_titulo_ofrece_base, var_cantidad_ciclo_base, var_creditos_base, var_precompetencias_base, 
				     var_competencias_base, var_perfilprofesional_base, var_estado_id_base 
				from academico.carrera where carrera_id = par_carrera_id;
			update academico.carrera set facultad_id = par_facultad_id, codigo = par_codigo, nombre = par_nombre, titulo_ofrece = par_titulo_ofrece, cantidad_ciclo = par_cantidad_ciclo,
						creditos = par_creditos, precompetencias = par_precompetencias, competencias = par_competencias, perfilprofesional = par_perfilprofesional, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
						where carrera_id = par_carrera_id;
			if var_facultad_id_base <> par_facultad_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'facultad_id', par_carrera_id, var_facultad_id_base, par_facultad_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_codigo_base <> par_codigo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'codigo', par_carrera_id, var_codigo_base, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nombre_base <> par_nombre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre', par_carrera_id, var_nombre_base, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_titulo_ofrece_base <> par_titulo_ofrece then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'titulo_ofrece', par_carrera_id, var_titulo_ofrece_base, par_titulo_ofrece, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_cantidad_ciclo_base <> par_cantidad_ciclo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'cantidad_ciclo', par_carrera_id, var_cantidad_ciclo_base, par_cantidad_ciclo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_creditos_base <> par_creditos then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'creditos', par_carrera_id, var_creditos_base, par_creditos, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_precompetencias_base <> par_precompetencias then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'precompetencias', par_carrera_id, var_precompetencias_base, par_precompetencias, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_competencias_base <> par_competencias then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'competencias', par_carrera_id, var_competencias_base, par_competencias, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_perfilprofesional_base <> par_perfilprofesional then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'perfilprofesional', par_carrera_id, var_perfilprofesional_base, par_perfilprofesional, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_carrera_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then
			update academico.carrera set activo = 'N' where carrera_id = par_carrera_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_carrera_id, par_usuario_id, var_fechaevento, par_ip);
		end if;

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_carrera_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_carrera_id;
	END;
    RETURN next reg_mensaje;
END;
$_$;


ALTER FUNCTION academico.mant_carrera(integer, integer, character varying, character varying, character varying, smallint, smallint, text, text, text, integer, integer, integer, character, character varying) OWNER TO attinae_user;

--
-- Name: mant_ciclo(integer, character varying, smallint, character varying, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_ciclo(integer, character varying, smallint, character varying, integer, integer, integer, character, character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $_$
DECLARE
	par_ciclo_id ALIAS FOR $1;
	par_descripcion ALIAS FOR $2;
	par_orden ALIAS FOR $3;
	par_color ALIAS FOR $4;
	par_entidad_educativa ALIAS FOR $5;
	par_estado_id ALIAS FOR $6;
	par_usuario_id ALIAS FOR $7;
	par_accion ALIAS FOR $8;
	par_ip ALIAS FOR $9;

	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_orden_base smallint;
	var_color_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.ciclo IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'ciclo';
		var_fechaevento := (select current_timestamp);
		par_entidad_educativa := 1;
		if par_accion = 'I' then
			insert into academico.ciclo (descripcion, orden, color,entidad_educativa, estado_id, creadopor, creado) 
							values (par_descripcion, par_orden, par_color,par_entidad_educativa, par_estado_id, par_usuario_id, var_fechaevento)
							returning ciclo_id into par_ciclo_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_ciclo_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'orden', par_ciclo_id, par_orden, par_usuario_id, var_fechaevento, par_ip);						
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'color', par_ciclo_id, par_color, par_usuario_id, var_fechaevento, par_ip);												
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_ciclo_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, orden, color, estado_id into var_descripcion_base, var_orden_base, var_color_base, var_estado_id_base 
						from academico.ciclo where ciclo_id = par_ciclo_id;
			update academico.ciclo set descripcion = par_descripcion, orden = par_orden, color = par_color, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where ciclo_id = par_ciclo_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_ciclo_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_orden_base <> par_orden then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'orden', par_ciclo_id, var_orden_base, par_orden, par_usuario_id, var_fechaevento, par_ip);
			end if;			
			if var_color_base <> par_color then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'color', par_ciclo_id, var_color_base, par_color, par_usuario_id, var_fechaevento, par_ip);
			end if;		
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_ciclo_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.ciclo set activo = 'N' where ciclo_id = par_ciclo_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_ciclo_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_ciclo_id;	
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 	
	reg_mensaje.id := par_ciclo_id;	
	END;
    RETURN next reg_mensaje;
END;
$_$;


ALTER FUNCTION academico.mant_ciclo(integer, character varying, smallint, character varying, integer, integer, integer, character, character varying) OWNER TO attinae_user;

--
-- Name: mant_ciudad(integer, integer, character varying, boolean, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_ciudad(par_ciudad_id integer, par_provincia_id integer, par_nombre character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_provincia_id_base integer;
	var_nombre_base character varying;
	var_eslocal_base boolean;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.ciudad IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'ciudad';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.ciudad (provincia_id, nombre, eslocal, estado_id, creadopor, creado) values (par_provincia_id, par_nombre, par_eslocal, par_estado_id, par_usuario_id, var_fechaevento)
					returning ciudad_id into par_ciudad_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'provincia_id', par_ciudad_id, par_provincia_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nombre', par_ciudad_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'eslocal', par_ciudad_id, par_eslocal, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_ciudad_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select provincia_id, nombre, eslocal, estado_id into var_provincia_id_base, var_nombre_base, var_eslocal_base, var_estado_id_base from academico.ciudad where ciudad_id = par_ciudad_id;
			update academico.ciudad set provincia_id = par_provincia_id, nombre = par_nombre, eslocal = par_eslocal, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento
							where ciudad_id = par_ciudad_id;
			if var_provincia_id_base <> par_provincia_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'provincia_id', par_ciudad_id, var_provincia_id_base, par_provincia_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nombre_base <> par_nombre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre', par_ciudad_id, var_nombre_base, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_eslocal_base <> par_eslocal then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'eslocal', par_ciudad_id, var_eslocal_base, par_eslocal, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_ciudad_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.ciudad set activo = 'N' where ciudad_id = par_ciudad_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_ciudad_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_ciudad_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_ciudad_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_ciudad(par_ciudad_id integer, par_provincia_id integer, par_nombre character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_ciudad(par_ciudad_id integer, par_provincia_id integer, par_nombre character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_ciudad(par_ciudad_id integer, par_provincia_id integer, par_nombre character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla Ciudad';


--
-- Name: mant_cursocertificacion(integer, integer, character varying, character varying, character varying, smallint, smallint, text, text, text, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_cursocertificacion(integer, integer, character varying, character varying, character varying, smallint, smallint, text, text, text, integer, integer, integer, character, character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $_$
DECLARE
	par_cursocertificacion_id ALIAS FOR $1;
	par_facultad_id ALIAS FOR $2;
	par_codigo ALIAS FOR $3;
	par_nombre ALIAS FOR $4;
	par_nombre_certificado ALIAS FOR $5;
	par_cantidad_ciclo ALIAS FOR $6;
	par_creditos ALIAS FOR $7;
	par_precompetencias ALIAS FOR $8;
	par_competencias ALIAS FOR $9;
	par_perfilprofesional ALIAS FOR $10;
	par_entidad_educativa ALIAS FOR $11;

	par_estado_id ALIAS FOR $12;
	par_usuario_id ALIAS FOR $13;
	par_accion ALIAS FOR $14;
	par_ip ALIAS FOR $15;
	

	var_tabla character varying;
	var_fechaevento timestamp;
	var_facultad_id_base integer;
	var_codigo_base character varying;
	var_nombre_base character varying;
	var_nombre_certificado_base character varying;
	var_cantidad_ciclo_base smallint;
	var_creditos_base smallint;
	var_precompetencias_base text;
	var_competencias_base text;
	var_perfilprofesional_base text;
	var_entidad_educativa_base integer;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.cursocertificacion IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'carrera';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.cursocertificacion (facultad_id, codigo, nombre, nombre_certificado, cantidad_ciclo, creditos, precompetencias, competencias, perfilprofesional, entidad_educativa, estado_id, creadopor, creado) 
						values (par_facultad_id, par_codigo, par_nombre, par_nombre_certificado, par_cantidad_ciclo, par_creditos, par_precompetencias, par_competencias, par_perfilprofesional,par_entidad_educativa, par_estado_id, par_usuario_id, var_fechaevento)
						returning cursocertificacion_id into par_cursocertificacion_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'facultad_id', par_cursocertificacion_id, par_facultad_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'codigo', par_cursocertificacion_id, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nombre', par_cursocertificacion_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nombre_certificado', par_cursocertificacion_id, par_nombre_certificado, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'cantidad_ciclo', par_cursocertificacion_id, par_cantidad_ciclo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'creditos', par_cursocertificacion_id, par_cantidad_ciclo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'precompetencias', par_cursocertificacion_id, par_cantidad_ciclo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'competencias', par_cursocertificacion_id, par_cantidad_ciclo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'perfilprofesional', par_cursocertificacion_id, par_cantidad_ciclo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'entidad_educativa', par_cursocertificacion_id, par_entidad_educativa, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_cursocertificacion_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select facultad_id, codigo, nombre, nombre_certificado, cantidad_ciclo, creditos, precompetencias, competencias, perfilprofesional, estado_id 
				into var_facultad_id_base, var_codigo_base, var_nombre_base, var_nombre_certificado_base, var_cantidad_ciclo_base, var_creditos_base, var_precompetencias_base, 
				     var_competencias_base, var_perfilprofesional_base, var_estado_id_base 
				from academico.cursocertificacion where cursocertificacion_id = par_cursocertificacion_id;
			update academico.cursocertificacion set facultad_id = par_facultad_id, codigo = par_codigo, nombre = par_nombre, nombre_certificado = par_nombre_certificado, cantidad_ciclo = par_cantidad_ciclo,
						creditos = par_creditos, precompetencias = par_precompetencias, competencias = par_competencias, perfilprofesional = par_perfilprofesional, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
						where cursocertificacion_id = par_cursocertificacion_id;
			if var_facultad_id_base <> par_facultad_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'facultad_id', par_cursocertificacion_id, var_facultad_id_base, par_facultad_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_codigo_base <> par_codigo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'codigo', par_cursocertificacion_id, var_codigo_base, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nombre_base <> par_nombre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre', par_cursocertificacion_id, var_nombre_base, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nombre_certificado_base <> par_nombre_certificado then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre_certificado', par_cursocertificacion_id, var_nombre_certificado_base, par_nombre_certificado, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_cantidad_ciclo_base <> par_cantidad_ciclo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'cantidad_ciclo', par_cursocertificacion_id, var_cantidad_ciclo_base, par_cantidad_ciclo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_creditos_base <> par_creditos then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'creditos', par_cursocertificacion_id, var_creditos_base, par_creditos, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_precompetencias_base <> par_precompetencias then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'precompetencias', par_cursocertificacion_id, var_precompetencias_base, par_precompetencias, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_competencias_base <> par_competencias then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'competencias', par_cursocertificacion_id, var_competencias_base, par_competencias, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_perfilprofesional_base <> par_perfilprofesional then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'perfilprofesional', par_cursocertificacion_id, var_perfilprofesional_base, par_perfilprofesional, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_cursocertificacion_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then
			update academico.cursocertificacion set activo = 'N' where cursocertificacion_id = par_cursocertificacion_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_cursocertificacion_id, par_usuario_id, var_fechaevento, par_ip);
		end if;

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_cursocertificacion_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_cursocertificacion_id;
	END;
    RETURN next reg_mensaje;
END;
$_$;


ALTER FUNCTION academico.mant_cursocertificacion(integer, integer, character varying, character varying, character varying, smallint, smallint, text, text, text, integer, integer, integer, character, character varying) OWNER TO attinae_user;

--
-- Name: mant_cursonivelacion(integer, integer, integer, integer, character varying, integer, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_cursonivelacion(integer, integer, integer, integer, character varying, integer, integer, integer, integer, character, character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $_$

DECLARE
	par_cursonivelacion_id ALIAS FOR $1;
	par_aniolectivo_id ALIAS FOR $2;
	par_periodo_id ALIAS FOR $3;
	par_carrera_id ALIAS FOR $4;
	par_descripcion ALIAS FOR $5;
	par_entidad_educativa ALIAS FOR $6;
	par_planificacioncarrera_id ALIAS FOR $7;
	par_estado_id ALIAS FOR $8;
	par_usuario_id ALIAS FOR $9;
	par_accion ALIAS FOR $10;
	par_ip ALIAS FOR $11;

	var_tabla character varying;
	var_aniolectivo_id_base integer;
	var_periodo_id_base integer;
	var_carrera_id_base integer;
	var_descripcion_base character varying;
	var_planificacioncarrera_id_base integer;
	var_estado_id_base integer;
	var_fechaevento timestamp;
	cur_cursojornada refcursor;
	rec_cursojornada record;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.cursonivelacion IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'cursonivelacion';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.cursonivelacion (aniolectivo_id, periodo_id, carrera_id, descripcion, entidadeducativa_id, planificacioncarrera_id, estado_id, creadopor, creado) 
						values (par_aniolectivo_id, par_periodo_id, par_carrera_id, par_descripcion, par_entidad_educativa, par_planificacioncarrera_id, par_estado_id, par_usuario_id, var_fechaevento)
						returning cursonivelacion_id into par_cursonivelacion_id;

			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'aniolectivo_id', par_cursonivelacion_id, par_aniolectivo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'periodo_id', par_cursonivelacion_id, par_periodo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'carrera_id', par_cursonivelacion_id, par_carrera_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_cursonivelacion_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'planificacioncarrera_id', par_cursonivelacion_id, par_planificacioncarrera_id, par_usuario_id, var_fechaevento, par_ip);			
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_cursonivelacion_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select aniolectivo_id, periodo_id, carrera_id, descripcion, planificacioncarrera_id, estado_id 
				into var_aniolectivo_id_base, var_periodo_id_base, var_carrera_id_base, var_descripcion_base, var_planificacioncarrera_id_base, var_estado_id_base 
				from academico.cursonivelacion where cursonivelacion_id = par_cursonivelacion_id;
			update academico.cursonivelacion set aniolectivo_id = par_aniolectivo_id, periodo_id = par_periodo_id, carrera_id = par_carrera_id, descripcion = par_descripcion, 
							planificacioncarrera_id = par_planificacioncarrera_id, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento
						where cursonivelacion_id = par_cursonivelacion_id;
			if var_aniolectivo_id_base <> par_aniolectivo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'aniolectivo_id', par_cursonivelacion_id, var_aniolectivo_id_base, par_aniolectivo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_periodo_id_base <> par_periodo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'periodo_id', par_cursonivelacion_id, var_periodo_id_base, par_periodo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_carrera_id_base <> par_carrera_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'carrera_id', par_cursonivelacion_id, var_carrera_id_base, par_carrera_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_cursonivelacion_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacioncarrera_id_base <> par_planificacioncarrera_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'planificacioncarrera_id', par_cursonivelacion_id, var_planificacioncarrera_id_base, par_planificacioncarrera_id, par_usuario_id, var_fechaevento, par_ip);
			end if;			
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_cursonivelacion_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			
			open cur_cursojornada for select * from academico.cursonivelacionjornada where cursonivelacion_id = par_cursonivelacion_id and activo = 'S' ;
			loop
				fetch cur_cursojornada into rec_cursojornada;
				exit when not found;
				reg_mensaje := (select academico.mant_cursonivelacionjornada (rec_cursojornada.cursonivelacionjornada_id, rec_cursojornada.cursonivelacion_id, rec_cursojornada.jornada_id, 
												rec_cursojornada.paralelo, par_estado_id, par_usuario_id, par_accion, par_ip));
				if reg_mensaje.error <> 0::bit then
					raise exception '%', reg_mensaje.mensaje::character varying;
				end if;
			end loop;
			close cur_cursojornada;
			
		elsif par_accion = 'D' then
			update academico.cursonivelacion set activo = 'N' where cursonivelacion_id = par_cursonivelacion_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_cursonivelacion_id, par_usuario_id, var_fechaevento, par_ip);
		end if;

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_cursonivelacion_id; 
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_cursonivelacion_id; 
	END;
    RETURN next reg_mensaje;
END;

$_$;


ALTER FUNCTION academico.mant_cursonivelacion(integer, integer, integer, integer, character varying, integer, integer, integer, integer, character, character varying) OWNER TO attinae_user;

--
-- Name: mant_cursonivelacionjornada(integer, integer, integer, character, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_cursonivelacionjornada(par_cursonivelacionjornada_id integer, par_cursonivelacion_id integer, par_jornada_id integer, par_paralelo character, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_cursonivelacion_id_base integer;
	var_jornada_id_base integer;
	var_paralelo_base character;
	var_cupo_base smallint;
	var_estado_id_base integer;
	var_fechaevento timestamp;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.cursonivelacionjornada IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'cursonivelacionjornada';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.cursonivelacionjornada (cursonivelacion_id, jornada_id, paralelo, cupo, cantregistrado, cantprerregistrado, estado_id, creadopor, creado) 
						values (par_cursonivelacion_id, par_jornada_id, par_paralelo, 0, 0, 0, par_estado_id, par_usuario_id, var_fechaevento)
						returning cursonivelacionjornada_id into par_cursonivelacionjornada_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'cursonivelacion_id', par_cursonivelacionjornada_id, par_cursonivelacion_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'jornada_id', par_cursonivelacionjornada_id, par_jornada_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'paralelo', par_cursonivelacionjornada_id, par_paralelo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'cupo', par_cursonivelacionjornada_id, par_cupo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'cantregistrado', par_cursonivelacionjornada_id, 0, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_cursonivelacionjornada_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select cursonivelacion_id, jornada_id, paralelo, cupo, estado_id 
				into var_cursonivelacion_id_base, var_jornada_id_base, var_paralelo_base, var_estado_id_base 
				from academico.cursonivelacionjornada where cursonivelacionjornada_id = par_cursonivelacionjornada_id;
			update academico.cursonivelacionjornada set cursonivelacion_id = par_cursonivelacion_id, jornada_id = par_jornada_id, paralelo = par_paralelo, 
								    estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento
						where cursonivelacionjornada_id = par_cursonivelacionjornada_id;
			if var_cursonivelacion_id_base <> par_cursonivelacion_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'cursonivelacion_id', par_cursonivelacionjornada_id, var_cursonivelacion_id_base, par_cursonivelacion_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_jornada_id_base <> par_jornada_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'jornada_id', par_cursonivelacionjornada_id, var_jornada_id_base, par_jornada_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_paralelo_base <> par_paralelo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'paralelo', par_cursonivelacionjornada_id, var_paralelo_base, par_paralelo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_cursonivelacionjornada_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then
			update academico.cursonivelacionjornada set activo = 'N' where cursonivelacionjornada_id = par_cursonivelacionjornada_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_cursonivelacionjornada_id, par_usuario_id, var_fechaevento, par_ip);
		end if;

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_cursonivelacionjornada_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_cursonivelacionjornada_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_cursonivelacionjornada(par_cursonivelacionjornada_id integer, par_cursonivelacion_id integer, par_jornada_id integer, par_paralelo character, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_cursonivelacionjornada(par_cursonivelacionjornada_id integer, par_cursonivelacion_id integer, par_jornada_id integer, par_paralelo character, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_cursonivelacionjornada(par_cursonivelacionjornada_id integer, par_cursonivelacion_id integer, par_jornada_id integer, par_paralelo character, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla CursoNivelacionJornada sin parametro cupo';


--
-- Name: mant_cursonivelacionjornada(integer, integer, integer, character, smallint, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_cursonivelacionjornada(par_cursonivelacionjornada_id integer, par_cursonivelacion_id integer, par_jornada_id integer, par_paralelo character, par_cupo smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_cursonivelacion_id_base integer;
	var_jornada_id_base integer;
	var_paralelo_base character;
	var_cupo_base smallint;
	var_estado_id_base integer;
	var_fechaevento timestamp;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.cursonivelacionjornada IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'cursonivelacionjornada';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.cursonivelacionjornada (cursonivelacion_id, jornada_id, paralelo, cupo, cantregistrado, estado_id, creadopor, creado) 
						values (par_cursonivelacion_id, par_jornada_id, par_paralelo, par_cupo, 0, par_estado_id, par_usuario_id, var_fechaevento)
						returning cursonivelacionjornada_id into par_cursonivelacionjornada_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'cursonivelacion_id', par_cursonivelacionjornada_id, par_cursonivelacion_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'jornada_id', par_cursonivelacionjornada_id, par_jornada_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'paralelo', par_cursonivelacionjornada_id, par_paralelo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'cupo', par_cursonivelacionjornada_id, par_cupo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'cantregistrado', par_cursonivelacionjornada_id, 0, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_cursonivelacionjornada_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select cursonivelacion_id, jornada_id, paralelo, cupo, estado_id 
				into var_cursonivelacion_id_base, var_jornada_id_base, var_paralelo_base, var_cupo_base, var_estado_id_base 
				from academico.cursonivelacionjornada where cursonivelacionjornada_id = par_cursonivelacionjornada_id;
			update academico.cursonivelacionjornada set cursonivelacion_id = par_cursonivelacion_id, jornada_id = par_jornada_id, paralelo = par_paralelo, 
								cupo = par_cupo, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento
						where cursonivelacionjornada_id = par_cursonivelacionjornada_id;
			if var_cursonivelacion_id_base <> par_cursonivelacion_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'cursonivelacion_id', par_cursonivelacionjornada_id, var_cursonivelacion_id_base, par_cursonivelacion_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_jornada_id_base <> par_jornada_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'jornada_id', par_cursonivelacionjornada_id, var_jornada_id_base, par_jornada_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_paralelo_base <> par_paralelo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'paralelo', par_cursonivelacionjornada_id, var_paralelo_base, par_paralelo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_cupo_base <> par_cupo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'cupo', par_cursonivelacionjornada_id, var_cupo_base, par_cupo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_cursonivelacionjornada_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then
			update academico.cursonivelacionjornada set activo = 'N' where cursonivelacionjornada_id = par_cursonivelacionjornada_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_cursonivelacionjornada_id, par_usuario_id, var_fechaevento, par_ip);
		end if;

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_cursonivelacionjornada_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_cursonivelacionjornada_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_cursonivelacionjornada(par_cursonivelacionjornada_id integer, par_cursonivelacion_id integer, par_jornada_id integer, par_paralelo character, par_cupo smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_cursonivelacionjornada(par_cursonivelacionjornada_id integer, par_cursonivelacion_id integer, par_jornada_id integer, par_paralelo character, par_cupo smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_cursonivelacionjornada(par_cursonivelacionjornada_id integer, par_cursonivelacion_id integer, par_jornada_id integer, par_paralelo character, par_cupo smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla CursoNivelacionJornada';


--
-- Name: mant_desgloseevaluacion(integer, integer, integer, numeric, boolean, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_desgloseevaluacion(par_desgloseevaluacion_id integer, par_mallaelemento_id integer, par_detallemodoevaluacion_id integer, par_porcentajecalificacion numeric, par_desdeintegradora boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_porcentajecalificacion_base numeric;
	var_desdeintegradora_base boolean;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.desgloseevaluacion IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'desgloseevaluacion';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.desgloseevaluacion (mallaelemento_id, detallemodoevaluacion_id, porcentajecalificacion, desdeintegradora, estado_id, creadopor, creado) 
					values (par_mallaelemento_id, par_detallemodoevaluacion_id, par_porcentajecalificacion, par_desdeintegradora, par_estado_id, par_usuario_id, var_fechaevento)
					returning desgloseevaluacion_id into par_desgloseevaluacion_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'mallaelemento_id', par_desgloseevaluacion_id, par_mallaelemento_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'detallemodoevaluacion_id', par_desgloseevaluacion_id, par_detallemodoevaluacion_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'porcentajecalificacion', par_desgloseevaluacion_id, par_porcentajecalificacion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'desdeintegradora', par_desgloseevaluacion_id, par_desdeintegradora, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_desgloseevaluacion_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then		
			select porcentajecalificacion, desdeintegradora, estado_id into var_porcentajecalificacion_base, var_desdeintegradora_base, var_estado_id_base 
						from academico.desgloseevaluacion where desgloseevaluacion_id = par_desgloseevaluacion_id;						
			update academico.desgloseevaluacion set porcentajecalificacion = par_porcentajecalificacion, desdeintegradora = par_desdeintegradora, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where desgloseevaluacion_id = par_desgloseevaluacion_id;
			if var_porcentajecalificacion_base <> par_porcentajecalificacion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'porcentajecalificacion', par_desgloseevaluacion_id, var_porcentajecalificacion_base, par_porcentajecalificacion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_desdeintegradora_base <> par_desdeintegradora then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'desdeintegradora', par_desgloseevaluacion_id, var_desdeintegradora_base, par_desdeintegradora, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_desgloseevaluacion_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			
		elsif par_accion = 'D' then
			update academico.desgloseevaluacion set activo = 'N' where desgloseevaluacion_id = par_desgloseevaluacion_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_desgloseevaluacion_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_desgloseevaluacion_id; 
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_desgloseevaluacion_id; 
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_desgloseevaluacion(par_desgloseevaluacion_id integer, par_mallaelemento_id integer, par_detallemodoevaluacion_id integer, par_porcentajecalificacion numeric, par_desdeintegradora boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_desgloseevaluacion(par_desgloseevaluacion_id integer, par_mallaelemento_id integer, par_detallemodoevaluacion_id integer, par_porcentajecalificacion numeric, par_desdeintegradora boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_desgloseevaluacion(par_desgloseevaluacion_id integer, par_mallaelemento_id integer, par_detallemodoevaluacion_id integer, par_porcentajecalificacion numeric, par_desdeintegradora boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla desgloseevaluacion';


--
-- Name: mant_detallemodoevaluacion(integer, integer, character varying, numeric, boolean, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_detallemodoevaluacion(par_detallemodoevaluacion_id integer, par_modoevaluacion_id integer, par_descripcion character varying, par_porcentajecalificacion numeric, par_desdeintegradora boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_modoevaluacion_id_base integer;
	var_descripcion_base character varying;
	var_porcentajecalificacion_base numeric;
	var_desdeintegradora_base boolean;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.detallemodoevaluacion IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'detallemodoevaluacion';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.detallemodoevaluacion (modoevaluacion_id, descripcion, porcentajecalificacion, desdeintegradora, estado_id, creadopor, creado) 
					values (par_modoevaluacion_id, par_descripcion, par_porcentajecalificacion, par_desdeintegradora, par_estado_id, par_usuario_id, var_fechaevento)
					returning detallemodoevaluacion_id into par_detallemodoevaluacion_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'modoevaluacion_id', par_detallemodoevaluacion_id, par_modoevaluacion_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_detallemodoevaluacion_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'porcentajecalificacion', par_detallemodoevaluacion_id, par_porcentajecalificacion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'desdeintegradora', par_detallemodoevaluacion_id, par_desdeintegradora, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_detallemodoevaluacion_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select modoevaluacion_id, descripcion, porcentajecalificacion, desdeintegradora, estado_id into var_modoevaluacion_id_base, var_descripcion_base, var_porcentajecalificacion_base, var_desdeintegradora_base, var_estado_id_base 
						from academico.detallemodoevaluacion where detallemodoevaluacion_id = par_detallemodoevaluacion_id;
			update academico.detallemodoevaluacion set modoevaluacion_id = par_modoevaluacion_id, descripcion = par_descripcion, porcentajecalificacion = par_porcentajecalificacion, desdeintegradora = par_desdeintegradora, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where detallemodoevaluacion_id = par_detallemodoevaluacion_id;
			if var_modoevaluacion_id_base <> par_modoevaluacion_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'modoevaluacion_id', par_detallemodoevaluacion_id, var_modoevaluacion_id_base, par_modoevaluacion_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_detallemodoevaluacion_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_porcentajecalificacion_base <> par_porcentajecalificacion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'porcentajecalificacion', par_detallemodoevaluacion_id, var_porcentajecalificacion_base, par_porcentajecalificacion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_desdeintegradora_base <> par_desdeintegradora then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'desdeintegradora', par_detallemodoevaluacion_id, var_desdeintegradora_base, par_desdeintegradora, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_modoevaluacion_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.detallemodoevaluacion set activo = 'N' where detallemodoevaluacion_id = par_detallemodoevaluacion_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_detallemodoevaluacion_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_detallemodoevaluacion_id;	
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 	
	reg_mensaje.id := par_detallemodoevaluacion_id;	
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_detallemodoevaluacion(par_detallemodoevaluacion_id integer, par_modoevaluacion_id integer, par_descripcion character varying, par_porcentajecalificacion numeric, par_desdeintegradora boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_detallemodoevaluacion(par_detallemodoevaluacion_id integer, par_modoevaluacion_id integer, par_descripcion character varying, par_porcentajecalificacion numeric, par_desdeintegradora boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_detallemodoevaluacion(par_detallemodoevaluacion_id integer, par_modoevaluacion_id integer, par_descripcion character varying, par_porcentajecalificacion numeric, par_desdeintegradora boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla detallemodoevaluacion';


--
-- Name: mant_docente(integer, text, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_docente(par_persona_id integer, par_observacion text, par_titulo_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
    var_fechaevento timestamp;
	var_persona_id_base integer;
	var_observacion_base text;
	var_titulo_id_base integer;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.docente IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'docente';
		var_fechaevento := (select current_timestamp);
	        
        if par_accion = 'I' then
			INSERT INTO academico.docente(persona_id, observacion, titulo_id, estado_id, creadopor, creado) VALUES (par_persona_id, par_observacion, par_titulo_id, par_estado_id, par_usuario_id, var_fechaevento);
				
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'observacion', par_persona_id, par_observacion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'titulo_id', par_persona_id, par_titulo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_persona_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then		
            SELECT observacion, titulo_id, estado_id into var_observacion_base, var_titulo_id_base, var_estado_id_base FROM academico.docente WHERE persona_id = par_persona_id;
		
			UPDATE academico.docente SET observacion = par_observacion, titulo_id = par_titulo_id, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento
            WHERE persona_id = par_persona_id;
			
			if var_observacion_base <> par_observacion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'observacion', par_persona_id, var_observacion_base, par_observacion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_titulo_id_base <> par_titulo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'titulo_id', par_persona_id, var_titulo_id_base, par_titulo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_persona_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then
			update academico.docente set activo = 'N' where persona_id = par_persona_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_persona_id, par_usuario_id, var_fechaevento, par_ip);
		end if;

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito';		
		reg_mensaje.id := par_persona_id; 
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_persona_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_docente(par_persona_id integer, par_observacion text, par_titulo_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: mant_elementoeducativo(integer, character varying, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_elementoeducativo(par_elementoeducativo_id integer, par_codigo character varying, par_nombre character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_codigo_base character varying;
	var_nombre_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.elementoeducativo IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'elementoeducativo';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.elementoeducativo (codigo, nombre, estado_id, creadopor, creado) values (par_codigo, par_nombre, par_estado_id, par_usuario_id, var_fechaevento)
					returning elementoeducativo_id into par_elementoeducativo_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'codigo', par_elementoeducativo_id, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nombre', par_elementoeducativo_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);												
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_elementoeducativo_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select codigo, nombre, estado_id into var_codigo_base, var_nombre_base, var_estado_id_base from academico.elementoeducativo where elementoeducativo_id = par_elementoeducativo_id;
			update academico.elementoeducativo set codigo = par_codigo, nombre = par_nombre, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where elementoeducativo_id = par_elementoeducativo_id;
			if var_codigo_base <> par_codigo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'codigo', par_elementoeducativo_id, var_codigo_base, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nombre_base <> par_nombre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre', par_elementoeducativo_id, var_nombre_base, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			end if;		
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_elementoeducativo_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.elementoeducativo set activo = 'N' where elementoeducativo_id = par_elementoeducativo_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_elementoeducativo_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_elementoeducativo_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_elementoeducativo_id;		
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_elementoeducativo(par_elementoeducativo_id integer, par_codigo character varying, par_nombre character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_elementoeducativo(par_elementoeducativo_id integer, par_codigo character varying, par_nombre character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_elementoeducativo(par_elementoeducativo_id integer, par_codigo character varying, par_nombre character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla elementoeducativo';


--
-- Name: mant_elementointegra(integer, integer, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_elementointegra(par_elementointegra_id integer, par_mallaelemento_id integer, par_elementoeducativo_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_mallaelemento_id_base integer;
	var_elementoeducativo_id_base integer;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.elementointegra IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'elementointegra';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.elementointegra (mallaelemento_id, elementoeducativo_id, estado_id, creadopor, creado) 
					values (par_mallaelemento_id, par_elementoeducativo_id, par_estado_id, par_usuario_id, var_fechaevento)
					returning elementointegra_id into par_elementointegra_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'mallaelemento_id', par_elementointegra_id, par_mallaelemento_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'elementoeducativo', par_elementointegra_id, par_elementoeducativo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_elementointegra_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then		
			select mallaelemento_id, elementoeducativo_id, estado_id into var_mallaelemento_id_base, var_elementoeducativo_id_base, var_estado_id_base 
						from academico.elementointegra where elementointegra_id = par_elementointegra_id;
			update academico.elementointegra set mallaelemento_id = par_mallaelemento_id, elementoeducativo_id = par_elemenetoeducativo_id, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where elementointegra_id = par_elementointegra_id;
			if var_mallaelemento_id_base <> par_mallaelemento_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'mallaelemento_id', par_elementointegra_id, var_mallaelelemento_id_base, par_mallaelemento_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_elementoeducativo_id_base <> par_elementoeducativo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'elementoeducativo_id', par_elementointegra_id, var_elementoeducativo_id_base, par_elementoeducativo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_elementointegra_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			
		elsif par_accion = 'D' then
			update academico.elementointegra set activo = 'N' where elementointegra_id = par_elementointegra_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_elementointegra_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_elementointegra_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_elementointegra_id;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_elementointegra(par_elementointegra_id integer, par_mallaelemento_id integer, par_elementoeducativo_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_elementointegra(par_elementointegra_id integer, par_mallaelemento_id integer, par_elementoeducativo_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_elementointegra(par_elementointegra_id integer, par_mallaelemento_id integer, par_elementoeducativo_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla prerequisitoelemento';


--
-- Name: mant_entidadeducativa(integer, character varying, character varying, text, character varying, character varying, character varying, character varying, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_entidadeducativa(par_entidadeducativa_id integer, par_codigo character varying, par_nombre character varying, par_descripcion text, par_direccion character varying, par_telefonoconvencional character varying, par_telefonocelular character varying, par_email character varying, par_ruc character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
    var_codigo_base character varying;
	var_nombre_base character varying;
    var_descripcion_base text;
    var_direccion_base text;
    var_telefonoconvencional_base character varying;
    var_telefonocelular_base character varying;
    var_email_base character varying;
    var_ruc_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.entidadeducativa IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'entidadeducativa';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.entidadeducativa (codigo, nombre, descripcion, direccion, telefonoconvencional, telefonocelular, email, ruc, estado_id, creadopor, creado) 
            		values (par_codigo, par_nombre, par_descripcion, par_direccion, par_telefonoconvencional, par_telefonocelular, par_email, par_ruc, par_estado_id, par_usuario_id, var_fechaevento)
					returning entidadeducativa_id into par_entidadeducativa_id;
		    insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
							values ('I', var_tabla, 'codigo', par_entidadeducativa_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
		    insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
							values ('I', var_tabla, 'nombre', par_entidadeducativa_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
							values ('I', var_tabla, 'descripcion', par_entidadeducativa_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
		    insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
							values ('I', var_tabla, 'direccion', par_entidadeducativa_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
		    insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
							values ('I', var_tabla, 'telefonoconvencional', par_entidadeducativa_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
		    insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
							values ('I', var_tabla, 'telefonocelular', par_entidadeducativa_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
		    insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
							values ('I', var_tabla, 'email', par_entidadeducativa_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
		    insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
							values ('I', var_tabla, 'ruc', par_entidadeducativa_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
		    insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
							values ('I', var_tabla, 'estado_id', par_entidadeducativa_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select codigo, nombre, descripcion, direccion, telefonoconvencional, telefonocelular, email, ruc, estado_id 
		            into var_codigo_base, var_nombre_base, var_descripcion_base, var_direccion_base, var_telefonoconvencional_base, var_telefonocelular_base, var_email_base, var_ruc_base, var_estado_id_base 
                    from academico.entidadeducativa where entidadeducativa_id = par_entidadeducativa_id;
			update academico.entidadeducativa set codigo = par_codigo, nombre = par_nombre, descripcion = par_descripcion, direccion = par_direccion, telefonoconvencional = par_telefonoconvencional, 
            									  telefonocelular = par_telefonocelular, email = par_email, ruc = par_ruc, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where entidadeducativa_id = par_entidadeducativa_id;
			if var_codigo_base <> par_codigo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'codigo', par_entidadeducativa_id, var_codigo_base, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			end if;
            if var_nombre_base <> par_nombre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre', par_entidadeducativa_id, var_nombre_base, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_entidadeducativa_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
            if var_direccion_base <> par_direccion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'direccion', par_entidadeducativa_id, var_direccion_base, par_direccion, par_usuario_id, var_fechaevento, par_ip);
			end if;
            if var_telefonoconvencional_base <> par_telefonoconvencional then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'telefonoconvencional', par_entidadeducativa_id, var_telefonoconvencional_base, par_telefonoconvencional, par_usuario_id, var_fechaevento, par_ip);
			end if;
            if var_telefonocelular_base <> par_telefonocelular then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'telefonocelular', par_entidadeducativa_id, var_telefonocelular_base, par_telefonocelular, par_usuario_id, var_fechaevento, par_ip);
			end if;
            if var_email_base <> par_email then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'email', par_entidadeducativa_id, var_email_base, par_email, par_usuario_id, var_fechaevento, par_ip);
			end if;
            if var_ruc_base <> par_ruc then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'ruc', par_entidadeducativa_id, var_ruc_base, par_ruc, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_entidadeducativa_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.entidadeducativa set activo = 'N' where entidadeducativa_id = par_entidadeducativa_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_entidadeducativa_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_entidadeducativa_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_entidadeducativa_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_entidadeducativa(par_entidadeducativa_id integer, par_codigo character varying, par_nombre character varying, par_descripcion text, par_direccion character varying, par_telefonoconvencional character varying, par_telefonocelular character varying, par_email character varying, par_ruc character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_entidadeducativa(par_entidadeducativa_id integer, par_codigo character varying, par_nombre character varying, par_descripcion text, par_direccion character varying, par_telefonoconvencional character varying, par_telefonocelular character varying, par_email character varying, par_ruc character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_entidadeducativa(par_entidadeducativa_id integer, par_codigo character varying, par_nombre character varying, par_descripcion text, par_direccion character varying, par_telefonoconvencional character varying, par_telefonocelular character varying, par_email character varying, par_ruc character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla entidadeducativa';


--
-- Name: mant_estadocivil(integer, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_estadocivil(par_estadocivil_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.estadocivil IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'estadocivil';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.estadocivil (descripcion, estado_id, creadopor, creado) values (par_descripcion, par_estado_id, par_usuario_id, var_fechaevento)
					returning estadocivil_id into par_estadocivil_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_estadocivil_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_estadocivil_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, estado_id into var_descripcion_base, var_estado_id_base from academico.estadocivil where estadocivil_id = par_estadocivil_id;
			update academico.estadocivil set descripcion = par_descripcion, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where estadocivil_id = par_estadocivil_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_estadocivil_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_estadocivil_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.estadocivil set activo = 'N' where estadocivil_id = par_estadocivil_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_estadocivil_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_estadocivil_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_estadocivil_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_estadocivil(par_estadocivil_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_estadocivil(par_estadocivil_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_estadocivil(par_estadocivil_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla estadocivil';


--
-- Name: mant_estudiante(integer, text, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_estudiante(par_persona_id integer, par_observacion text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
    var_fechaevento timestamp;
	var_persona_id_base integer;
	var_observacion_base text;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.estudiante IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'estudiante';
		var_fechaevento := (select current_timestamp);
	        
        if par_accion = 'I' then
			INSERT INTO academico.estudiante(persona_id, observacion, estado_id, creadopor, creado) VALUES (par_persona_id, par_observacion, par_estado_id, par_usuario_id, var_fechaevento);
				
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'observacion', par_persona_id, par_observacion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_persona_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then		
            SELECT observacion, estado_id into var_observacion_base, var_estado_id_base FROM academico.estudiante WHERE persona_id = par_persona_id;
		
			UPDATE academico.estudiante SET observacion = par_observacion, titulo_id = par_titulo_id, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento
            WHERE persona_id = par_persona_id;
			
			if var_observacion_base <> par_observacion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'observacion', par_persona_id, var_observacion_base, par_observacion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_persona_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then
			update academico.estudiante set activo = 'N' where persona_id = par_persona_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_persona_id, par_usuario_id, var_fechaevento, par_ip);
		end if;

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito';		
		reg_mensaje.id := par_persona_id; 
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_persona_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_estudiante(par_persona_id integer, par_observacion text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: mant_etnia(integer, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_etnia(par_etnia_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.etnia IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'etnia';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.etnia (descripcion, estado_id, creadopor, creado) values (par_descripcion, par_estado_id, par_usuario_id, var_fechaevento)
					returning etnia_id into par_etnia_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_etnia_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_etnia_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, estado_id into var_descripcion_base, var_estado_id_base from academico.etnia where etnia_id = par_etnia_id;
			update academico.etnia set descripcion = par_descripcion, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where etnia_id = par_etnia_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_etnia_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_etnia_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.etnia set activo = 'N' where etnia_id = par_etnia_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_etnia_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_etnia_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_etnia_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_etnia(par_etnia_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_etnia(par_etnia_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_etnia(par_etnia_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla etnia';


--
-- Name: mant_facultad(integer, character varying, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_facultad(par_facultad_id integer, par_codigo character varying, par_nombre character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_codigo_base character varying;
	var_nombre_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.facultad IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'facultad';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.facultad (codigo, nombre, estado_id, creadopor, creado) values (par_codigo, par_nombre, par_estado_id, par_usuario_id, var_fechaevento)
					returning facultad_id into par_facultad_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'codigo', par_facultad_id, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nombre', par_facultad_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);						
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_facultad_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select codigo, nombre, estado_id into var_codigo_base, var_nombre_base, var_estado_id_base from academico.facultad where facultad_id = par_facultad_id;
			update academico.facultad set codigo = par_codigo, nombre = par_nombre, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento where facultad_id = par_facultad_id;
			if var_codigo_base <> par_codigo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'codigo', par_facultad_id, var_codigo_base, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nombre_base <> par_nombre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre', par_facultad_id, var_nombre_base, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			end if;			
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_facultad_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.facultad set activo = 'N' where facultad_id = par_facultad_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_facultad_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_facultad_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id := par_facultad_id;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_facultad(par_facultad_id integer, par_codigo character varying, par_nombre character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_facultad(par_facultad_id integer, par_codigo character varying, par_nombre character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_facultad(par_facultad_id integer, par_codigo character varying, par_nombre character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla facultad';


--
-- Name: mant_formapago(integer, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_formapago(par_formapago_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.formapago IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'formapago';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.formapago (descripcion, estado_id, creadopor, creado) values (par_descripcion, par_estado_id, par_usuario_id, var_fechaevento)
					returning formapago_id into par_formapago_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_formapago_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_formapago_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, estado_id into var_descripcion_base, var_estado_id_base from academico.formapago where formapago_id = par_formapago_id;
			update academico.formapago set descripcion = par_descripcion, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where formapago_id = par_formapago_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_formapago_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_formapago_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.formapago set activo = 'N' where formapago_id = par_formapago_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_formapago_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_formapago_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_formapago_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_formapago(par_formapago_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_formapago(par_formapago_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_formapago(par_formapago_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla formapago';


--
-- Name: mant_identidadgenero(integer, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_identidadgenero(par_identidadgenero_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.identidadgenero IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'identidadgenero';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.identidadgenero (descripcion, estado_id, creadopor, creado) values (par_descripcion, par_estado_id, par_usuario_id, var_fechaevento)
					returning identidadgenero_id into par_identidadgenero_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_identidadgenero_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_identidadgenero_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, estado_id into var_descripcion_base, var_estado_id_base from academico.identidadgenero where identidadgenero_id = par_identidadgenero_id;
			update academico.identidadgenero set descripcion = par_descripcion, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where identidadgenero_id = par_identidadgenero_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_identidadgenero_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_identidadgenero_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.identidadgenero set activo = 'N' where identidadgenero_id = par_identidadgenero_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_identidadgenero_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_identidadgenero_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_identidadgenero_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_identidadgenero(par_identidadgenero_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_identidadgenero(par_identidadgenero_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_identidadgenero(par_identidadgenero_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla identidadgenero';


--
-- Name: mant_idioma(integer, character varying, boolean, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_idioma(par_idioma_id integer, par_descripcion character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_eslocal_base boolean;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.idioma IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'idioma';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.idioma (descripcion, eslocal, estado_id, creadopor, creado) values (par_descripcion, par_eslocal, par_estado_id, par_usuario_id, var_fechaevento)
					returning idioma_id into par_idioma_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_idioma_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'eslocal', par_idioma_id, par_eslocal::text, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_idioma_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, eslocal, estado_id into var_descripcion_base, var_eslocal_base, var_estado_id_base from academico.idioma where idioma_id = par_idioma_id;
			update academico.idioma set descripcion = par_descripcion, eslocal = par_eslocal, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where idioma_id = par_idioma_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_idioma_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_eslocal_base <> par_eslocal then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'eslocal', par_idioma_id, var_eslocal_base, par_eslocal, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_idioma_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.idioma set activo = 'N' where idioma_id = par_idioma_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_idioma_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_idioma_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_idioma_id;	
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_idioma(par_idioma_id integer, par_descripcion character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_idioma(par_idioma_id integer, par_descripcion character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_idioma(par_idioma_id integer, par_descripcion character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla idioma';


--
-- Name: mant_iniciar_calificacion_estudiante(integer[], integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_iniciar_calificacion_estudiante(integer[], integer, integer, integer, character, character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $_$
	DECLARE
		--MD1
		-- estado 29 es cuando es nuevo 
		--estado 30 es cuando se va a actualizar
		-- Select academico.mant_iniciar_calificacion_estudiante (ARRAY[14,25],1,29,13,'S','192.168.10.1');
		        y int;
		        
						-- par_parcial_id es el id del parcial que se pasa
		        par_parcial_id ALIAS FOR $2;
						
						--  par_estado_id es el id del estado de esta tabla que puede ser 29 o 30
		        par_estado_id ALIAS FOR $3;

						--  par_usuario_id es el id del usuario que esta invocando esta funcion desde la aplicacion
		        par_usuario_id ALIAS FOR $4;

						--  par_accion es la accion a efectuar insertar actualizar o eliminar
			      par_accion ALIAS FOR $5;
			      
						--  par_ip es la ip de la computadora donde se ha conectado
						par_ip ALIAS FOR $6;


		        var_col_ids integer[];
						var_alumnos_incl integer[];
						var_alumnos_not_incl integer[];
						
		        var_fechaevento timestamp; 

		        var_paraleloestudiante_id integer;
		        var_calificacionestudiante_id integer;

		        reg_mensaje public.typ_mensajefuncion%rowtype;


    BEGIN
    var_fechaevento := (select current_timestamp);


  	LOCK TABLE academico.calificacionestudiante IN EXCLUSIVE MODE;

  	var_col_ids := ARRAY(
						SELECT 
								calificacionestudiante_id
							FROM
							  academico.calificacionestudiante
							  where
								 academico.calificacionestudiante.parcial_id = par_parcial_id AND
							  academico.calificacionestudiante.paraleloestudiante_id= ANY($1)
							 
						);
		IF coalesce(array_length(var_col_ids, 1),0) > 0  AND (coalesce(array_length(var_col_ids, 1),0) <> coalesce(array_length($1, 1),0) ) THEN
							--Primero lleno calificaciones estudiantes con los que no estan en calificacion estudiante
								
										var_alumnos_incl := ARRAY(
																SELECT 
																			paraleloestudiante_id
																	FROM
																		academico.calificacionestudiante
																		where
																		 academico.calificacionestudiante.parcial_id = par_parcial_id AND
																		academico.calificacionestudiante.paraleloestudiante_id= ANY($1)										 
																);
																
										--Aqui ya tengo a los que aun no se les ha creado en calificacion estudiante
									  	var_alumnos_not_incl := ARRAY(
											SELECT array(
												SELECT unnest($1)
												EXCEPT
												SELECT unnest(var_alumnos_incl)
											)
											);


														  	--- Con estos alumnos ya comienzo a llenarlos en la tabla
										IF coalesce(array_length(var_alumnos_not_incl, 1),0) > 0 THEN

																			-- INICIO 
													foreach  var_paraleloestudiante_id in array var_alumnos_not_incl
										                loop
										                    INSERT INTO
										                    academico.calificacionestudiante(
										                    paraleloestudiante_id,
										                    parcial_id,
										                    estado_id,
										                    creadopor,
										                    creado,
										                    activo)
										                    VALUES(
										                    var_paraleloestudiante_id,
										                    par_parcial_id,
										                    par_estado_id,
										                    par_usuario_id,
										                    var_fechaevento,
										                    'S')
										                returning calificacionestudiante_id into var_calificacionestudiante_id;
										                    var_col_ids := array_append(var_col_ids,var_calificacionestudiante_id);

														PERFORM seguridad.func_guardar_log ('I'::CHAR,
																															'calificacionestudiante'::VARCHAR,
																															'calificacionestudiante_id'::VARCHAR,
																															var_calificacionestudiante_id,
																															''::TEXT,
																															var_calificacionestudiante_id::TEXT,
																															par_usuario_id,
																															var_fechaevento,
																															par_ip);
																					 
																					 PERFORM seguridad.func_guardar_log('I'::CHAR,'calificacionestudiante'::VARCHAR,'paraleloestudiante_id',var_calificacionestudiante_id,''::TEXT,var_paraleloestudiante_id::TEXT,par_usuario_id,var_fechaevento,par_ip);
																						
																						PERFORM seguridad.func_guardar_log('I'::CHAR,'calificacionestudiante'::VARCHAR,'parcial_id',var_calificacionestudiante_id,''::TEXT,par_parcial_id::TEXT,par_usuario_id,var_fechaevento,par_ip);
																						
																					PERFORM	seguridad.func_guardar_log('I'::CHAR,'calificacionestudiante'::VARCHAR,'estado_id',var_calificacionestudiante_id,''::TEXT,par_estado_id::TEXT,par_usuario_id,var_fechaevento,par_ip);
																						
														end loop;
															-- FIN DEL FOR 
														BEGIN
											               FOREACH y IN ARRAY var_col_ids 
																		 LOOP
																		       			reg_mensaje.error := 0;
																						reg_mensaje.mensaje := 'Operación realizada con éxito'; 
																						reg_mensaje.id := y;

																						RETURN next reg_mensaje;

																			END LOOP;
																			

											             EXCEPTION WHEN OTHERS THEN
																	reg_mensaje.error := 1;
																	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
																			reg_mensaje.id := y;
																		 RETURN next reg_mensaje;
														END;	
										ELSE
													 BEGIN  
															FOREACH y IN ARRAY var_col_ids 
															LOOP
																RAISE NOTICE 'row = %', y;
																 reg_mensaje.error := 0;
																 reg_mensaje.mensaje := 'Ya estan creados estos registro'; 
																 reg_mensaje.id := y;						
																RETURN next reg_mensaje;
											
															END LOOP;
																EXCEPTION WHEN OTHERS THEN
																	reg_mensaje.error := 1;
																	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
																	reg_mensaje.id := y;
												
															RETURN next reg_mensaje;
													END;         
																	 
										END IF;	
		ELSE
				
				IF coalesce(array_length(var_col_ids, 1),0) = 0 THEN
							
							
							foreach  var_paraleloestudiante_id in array $1
														loop
																INSERT INTO
																academico.calificacionestudiante(
																paraleloestudiante_id,
																parcial_id,
																estado_id,
																creadopor,
																creado,
																activo)
																VALUES(
																var_paraleloestudiante_id,
																par_parcial_id,
																par_estado_id,
																par_usuario_id,
																var_fechaevento,
																'S')
																returning calificacionestudiante_id into var_calificacionestudiante_id;
																		var_col_ids := array_append(var_col_ids,var_calificacionestudiante_id);

																PERFORM seguridad.func_guardar_log ('I'::CHAR,
																											'calificacionestudiante'::VARCHAR,
																											'calificacionestudiante_id'::VARCHAR,
																											var_calificacionestudiante_id,
																											''::TEXT,
																											var_calificacionestudiante_id::TEXT,
																											par_usuario_id,
																											var_fechaevento,
																											par_ip);
																	 
																PERFORM seguridad.func_guardar_log('I'::CHAR,'calificacionestudiante'::VARCHAR,'paraleloestudiante_id',var_calificacionestudiante_id,''::TEXT,var_paraleloestudiante_id::TEXT,par_usuario_id,var_fechaevento,par_ip);
																		
																PERFORM seguridad.func_guardar_log('I'::CHAR,'calificacionestudiante'::VARCHAR,'parcial_id',var_calificacionestudiante_id,''::TEXT,par_parcial_id::TEXT,par_usuario_id,var_fechaevento,par_ip);
																		
																PERFORM	seguridad.func_guardar_log('I'::CHAR,'calificacionestudiante'::VARCHAR,'estado_id',var_calificacionestudiante_id,''::TEXT,par_estado_id::TEXT,par_usuario_id,var_fechaevento,par_ip);
														
														end loop;
														
												BEGIN
													 FOREACH y IN ARRAY var_col_ids 
													 LOOP
																	reg_mensaje.error := 0;
																	reg_mensaje.mensaje := 'Operación realizada con éxito'; 
																	reg_mensaje.id := y;

																	RETURN next reg_mensaje;

														END LOOP;    

												 	EXCEPTION WHEN OTHERS THEN
														reg_mensaje.error := 1;
														reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
														reg_mensaje.id := y;
													RETURN next reg_mensaje;
											
												END;
										
											
				
				ELSE
				
						BEGIN  
															FOREACH y IN ARRAY var_col_ids 
															LOOP
																RAISE NOTICE 'row = %', y;
																 reg_mensaje.error := 0;
																 reg_mensaje.mensaje := 'Ya estan creados estos registro'; 
																 reg_mensaje.id := y;						
																RETURN next reg_mensaje;
											
															END LOOP;
																EXCEPTION WHEN OTHERS THEN
																	reg_mensaje.error := 1;
																	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
																	reg_mensaje.id := y;
												
															RETURN next reg_mensaje;
													END;  
				
				END IF;
				
				
		END IF;

    END;
	
	$_$;


ALTER FUNCTION academico.mant_iniciar_calificacion_estudiante(integer[], integer, integer, integer, character, character varying) OWNER TO attinae_user;

--
-- Name: mant_iniciar_desglose_calificacion_estudiante(integer[], integer[], integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_iniciar_desglose_calificacion_estudiante(integer[], integer[], integer, character, character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $_$
DECLARE

-- estado 29 es cuando es nuevo 
--estado 30 es cuando se va a actualizar
-- Select academico.mant_iniciar_desglose_calificacion_estudiante (ARRAY[14,25],1,29,13,'S','192.168.10.1');
        y int;
        
		
		--  par_usuario_id es el id del usuario que esta invocando esta funcion desde la aplicacion
        par_usuario_id ALIAS FOR $3;

				--  par_accion es la accion a efectuar insertar actualizar o eliminar
	    par_accion ALIAS FOR $4;
	      
				--  par_ip es la ip de la computadora donde se ha conectado
		par_ip ALIAS FOR $5;


        var_col_deglosecalificacionest_ids integer[];
        var_col_deglosecalificacionest_ids_existentes integer[];
        var_fechaevento timestamp; 

        var_desgloseevaluacion_id integer;
        var_calificacionestudiante_id integer;

        var_desglosecalificacionestudiante_id integer;

        reg_mensaje public.typ_mensajefuncion%rowtype;
        

BEGIN
    var_fechaevento := (select current_timestamp);
		
		

    LOCK TABLE academico.desglosecalificaciconestudiante IN EXCLUSIVE MODE;
	
					FOREACH var_calificacionestudiante_id in array $1
                LOOP
                    
                    FOREACH var_desgloseevaluacion_id in array $2
                    LOOP
                               
                            perform desglosecalificacionestudiante_id from academico.desglosecalificaciconestudiante
                            where calificacionestudiante_id = var_calificacionestudiante_id AND 
                                  desgloseevaluacion_id =  var_desgloseevaluacion_id AND activo = 'S';
                                IF NOT FOUND THEN

                                                INSERT INTO
                                            academico.desglosecalificaciconestudiante(
                                            calificacionestudiante_id,
                                            desgloseevaluacion_id,
                                            calificacion_numerica,
                                            calificacion_equivalencia,
                                            estado_id,
                                            creadopor,
                                            creado,
                                            actualizadopor,
                                            actualizado,
                                            activo)
                                            VALUES(
                                            var_calificacionestudiante_id,
                                            var_desgloseevaluacion_id,
                                            NULL,
                                            NULL,
                                            29,
                                            par_usuario_id,
                                            var_fechaevento,
                                            NULL,
                                            NULL,
                                            'S')
                                        returning desglosecalificacionestudiante_id into var_desglosecalificacionestudiante_id;

                                        var_col_deglosecalificacionest_ids := array_append(var_col_deglosecalificacionest_ids,var_desglosecalificacionestudiante_id);


                                        PERFORM seguridad.func_guardar_log ('I'::CHAR,
                                                                            'desglosecalificaciconestudiante'::VARCHAR,
                                                                            'desglosecalificacionestudiante_id'::VARCHAR,
                                                                            var_desglosecalificacionestudiante_id,
                                                                            ''::TEXT,
                                                                            var_desglosecalificacionestudiante_id::TEXT,
                                                                            par_usuario_id,
                                                                            var_fechaevento,
                                                                            par_ip);

                                        PERFORM seguridad.func_guardar_log ('I'::CHAR,
                                                                                        'desglosecalificaciconestudiante'::VARCHAR,
                                                                                        'calificacionestudiante_id'::VARCHAR,
                                                                                        var_desglosecalificacionestudiante_id,
                                                                                        ''::TEXT,
                                                                                        var_calificacionestudiante_id::TEXT,
                                                                                        par_usuario_id,
                                                                                        var_fechaevento,
                                                                                        par_ip);
                                                
                                        PERFORM seguridad.func_guardar_log('I'::CHAR,
                                                                            'desglosecalificaciconestudiante'::VARCHAR,
                                                                            'desgloseevaluacion_id',
                                                                            var_desglosecalificacionestudiante_id,
                                                                            ''::TEXT,
                                                                            var_desgloseevaluacion_id::TEXT,
                                                                            par_usuario_id,
                                                                            var_fechaevento,
                                                                            par_ip);

                                        PERFORM seguridad.func_guardar_log('I'::CHAR,
                                                                            'desglosecalificaciconestudiante'::VARCHAR,
                                                                            'estado_id',
                                                                            var_desglosecalificacionestudiante_id,
                                                                            ''::TEXT,
                                                                            '29'::TEXT,
                                                                            par_usuario_id,
                                                                            var_fechaevento,
                                                                            par_ip);

                                ELSE

                                    Select desglosecalificacionestudiante_id into var_desglosecalificacionestudiante_id from academico.desglosecalificaciconestudiante
                                       where calificacionestudiante_id = var_calificacionestudiante_id AND 
                                            desgloseevaluacion_id =  var_desgloseevaluacion_id and activo ='S';
                                    
                                    var_col_deglosecalificacionest_ids_existentes  := array_append(var_col_deglosecalificacionest_ids_existentes,var_desglosecalificacionestudiante_id);


                                END IF;
                                    
                                            
					end loop;

                END LOOP;    
								
								
								BEGIN
																
																
																
																
													IF coalesce(array_length(var_col_deglosecalificacionest_ids, 1),0) > 0 THEN
                                    FOREACH y IN ARRAY var_col_deglosecalificacionest_ids 
                                                    LOOP
                                                            reg_mensaje.error := 0;
                                                            reg_mensaje.mensaje := 'Operación realizada con éxito'; 
                                                            reg_mensaje.id := y;

                                                            RETURN next reg_mensaje;

                                                        END LOOP;
													END IF;
													
													IF coalesce(array_length(var_col_deglosecalificacionest_ids_existentes, 1),0) > 0 THEN
                                    FOREACH y IN ARRAY var_col_deglosecalificacionest_ids_existentes 
                                                LOOP
                                                                RAISE NOTICE 'row = %', y;
                                                                 reg_mensaje.error := 0;
                                                                 reg_mensaje.mensaje := 'Ya estan creados estos registro'; 
                                                                 reg_mensaje.id := y;                       
                                                                RETURN next reg_mensaje;
                                                  
                                                 END LOOP;
													END IF;											 

                                    EXCEPTION WHEN OTHERS THEN
                                                            reg_mensaje.error := 1;
                                                            reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
                                                            reg_mensaje.id := y;

                                                            RETURN next reg_mensaje;
								END;

          
                       


END;
$_$;


ALTER FUNCTION academico.mant_iniciar_desglose_calificacion_estudiante(integer[], integer[], integer, character, character varying) OWNER TO attinae_user;

--
-- Name: mant_items_requisitos(integer, integer, character varying, integer, numeric, character, integer, integer, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_items_requisitos(integer, integer, character varying, integer, numeric, character, integer, integer, integer, integer, integer, character, character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $_$
DECLARE
par_items_requisito_id ALIAS FOR $1;
par_fk_id ALIAS FOR $2;
par_descripcion ALIAS FOR $3;
par_entidad_educativa ALIAS FOR $4;
par_precio ALIAS FOR $5;
par_tipo ALIAS FOR $6;
par_anio_id ALIAS FOR $7;
par_periodo_id ALIAS FOR $8;
par_semestre_id ALIAS FOR $9;
par_estado_id ALIAS FOR $10;

par_usuario_id ALIAS FOR $11;
par_accion ALIAS FOR $12;
par_ip ALIAS FOR $13;

  var_tabla character varying;
  var_fechaevento timestamp;

  var_items_requisito_id_base INTEGER;
  var_fk_id_base INTEGER ;
  var_descripcion_base VARCHAR;
  var_entidad_educativa_base INTEGER ;
  var_precio_base NUMERIC(10,2);
  var_tipo_base CHAR(1) ;
  var_anio_id_base INTEGER ;
  var_periodo_id_base INTEGER;
  var_semestre_id_base INTEGER;
  var_estado_id_base INTEGER;

reg_mensaje public.typ_mensajefuncion%rowtype;

	BEGIN
		LOCK TABLE academico.items_requisitos IN EXCLUSIVE MODE;
		LOCK TABLE seguridad.log IN EXCLUSIVE MODE;

		IF par_items_requisito_id<0 THEN
			par_accion:='I';
		END IF;
		

		BEGIN 
			var_tabla := 'items_requisitos';
			var_fechaevento := (select current_timestamp);
					if par_accion = 'I' then

								INSERT INTO
									  academico.items_requisitos(
									  fk_id,
									  descripcion,
									  entidad_educativa,
									  precio,
									  tipo,
									  anio_id,
									  periodo_id,
									  semestre_id,
									  estado_id,
									  creadopor,
									  creado)
									VALUES(
									 par_fk_id,
									 par_descripcion,
									 par_entidad_educativa,
									 par_precio,
									 par_tipo,
									 par_anio_id,
									 par_periodo_id,
									 par_semestre_id,
									 par_estado_id,
									 par_usuario_id,
									 var_fechaevento
									  )
									  returning items_requisito_id into par_items_requisito_id;

								perform seguridad.func_guardar_log(par_accion,var_tabla,'fk_id',par_items_requisito_id,null::text,par_fk_id::text,par_usuario_id,var_fechaevento,par_ip);
                                
                                /*
                                insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
								values ('I',var_tabla,'fk_id',par_items_requisito_id,par_fk_id,par_usuario_id, var_fechaevento, par_ip);
								*/
								
								insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
											values ('I', var_tabla, 'descripcion', par_items_requisito_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);

								insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
											values ('I', var_tabla, 'entidad_educativa', par_items_requisito_id, par_entidad_educativa, par_usuario_id, var_fechaevento, par_ip);
											
								insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
											values ('I', var_tabla, 'precio', par_items_requisito_id, par_precio, par_usuario_id, var_fechaevento, par_ip);


								insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
								values ('I', var_tabla, 'tipo', par_items_requisito_id, par_tipo, par_usuario_id, var_fechaevento, par_ip);

								insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
								values ('I', var_tabla, 'anio_id', par_items_requisito_id, par_anio_id, par_usuario_id, var_fechaevento, par_ip);

								insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
								values ('I', var_tabla, 'periodo_id', par_items_requisito_id, par_periodo_id, par_usuario_id, var_fechaevento, par_ip);

								insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
								values ('I', var_tabla, 'semestre_id', par_items_requisito_id, par_semestre_id, par_usuario_id, var_fechaevento, par_ip);

								insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
								values ('I', var_tabla, 'estado_id', par_items_requisito_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
											

					elsif par_accion = 'U' then

								SELECT 
								  academico.items_requisitos.fk_id,
								  academico.items_requisitos.descripcion,
								  academico.items_requisitos.entidad_educativa,
								  academico.items_requisitos.precio,
								  academico.items_requisitos.tipo,
								  academico.items_requisitos.anio_id,
								  academico.items_requisitos.periodo_id,
								  academico.items_requisitos.semestre_id,
								  academico.items_requisitos.estado_id
								  INTO
									var_fk_id_base,
									var_descripcion_base,
									var_entidad_educativa_base,
									var_precio_base,
									var_tipo_base,
									var_anio_id_base,
									var_periodo_id_base,
									var_semestre_id_base,
									var_estado_id_base
								FROM
								  academico.items_requisitos
								WHERE
								  academico.items_requisitos.items_requisito_id = par_items_requisito_id AND 
								  academico.items_requisitos.entidad_educativa = par_entidad_educativa;

								  
								UPDATE 
								  academico.items_requisitos
								SET
									fk_id=par_fk_id,
									descripcion=par_descripcion,
									entidad_educativa=par_entidad_educativa,
									precio=par_precio,
									tipo=par_tipo,
									anio_id=par_anio_id,
									periodo_id=par_periodo_id,
									semestre_id=par_semestre_id,
									estado_id=par_estado_id,
									  actualizadopor = par_usuario_id,
									  actualizado = var_fechaevento
								WHERE
								  academico.items_requisitos.items_requisito_id = par_items_requisito_id AND 
								  academico.items_requisitos.entidad_educativa = par_entidad_educativa;

								if var_fk_id_base<>par_fk_id then 
									
                                	perform seguridad.func_guardar_log(par_accion,var_tabla,'fk_id',par_items_requisito_id,var_fk_id_base::text,par_fk_id::text,par_usuario_id,var_fechaevento,par_ip);    
                                	
                                    /*
                                    INSERT INTO seguridad.log(evento,tabla,columna,registro_id,valor_anterior,valor_nuevo,usuario_id,fecha_evento,ip) 
									VALUES('U',var_tabla,'fk_id',par_items_requisito_id,var_fk_id_base,par_fk_id,par_usuario_id,var_fechaevento,par_ip);
										*/							
 	                               
                                
                                end if;
								  
								if var_descripcion_base<>par_descripcion then 
									INSERT INTO seguridad.log(evento,tabla,columna,registro_id,valor_anterior,valor_nuevo,usuario_id,fecha_evento,ip) 
									VALUES('U',var_tabla,'descripcion',par_items_requisito_id,var_descripcion_base,par_descripcion,par_usuario_id,var_fechaevento,par_ip);
								end if;
								
								if var_entidad_educativa_base<>par_entidad_educativa then 
									 INSERT INTO seguridad.log(evento,tabla,columna,registro_id,valor_anterior,valor_nuevo,usuario_id,fecha_evento,ip) 
									 VALUES('U',var_tabla,'entidad_educativa',par_items_requisito_id,var_entidad_educativa_base,par_entidad_educativa,par_usuario_id,var_fechaevento,par_ip);
								end if;
								
								if var_precio_base<>par_precio then 
									 INSERT INTO seguridad.log(evento,tabla,columna,registro_id,valor_anterior,valor_nuevo,usuario_id,fecha_evento,ip) 
									 VALUES('U',var_tabla,'precio',par_items_requisito_id,var_precio_base,par_precio,par_usuario_id,var_fechaevento,par_ip);
								end if;
								
								if var_tipo_base<>par_tipo then 
									INSERT INTO seguridad.log(evento,tabla,columna,registro_id,valor_anterior,valor_nuevo,usuario_id,fecha_evento,ip) 
									VALUES('U',var_tabla,'tipo',par_items_requisito_id,var_tipo_base,par_tipo,par_usuario_id,var_fechaevento,par_ip);
								end if;
								
								if var_anio_id_base<>par_anio_id then 
									INSERT INTO seguridad.log(evento,tabla,columna,registro_id,valor_anterior,valor_nuevo,usuario_id,fecha_evento,ip) 
									VALUES('U',var_tabla,'anio_id',par_items_requisito_id,var_anio_id_base,par_anio_id,par_usuario_id,var_fechaevento,par_ip);
								end if;
								
								if var_periodo_id_base<>par_periodo_id then 
									INSERT INTO seguridad.log(evento,tabla,columna,registro_id,valor_anterior,valor_nuevo,usuario_id,fecha_evento,ip) 
									VALUES('U',var_tabla,'periodo_id',par_items_requisito_id,var_periodo_id_base,par_periodo_id,par_usuario_id,var_fechaevento,par_ip);
								end if;
								
								if var_semestre_id_base<>par_semestre_id then 
									INSERT INTO seguridad.log(evento,tabla,columna,registro_id,valor_anterior,valor_nuevo,usuario_id,fecha_evento,ip) 
									VALUES('U',var_tabla,'semestre_id',par_items_requisito_id,var_semestre_id_base,par_semestre_id,par_usuario_id,var_fechaevento,par_ip);
								end if;
								
								if var_estado_id_base<>par_estado_id then 
									INSERT INTO seguridad.log(evento,tabla,columna,registro_id,valor_anterior,valor_nuevo,usuario_id,fecha_evento,ip) 
									VALUES('U',var_tabla,'estado_id',par_items_requisito_id,var_estado_id_base,par_estado_id,par_usuario_id,var_fechaevento,par_ip);
								end if;
 
							

				
					ELSIF par_accion = 'D' then			

							UPDATE 
							  academico.items_requisitos
							SET
							  activo = 'N'
							WHERE
							  academico.items_requisitos.items_requisito_id = par_items_requisito_id AND 
							  academico.items_requisitos.entidad_educativa = par_entidad_educativa;
							  

							INSERT INTO
								  seguridad.log(
								  evento,
								  tabla,
								  registro_id,
								  usuario_id,
								  fecha_evento,
								  ip)
								VALUES(
								  'D',
								  var_tabla,
								  par_items_requisito_id,
								  par_usuario_id,
								  var_fechaevento,
								  par_ip);
						

					END IF;

						reg_mensaje.error := 0;
						reg_mensaje.mensaje := 'Operación realizada con éxito'; 
						reg_mensaje.id := par_items_requisito_id;
						EXCEPTION WHEN OTHERS THEN
						reg_mensaje.error := 1;
						reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
						reg_mensaje.id := par_items_requisito_id;
						END;
				        RETURN next reg_mensaje;
						
		END;
$_$;


ALTER FUNCTION academico.mant_items_requisitos(integer, integer, character varying, integer, numeric, character, integer, integer, integer, integer, integer, character, character varying) OWNER TO attinae_user;

--
-- Name: mant_jornada(integer, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_jornada(par_jornada_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.jornada IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'jornada';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.jornada (descripcion, estado_id, creadopor, creado) values (par_descripcion, par_estado_id, par_usuario_id, var_fechaevento)
					returning jornada_id into par_jornada_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_jornada_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_jornada_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, estado_id into var_descripcion_base, var_estado_id_base from academico.jornada where jornada_id = par_jornada_id;
			update academico.jornada set descripcion = par_descripcion, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento where jornada_id = par_jornada_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_jornada_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;			
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_jornada_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.jornada set activo = 'N' where jornada_id = par_jornada_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_jornada_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_jornada_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id := par_jornada_id;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_jornada(par_jornada_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_jornada(par_jornada_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_jornada(par_jornada_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla jornada';


--
-- Name: mant_malla(integer, integer, character varying, character varying, smallint, date, date, date, date, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_malla(par_malla_id integer, par_carrera_id integer, par_codigo character varying, par_descripcion character varying, par_cantidadciclo smallint, par_fechainicio date, par_fechacaducidad date, par_fechaaprobacioninterna date, par_fechaaprobacionexterna date, par_resolucion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_carrera_id_base integer;
	var_codigo_base character varying;
	var_descripcion_base character varying;
	var_cantidadciclo_base smallint;
	var_fechainicio_base date;
	var_fechacaducidad_base date;
	var_ciclos_disponibles integer;
	var_fechaaprobacioninterna_base date;
	var_fechaaprobacionexterna_base date;
	var_numeroresolucion_base character varying;
	var_estado_id_base integer;	
	var_contador integer;
	cur_ciclos refcursor;
	rec_ciclo record;
	cur_mallaciclo refcursor;
	rec_mallaciclo record;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.malla IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		
		var_tabla := 'malla';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.malla (carrera_id, codigo, descripcion, cantidadciclo, fechainicio, fechacaducidad, fechaaprobacioninterna, fechaaprobacionexterna, numeroresolucion, estado_id, creadopor, creado) 
				values (par_carrera_id, par_codigo, par_descripcion, par_cantidadciclo, par_fechainicio, par_fechacaducidad, par_fechaaprobacioninterna, par_fechaaprobacionexterna, par_resolucion, par_estado_id, par_usuario_id, var_fechaevento)
				returning malla_id into par_malla_id;				
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'carrea_id', par_malla_id, par_carrera_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'codigo', par_malla_id, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_malla_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'cantidadciclo', par_malla_id, par_cantidadciclo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechainicio', par_malla_id, par_fechainicio, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechacaducidad', par_malla_id, par_fechacaducidad, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechaaprobacioninterna', par_malla_id, par_fechaaprobacioninterna, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechaaprobacionexterna', par_malla_id, par_fechaaprobacionexterna, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'numeroresolucion', par_malla_id, par_resolucion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_malla_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select carrera_id, codigo, descripcion, cantidadciclo, fechainicio, fechacaducidad, fechaaprobacioninterna, fechaaprobacionexterna, numeroresolucion, estado_id
					into var_carrera_id_base, var_codigo_base, var_descripcion_base, var_cantidadciclo_base, var_fechainicio_base, var_fechacaducidad_base
					var_fechaaprobacioninterna_base, var_fechaaprobacionexterna_base, var_numeroresolucion_base, var_estado_id_base
					from academico.malla where malla_id = par_malla_id;
			update academico.malla set carrera_id = par_carrera_id, codigo = par_codigo, descripcion = par_descripcion, cantidadciclo = par_cantidadciclo, fechainicio = par_fechainicio, fechacaducidad = par_fechacaducidad, 
					fechaaprobacioninterna = par_fechaaprobacioninterna, fechaaprobacionexterna = par_fechaaprobacionexterna, numeroresolucion = par_resolucion, actualizadopor = par_usuario_id, actualizado = var_fechaevento, 
					estado_id = par_estado_id where malla_id = par_malla_id;
			if var_carrera_id_base <> par_carrera_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'carrera_id', par_malla_id, var_carrera_id_base, par_instancia_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_codigo_base <> par_codigo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'codigo', par_malla_id, var_codigo_base, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_malla_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_cantidadciclo_base <> par_cantidadciclo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'cantidadciclo', par_malla_id, var_cantidadciclo_base, par_cantidadciclo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_fechainicio_base <> par_fechainicio then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechainicio', par_malla_id, var_fechainicio_base, par_fechainicio, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_fechacaducidad_base <> par_fechacaducidad then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechacaducidad', par_malla_id, var_fechacaducidad_base, par_fechacaducidad, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_fechacaducidad_base <> par_fechacaducidad then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechaaprobacioninterna', par_malla_id, var_fechaaprobacioninterna_base, par_fechacaducidad, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_fechacaducidad_base <> par_fechacaducidad then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechaaprobacionexterna', par_malla_id, var_fechaaprobacionexterna_base, par_fechacaducidad, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_numeroresolucion_base <> par_resolucion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'numeroresolucion', par_malla_id, var_numeroresolucion_base, par_resolucion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_malla_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.malla set activo = 'N' where malla_id = par_malla_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_malla_id, par_usuario_id, var_fechaevento, par_ip);
			open cur_mallaciclo for select mallaciclo_id from academico.mallaciclo where malla_id = par_malla_id;
			loop
				fetch cur_mallaciclo into rec_mallaciclo;
				exit when not found;
				reg_mensaje := (select academico.mant_mallaciclo (rec_mallaciclo.mallaciclo_id, 0::integer, 0::integer, 0::integer, 0::integer, ''::text, par_estado_id, par_usuario_id, 'D'::character, par_ip));
			end loop;
			close cur_mallaciclo;						
		end if;

		--MallaCiclo
		var_ciclos_disponibles := (select count(*) from academico.ciclo where estado_id = 1 and activo = 'S');
		if var_ciclos_disponibles = 0 then
		begin
			raise exception 'No se puede continuar con la operación, no hay Ciclos creados'; 
		end;
		elsif var_ciclos_disponibles < par_cantidadciclo then
		begin
			raise exception 'No se puede continuar con la operación, no existe la cantidad de Ciclos suficientes'; 
		end;
		else
		begin
			var_contador := 1;
			par_estado_id := 1;
			open cur_ciclos for select ciclo_id, descripcion from academico.ciclo where activo = 'S' order by orden;
			loop
				fetch cur_ciclos into rec_ciclo;
				exit when not found;
				if par_accion = 'I' and var_contador <= par_cantidadciclo then
					reg_mensaje := (select academico.mant_mallaciclo (0::integer, (select last_value from academico.pk_malla_id_seq)::integer, rec_ciclo.ciclo_id, 0::integer, 0::integer, ''::text, par_estado_id, par_usuario_id, 'I'::character, par_ip));
				elsif par_accion = 'U' and par_cantidadciclo > var_cantidadciclo_base and var_contador > var_cantidadciclo_base then 
					reg_mensaje := (select academico.mant_mallaciclo (0::integer, par_malla_id, rec_ciclo.ciclo_id, 0::integer, 0::integer, ''::text, par_usuario_id, par_estado_id, 'I'::character, par_ip));
				elsif par_accion = 'U' and var_cantidadciclo_base > par_cantidadciclo and var_contador > par_cantidadciclo then
					reg_mensaje := (select academico.mant_mallaciclo (0::integer, par_malla_id, rec_ciclo.ciclo_id, 0::integer, 0::integer, ''::text, par_estado_id, par_usuario_id, 'D'::character, par_ip));
				end if;
				if reg_mensaje.error <> 0::bit then
					raise exception '%', reg_mensaje.mensaje::character varying;
				end if;
				var_contador := var_contador + 1;
			end loop;
			close cur_ciclos;
		end;
		end if;		
		
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_malla_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_malla_id;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_malla(par_malla_id integer, par_carrera_id integer, par_codigo character varying, par_descripcion character varying, par_cantidadciclo smallint, par_fechainicio date, par_fechacaducidad date, par_fechaaprobacioninterna date, par_fechaaprobacionexterna date, par_resolucion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_malla(par_malla_id integer, par_carrera_id integer, par_codigo character varying, par_descripcion character varying, par_cantidadciclo smallint, par_fechainicio date, par_fechacaducidad date, par_fechaaprobacioninterna date, par_fechaaprobacionexterna date, par_resolucion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_malla(par_malla_id integer, par_carrera_id integer, par_codigo character varying, par_descripcion character varying, par_cantidadciclo smallint, par_fechainicio date, par_fechacaducidad date, par_fechaaprobacioninterna date, par_fechaaprobacionexterna date, par_resolucion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla malla';


--
-- Name: mant_mallaciclo(integer, integer, integer, integer, integer, text, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_mallaciclo(par_mallaciclo_id integer, par_malla_id integer, par_ciclo_id integer, par_unidadformacion_id integer, par_nucleoproblemico_id integer, par_resultadoaprendizaje text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
        var_unidadformacion_id_base integer;
        var_nucleoproblemico_id_base integer;
        var_resultadoaprendizaje_base text;
	var_fechaevento timestamp;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.mallaciclo IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'mallaciclo';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.mallaciclo (malla_id, ciclo_id, estado_id, creadopor, creado) values (par_malla_id, par_ciclo_id, par_estado_id, par_usuario_id, var_fechaevento)
					returning mallaciclo_id into par_mallaciclo_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'malla_id', par_mallaciclo_id, par_malla_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'ciclo_id', par_mallaciclo_id, par_ciclo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_mallaciclo_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select unidadformacion_id, nucleoproblemico_id, resultadoaprendizaje into var_unidadformacion_id_base, var_nucleoproblemico_id_base, var_resultadoaprendizaje_base
						from academico.mallaciclo where mallaciclo_id = par_mallaciclo_id;
			update academico.mallaciclo set unidadformacion_id = par_unidadformacion_id, nucleoproblemico_id = par_nucleoproblemico_id, resultadoaprendizaje = par_resultadoaprendizaje, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where mallaciclo_id = par_mallaciclo_id;
			if var_unidadformacion_id_base <> par_unidadformacion_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'unidadformacion_id', par_mallaciclo_id, var_unidadformacion_id_base, par_unidadformacion_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nucleoproblemico_id_base <> par_nucleoproblemico_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nucleproblemico_id', par_mallaciclo_id, var_nucleoproblemico_id_base, par_nucleoproblemico_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_resultadoaprendizaje_base <> par_resultadoaprendizaje then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'resultadoaprendizaje', par_mallaciclo_id, var_resultadoaprendizaje_base, par_resultadoaprendizaje, par_usuario_id, var_fechaevento, par_ip);
			end if;
		
		elsif par_accion = 'D' then
			update academico.mallaciclo set activo = 'N' where malla_id = par_malla_id and ciclo_id = par_ciclo_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, (select mallaciclo_id from academico.mallaciclo where malla_id = par_malla_id and ciclo_id = par_ciclo_id), par_usuario_id, var_fechaevento, par_ip);
		end if;
		
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_mallaciclo_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_mallaciclo_id;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_mallaciclo(par_mallaciclo_id integer, par_malla_id integer, par_ciclo_id integer, par_unidadformacion_id integer, par_nucleoproblemico_id integer, par_resultadoaprendizaje text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_mallaciclo(par_mallaciclo_id integer, par_malla_id integer, par_ciclo_id integer, par_unidadformacion_id integer, par_nucleoproblemico_id integer, par_resultadoaprendizaje text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_mallaciclo(par_mallaciclo_id integer, par_malla_id integer, par_ciclo_id integer, par_unidadformacion_id integer, par_nucleoproblemico_id integer, par_resultadoaprendizaje text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla mallaciclo';


--
-- Name: mant_mallaelemento(integer, integer, integer, integer, integer, integer, integer, smallint, boolean, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_mallaelemento(integer, integer, integer, integer, integer, integer, integer, smallint, boolean, integer, integer, integer, character, character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $_$
DECLARE
	par_mallaelemento_id ALIAS FOR $1;
	par_mallaciclo_id ALIAS FOR $2;
	par_malla_id ALIAS FOR $3;
	par_ciclo_id ALIAS FOR $4;
	par_elementoeducativo_id ALIAS FOR $5;
	par_campoformacion_id ALIAS FOR $6;
	par_modoevaluacion_id ALIAS FOR $7;
	par_creditos ALIAS FOR $8;
	par_integradora ALIAS FOR $9;
	par_entidad_educativa ALIAS FOR $10;

	par_estado_id ALIAS FOR $11;
	par_usuario_id ALIAS FOR $12;
	par_accion ALIAS FOR $13;
	par_ip ALIAS FOR $14;



	var_tabla character varying;
	var_entidad_educativa_base integer;
	var_fechaevento timestamp;
	var_mallaelemento_id_base integer;
	var_mallaciclo_id_base integer;
	var_malla_id_base integer;
	var_ciclo_id_base integer;	
	var_elementoeducativo_id_base integer;
	var_campoformacion_id_base integer;
	var_modoevaluacion_id_base integer;
	var_creditos_base integer;
	var_integradora_base boolean;
	var_estado_id_base integer;
	cur_detalleevaluacion refcursor;
	rec_detalleevaluacion record;
	cur_desgloseevaluacion refcursor;
	rec_desgloseevaluacion record;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.mallaelemento IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'mallaelemento';
		var_fechaevento := (select current_timestamp);
		if exists(select mallaciclo_id from academico.mallaelemento where mallaelemento_id = par_mallaelemento_id and activo = 'S') then
			par_accion = 'U';
		end if;
		if par_accion = 'I' then
			insert into academico.mallaelemento (mallaciclo_id, malla_id, ciclo_id, elementoeducativo_id, campoformacion_id, modoevaluacion_id, creditos, integradora,entidad_educativa, estado_id, creadopor, creado) 
					values (par_mallaciclo_id, par_malla_id, par_ciclo_id, par_elementoeducativo_id, par_campoformacion_id, par_modoevaluacion_id, par_creditos, par_integradora,par_entidad_educativa, par_estado_id, par_usuario_id, var_fechaevento)
					returning mallaelemento_id into par_mallaelemento_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'mallaciclo_id', par_mallaelemento_id, par_mallaciclo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'malla_id', par_mallaelemento_id, par_malla_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'ciclo_id', par_mallaelemento_id, par_ciclo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'elementoeducativo_id', par_mallaelemento_id, par_elementoeducativo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'campoformacion_id', par_mallaelemento_id, par_campoformacion_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'modoevaluacion_id', par_mallaelemento_id, par_modoevaluacion_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'integradora', par_mallaelemento_id, par_creditos, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'creditos', par_mallaelemento_id, par_creditos, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_mallaelemento_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select mallaciclo_id, malla_id, ciclo_id, elementoeducativo_id, campoformacion_id, modoevaluacion_id, creditos, integradora, estado_id 
					into var_mallaciclo_id_base, var_malla_id_base, var_ciclo_id_base, var_elementoeducativo_id_base, var_campoformacion_id_base, var_modoevaluacion_id_base, var_creditos_base, var_integradora_base, var_estado_id_base
					from academico.mallaelemento where mallaelemento_id = par_mallaelemento_id and entidad_educativa=par_entidad_educativa;
                    
			update academico.mallaelemento set mallaciclo_id = par_mallaciclo_id, malla_id = par_malla_id, ciclo_id = par_ciclo_id, elementoeducativo_id = par_elementoeducativo_id, campoformacion_id = par_campoformacion_id, 
					modoevaluacion_id = par_modoevaluacion_id, creditos = par_creditos, integradora = par_integradora, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento where mallaelemento_id = par_mallaelemento_id;
			if var_mallaciclo_id_base <> par_mallaciclo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'mallaciclo_id', par_mallaelemento_id, var_mallaciclo_id_base, par_mallaciclo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_malla_id_base <> par_malla_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'malla_id', par_mallaelemento_id, var_malla_id_base, par_malla_id, par_usuario_id, var_fechaevento, par_ip);
			end if;	
			if var_ciclo_id_base <> par_ciclo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'ciclo_id', par_mallaelemento_id, var_ciclo_id_base, par_ciclo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_elementoeducativo_id_base <> par_elementoeducativo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'elementoeducativo_id', par_mallaelemento_id, var_elementoeducativo_id_base, par_elementoeducativo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_campoformacion_id_base <> par_campoformacion_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'campoformacion_id', par_mallaelemento_id, var_campoformacion_id_base, par_campoformacion_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_modoevaluacion_id_base <> par_modoevaluacion_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'modoevaluacion_id', par_mallaelemento_id, var_modoevaluacion_id_base, par_modoevaluacion_id, par_usuario_id, var_fechaevento, par_ip);
				--Si son valores diferentes elimina (accion = N) los registros de desgloseevaluacion que estén asociados a la mallaelemento actual
				open cur_desgloseevaluacion for select desgloseevaluacion_id from academico.desgloseevaluacion where mallaelemento_id = par_mallaelemento_id;
				loop
					fetch cur_desgloseevaluacion into rec_desgloseevaluacion;
					exit when not found;
					reg_mensaje := (select academico.mant_desgloseevaluacion (rec_desgloseevaluacion.desgloseevaluacion_id, 0::integer, 0::integer, 0::numeric, true::boolean, 0::integer, par_usuario_id, 'D'::character, par_ip));
				end loop;
				close cur_desgloseevaluacion;
			end if;
			if var_creditos_base <> par_creditos then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'creditos', par_mallaelemento_id, var_creditos_base, par_creditos, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_integradora_base <> par_integradora then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'integradora', par_mallaelemento_id, var_integradora_base, par_integradora, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_mallaelemento_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then
			raise notice 'delete';
			update academico.mallaelemento set activo = 'N' where mallaelemento_id = par_mallaelemento_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_mallaelemento_id, par_usuario_id, var_fechaevento, par_ip);
			open cur_desgloseevaluacion for select desgloseevaluacion_id from academico.desgloseevaluacion where mallaelemento_id = par_mallaelemento_id;
			loop
				fetch cur_desgloseevaluacion into rec_desgloseevaluacion;
				exit when not found;
				reg_mensaje := (select academico.mant_desgloseevaluacion (rec_desgloseevaluacion.desgloseevaluacion_id, 0::integer, 0::integer, 0::numeric, true::boolean, 0::integer, par_usuario_id, 'D'::character, par_ip));
			end loop;
			close cur_desgloseevaluacion;						
		end if;

		--DesgloseEvaluacion
		open cur_detalleevaluacion for select detallemodoevaluacion_id, porcentajecalificacion, desdeintegradora from academico.detallemodoevaluacion where modoevaluacion_id = par_modoevaluacion_id and estado_id = 1 and activo = 'S';
		loop
			fetch cur_detalleevaluacion into rec_detalleevaluacion;
			exit when not found;
			if par_accion = 'I' then
				reg_mensaje := (select academico.mant_desgloseevaluacion (0::integer, (select last_value from academico.pk_mallaelemento_id_seq)::integer, rec_detalleevaluacion.detallemodoevaluacion_id, rec_detalleevaluacion.porcentajecalificacion, rec_detalleevaluacion.desdeintegradora, par_estado_id, par_usuario_id, 'I'::character, par_ip));
			elsif par_accion = 'U' and var_modoevaluacion_id_base <> par_modoevaluacion_id then
				reg_mensaje := (select academico.mant_desgloseevaluacion (0::integer, par_mallaelemento_id, rec_detalleevaluacion.detallemodoevaluacion_id, rec_detalleevaluacion.porcentajecalificacion, rec_detalleevaluacion.desdeintegradora, par_estado_id, par_usuario_id, 'I'::character, par_ip));
			end if;
			if reg_mensaje.error <> 0::bit then
				raise exception '%', reg_mensaje.mensaje::character varying;
			end if;
		end loop;
		close cur_detalleevaluacion;
		
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito';
		reg_mensaje.id := par_mallaelemento_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_mallaelemento_id;
	END;
    RETURN next reg_mensaje;
END;
$_$;


ALTER FUNCTION academico.mant_mallaelemento(integer, integer, integer, integer, integer, integer, integer, smallint, boolean, integer, integer, integer, character, character varying) OWNER TO attinae_user;

--
-- Name: mant_modoevaluacion(integer, character varying, boolean, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_modoevaluacion(par_modoevaluacion_id integer, par_descripcion character varying, par_paraintegrar boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_paraintegrar_base boolean;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.modoevaluacion IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'modoevaluacion';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.modoevaluacion (descripcion, paraintegrar, estado_id, creadopor, creado) values (par_descripcion, par_paraintegrar, par_estado_id, par_usuario_id, var_fechaevento)
					returning modoevaluacion_id into par_modoevaluacion_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_modoevaluacion_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'paraintegrar', par_modoevaluacion_id, par_paraintegrar, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_modoevaluacion_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, paraintegrar, estado_id into var_descripcion_base, var_paraintegrar_base, var_estado_id_base from academico.modoevaluacion where modoevaluacion_id = par_modoevaluacion_id;
			update academico.modoevaluacion set descripcion = par_descripcion, paraintegrar = par_paraintegrar, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where modoevaluacion_id = par_modoevaluacion_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_modoevaluacion_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_paraintegrar_base <> par_paraintegrar then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'paraintegrar', par_modoevaluacion_id, var_paraintegrar_base, par_paraintegrar, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_modoevaluacion_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.modoevaluacion set activo = 'N' where modoevaluacion_id = par_modoevaluacion_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_modoevaluacion_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_modoevaluacion_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 	
	reg_mensaje.id := par_modoevaluacion_id;	
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_modoevaluacion(par_modoevaluacion_id integer, par_descripcion character varying, par_paraintegrar boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_modoevaluacion(par_modoevaluacion_id integer, par_descripcion character varying, par_paraintegrar boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_modoevaluacion(par_modoevaluacion_id integer, par_descripcion character varying, par_paraintegrar boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla tipociclo';


--
-- Name: mant_nacionalidad(integer, character varying, boolean, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_nacionalidad(par_nacionalidad_id integer, par_descripcion character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
    var_eslocal_base boolean;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.nacionalidad IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'nacionalidad';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.nacionalidad (descripcion, eslocal, estado_id, creadopor, creado) values (par_descripcion, par_eslocal, par_estado_id, par_usuario_id, var_fechaevento)
					returning nacionalidad_id into par_nacionalidad_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_nacionalidad_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'eslocal', par_nacionalidad_id, par_eslocal::text, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_nacionalidad_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, eslocal, estado_id into var_descripcion_base, var_eslocal_base var_estado_id_base from academico.nacionalidad where nacionalidad_id = par_nacionalidad_id;
			update academico.nacionalidad set descripcion = par_descripcion, eslocal = par_eslocal, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where nacionalidad_id = par_nacionalidad_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_nacionalidad_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
            if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_nacionalidad_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
            if var_eslocal_base <> par_eslocal then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'eslocal', par_nacionalidad_id, var_eslocal_base, par_eslocal, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_nacionalidad_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.nacionalidad set activo = 'N' where nacionalidad_id = par_nacionalidad_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_nacionalidad_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_nacionalidad_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 	
	reg_mensaje.id := par_nacionalidad_id;	
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_nacionalidad(par_nacionalidad_id integer, par_descripcion character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_nacionalidad(par_nacionalidad_id integer, par_descripcion character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_nacionalidad(par_nacionalidad_id integer, par_descripcion character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla nacionalidad';


--
-- Name: mant_nucleoproblemico(integer, integer, character varying, text, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_nucleoproblemico(par_nucleoproblemico_id integer, par_carrera_id integer, par_descripcion character varying, par_contenido text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_carrera_id_base integer;
	var_descripcion_base character varying;
	var_contenido_base text;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.nucleoproblemico IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'nucleoproblemico';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.nucleoproblemico (carrera_id,descripcion, contenido, estado_id, creadopor, creado) 
									values (par_carrera_id, par_descripcion, par_contenido, par_estado_id, par_usuario_id, var_fechaevento)
									returning nucleoproblemico_id into par_nucleoproblemico_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'carrera_id', par_nucleoproblemico_id, par_carrera_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_nucleoproblemico_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'contenido', par_nucleoproblemico_id, par_contenido, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_nucleoproblemico_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select carrera_id, descripcion, contenido, estado_id into var_carrera_id_base, var_descripcion_base, var_contenido_base, var_estado_id_base 
					from academico.nucleoproblemico where nucleoproblemico_id = par_nucleoproblemico_id;
			update academico.nucleoproblemico set carrera_id = par_carrera_id, descripcion = par_descripcion, contenido = par_contenido, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where nucleoproblemico_id = par_nucleoproblemico_id;
			if var_carrera_id_base <> par_carrera_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'carrera_id', par_nucleoproblemico_id, var_carrera_id_base, par_carrera_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_nucleoproblemico_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_contenido_base <> par_contenido then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'contenido', par_nucleoproblemico_id, var_contenido_base, par_contenido, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_nucleoproblemico_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.nucleoproblemico set activo = 'N' where nucleoproblemico_id = par_nucleoproblemico_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_nucleoproblemico_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_nucleoproblemico_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_nucleoproblemico_id;		
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_nucleoproblemico(par_nucleoproblemico_id integer, par_carrera_id integer, par_descripcion character varying, par_contenido text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_nucleoproblemico(par_nucleoproblemico_id integer, par_carrera_id integer, par_descripcion character varying, par_contenido text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_nucleoproblemico(par_nucleoproblemico_id integer, par_carrera_id integer, par_descripcion character varying, par_contenido text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla nucleoproblemico';


--
-- Name: mant_operadora(integer, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_operadora(par_operadora_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.operadora IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'operadora';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.operadora (descripcion, estado_id, creadopor, creado) values (par_descripcion, par_estado_id, par_usuario_id, var_fechaevento)
					returning operadora_id into par_operadora_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_operadora_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_operadora_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, estado_id into var_descripcion_base, var_estado_id_base from academico.operadora where operadora_id = par_operadora_id;
			update academico.operadora set descripcion = par_descripcion, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where operadora_id = par_operadora_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_operadora_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_operadora_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.operadora set activo = 'N' where operadora_id = par_operadora_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_operadora_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_operadora_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 	
	reg_mensaje.id := par_operadora_id;	
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_operadora(par_operadora_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_operadora(par_operadora_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_operadora(par_operadora_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla operadora';


--
-- Name: mant_pais(integer, character varying, boolean, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_pais(par_pais_id integer, par_nombre character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_nombre_base character varying;
	var_eslocal_base boolean;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.pais IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'pais';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.pais (nombre, eslocal, estado_id, creadopor, creado) values (par_nombre, par_eslocal, par_estado_id, par_usuario_id, var_fechaevento)
					returning pais_id into par_pais_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nombre', par_pais_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'eslocal', par_pais_id, par_eslocal, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_pais_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select nombre, eslocal, estado_id into var_nombre_base, var_eslocal_base var_estado_id_base from academico.pais where pais_id = par_pais_id;
			update academico.pais set nombre = par_nombre, eslocal = par_eslocal, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where pais_id = par_pais_id;
			if var_nombre_base <> par_nombre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre', par_pais_id, var_nombre_base, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_eslocal_base <> par_eslocal then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'eslocal', par_pais_id, var_eslocal_base, par_eslocal, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_pais_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.pais set activo = 'N' where pais_id = par_pais_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_pais_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_pais_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_pais_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_pais(par_pais_id integer, par_nombre character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_pais(par_pais_id integer, par_nombre character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_pais(par_pais_id integer, par_nombre character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla pais';


--
-- Name: mant_paralelo(integer, integer, integer, integer, integer, integer, integer, integer, character, smallint, smallint, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_paralelo(par_paralelo_id integer, par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_malla_id integer, par_ciclo_id integer, par_jornada_id integer, par_elememtoeducativo_id integer, par_paralelo character, par_cupo smallint, par_disponible smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_anio_lectivo_id_base integer;
	var_periodo_id_base integer;
	var_carrera_id_base integer;
	var_malla_id_base integer;
	var_ciclo_id_base integer;
	var_jornada_id_base integer;
	var_elementoeducativo_id_base integer;
	var_paralelo_base character;
	var_cupo_base smallint;
	var_disponible_base smallint;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.unidadformacion IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'paralelo';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.paralelo (anio_lectivo_id, periodo_id, carrera_id, malla_id, ciclo_id, jornada_id, elementoeducativo_id, paralelo, cupo, disponible, estado_id, creadopor, creado) 
									values (par_anio_lectivo_id, par_periodo_id, par_carrera_id, par_malla_id, par_ciclo_id, par_jornada_id, par_elementoeducativo_id, par_paralelo, par_cupo, par_disponible, par_estado_id, par_usuario_id, var_fechaevento)
									returning paralelo_id into par_paralelo_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'anio_lectivo_id', par_paralelo_id, par_anio_lectivo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'periodo_id', par_paralelo_id, par_periodo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'carrera_id', par_paralelo_id, par_carrera_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'malla_id', par_paralelo_id, par_malla_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'ciclo_id', par_paralelo_id, par_ciclo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'jornada_id', par_paralelo_id, par_jornada_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'elementoeducativo_id', par_paralelo_id, par_elementoeducativo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'paralelo', par_paralelo_id, par_paralelo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'cupo', par_paralelo_id, par_cupo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'disponible', par_paralelo_id, par_disponible, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_paralelo_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select anio_lectivo_id, periodo_id, carrera_id, malla_id, ciclo_id, jornada_id, elementoeducativo_id, paralelo, cupo, disponible, estado_id 
				into var_anio_lectivo_id_base, var_periodo_id_base, var_carrera_id_base, var_malla_id_base, var_ciclo_id_base, var_jornada_id_base,
				     var_elementoeducativo_id_base, var_paralelo_base, var_cupo_base, var_disponible_base, var_estado_id_base 
					from academico.paralelo where paralelo_id = par_paralelo_id;
			update academico.paralelo set anio_lectivo_id = par_anio_lectivo_id, periodo_id = par_periodo_id, carrera_id = par_carrera_id, malla_id = par_malla_id, ciclo_id = par_ciclo_id, jornda_id = par_jornada_id,
					elementoeducativo_id = par_elementoeducativo_id, paralelo = par_paralelo, cupo = para_cupo, disponible = par_disponible, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where paralelo_id = par_paralelo_id;
			if var_anio_lectivo_id_base <> par_anio_lectivo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'anio_lectivo_id', par_paralelo_id, var_anio_lectivo_id_base, par_anio_lectivo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_periodo_id_base <> par_periodo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'periodo_id', par_paralelo_id, var_periodo_id_base, par_periodo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_carrera_id_base <> par_carrera_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'carrera_id', par_paralelo_id, var_carrera_id_base, par_carrera_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_malla_id_base <> par_malla_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'malla_id', par_paralelo_id, var_malla_id_base, par_malla_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_ciclo_id_base <> par_ciclo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'ciclo_id', par_paralelo_id, var_ciclo_id_base, par_ciclo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_jornada_id_base <> par_jornada_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'jornada_id', par_paralelo_id, var_jornada_id_base, par_jornada_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_elementoeducativo_id_base <> par_elementoeducativo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'elementoeducativo_id', par_paralelo_id, var_elementoeducativo_id_base, par_elementoeducativo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_paralelo_base <> par_paralelo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'paralelo', par_paralelo_id, var_paralelo_base, par_paralelo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_cupo_base <> par_cupo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'cupo', par_paralelo_id, var_cupo_base, par_cupo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_disponible_base <> par_disponible then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'disponible', par_paralelo_id, var_disponible_base, par_disponible, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_paralelo_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.paralelo set activo = 'N' where paralelo_id = par_paralelo_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_paralelo_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_paralelo_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id := par_paralelo_id;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_paralelo(par_paralelo_id integer, par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_malla_id integer, par_ciclo_id integer, par_jornada_id integer, par_elememtoeducativo_id integer, par_paralelo character, par_cupo smallint, par_disponible smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_paralelo(par_paralelo_id integer, par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_malla_id integer, par_ciclo_id integer, par_jornada_id integer, par_elememtoeducativo_id integer, par_paralelo character, par_cupo smallint, par_disponible smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_paralelo(par_paralelo_id integer, par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_malla_id integer, par_ciclo_id integer, par_jornada_id integer, par_elememtoeducativo_id integer, par_paralelo character, par_cupo smallint, par_disponible smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla paralelo';


--
-- Name: mant_paralelodocente(integer, integer, integer, text, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_paralelodocente(par_paralelodocente_id integer, par_paralelo_id integer, par_persona_id integer, par_observacion text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_paralelo_id_base integer;
	var_persona_id_base integer;
	var_observacion_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.paralelo IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'paralelodocente';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.paralelodocente (paralelo_id, persona_id, observacion, estado_id, creadopor, creado) values (par_paralelo_id, par_persona_id, par_observacion, par_estado_id, par_usuario_id, var_fechaevento)
					returning paralelodocente_id into par_paralelodocente_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'paralelo_id', par_paralelodocente_id, par_paralelo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'persona_id', par_paralelodocente_id, par_persona_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'observacion', par_paralelodocente_id, par_observacion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_paralelodocente_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select paralelo_id, persona_id, observacion, estado_id into var_paralelo_id_base, var_persona_id_base, var_observacion_base, var_estado_id_base from academico.paralelodocente where paralelodocente_id = par_paralelodocente_id;
			update academico.paralelodocente set paralelo_id = par_paralelo_id, persona_id = par_persona_id, observacion = par_observacion, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where paralelodocente_id = par_paralelodocente_id;
			if var_paralelo_id_base <> par_paralelo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'paralelo_id', par_paralelodocente_id, var_paralelo_id_base, par_paralelo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_persona_id_base <> par_persona_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'persona_id', par_paralelodocente_id, var_persona_id_base, par_persona_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_observacion_base <> par_observacion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'observacion', par_paralelodocente_id, var_observacion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_paralelodocente_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.paralelodocente set activo = 'N' where paralelodocente_id = par_paralelodocente_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_paralelodocente_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_paralelodocente_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_paralelodocente_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_paralelodocente(par_paralelodocente_id integer, par_paralelo_id integer, par_persona_id integer, par_observacion text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_paralelodocente(par_paralelodocente_id integer, par_paralelo_id integer, par_persona_id integer, par_observacion text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_paralelodocente(par_paralelodocente_id integer, par_paralelo_id integer, par_persona_id integer, par_observacion text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla paralelodocente';


--
-- Name: mant_parcial(integer, integer, character varying, character varying, date, date, date, date, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_parcial(par_parcial_id integer, par_periodo_id integer, par_codigo character varying, par_descripcion character varying, par_fecha_inicio date, par_fecha_fin date, par_fechaexamen_inicio date, par_fechaexamen_fin date, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_periodo_id_base integer;
	var_codigo_base character varying;
	var_descripcion_base character varying;
	var_fecha_inicio_base date;
	var_fecha_fin_base date;
	var_fechaexamen_inicio_base date;
	var_fechaexamen_fin_base date;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.parcial IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'parcial';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.parcial (periodo_id, codigo, descripcion, fecha_inicio, fecha_fin, fechaexamen_inicio, fechaexamen_fin, estado_id, creadopor, creado) 
						values (par_periodo_id, par_codigo, par_descripcion, par_fecha_inicio, par_fecha_fin, par_fechaexamen_inicio, par_fechaexamen_fin, par_estado_id, par_usuario_id, var_fechaevento)
						returning parcial_id into par_parcial_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'periodo_id', par_parcial_id, par_periodo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'codigo', par_parcial_id, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_parcial_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fecha_inicio', par_parcial_id, par_fecha_inicio, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fecha_fin', par_parcial_id, par_fecha_fin, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechaexamen_inicio', par_parcial_id, par_fechaexamen_inicio, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechaexamen_fin', par_parcial_id, par_fechaexamen_fin, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_parcial_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select periodo_id, codigo, descripcion, fecha_inicio, fecha_fin, fechaexamen_inicio, fechaexamen_fin, estado_id 
				into var_periodo_id_base, var_codigo_base, var_descripcion_base, var_fecha_inicio_base, var_fecha_fin_base, var_fechaexamen_inicio_base, var_fechaexamen_fin_base, var_estado_id_base 
				from academico.parcial where parcial_id = par_parcial_id;
			update academico.parcial set periodo_id = par_periodo_id, codigo = par_codigo, descripcion = par_descripcion, fecha_inicio = par_fecha_inicio, fecha_fin = par_fecha_fin, 
			       fechaexamen_inicio = par_fechaexamen_inicio, fechaexamen_fin = par_fechaexamen_fin, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
			       where parcial_id = par_parcial_id;
			if var_periodo_id_base <> par_periodo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'periodo_id', par_parcial_id, var_periodo_id_base, par_periodo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_codigo_base <> par_codigo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'codigo', par_parcial_id, var_codigo_base, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_parcial_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_fecha_inicio_base <> par_fecha_inicio then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fecha_inicio', par_parcial_id, var_fecha_inicio_base, par_fecha_inicio, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_fecha_fin_base <> par_fecha_fin then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fecha_fin', par_parcial_id, var_fecha_fin_base, par_fecha_fin, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_fechaexamen_inicio_base <> par_fechaexamen_inicio then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechaexamen_inicio', par_parcial_id, var_fechaexamen_inicio_base, par_fechaexamen_inicio, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_fechaexamen_fin_base <> par_fechaexamen_fin then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechaexamen_fin', par_parcial_id, var_fechaexamen_fin_base, par_fechaexamen_fin, par_usuario_id, var_fechaevento, par_ip);
			end if;

			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_parcial_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then
			update academico.parcial set activo = 'N' where parcial_id = par_parcial_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_parcial_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_parcial_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_parcial_id;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_parcial(par_parcial_id integer, par_periodo_id integer, par_codigo character varying, par_descripcion character varying, par_fecha_inicio date, par_fecha_fin date, par_fechaexamen_inicio date, par_fechaexamen_fin date, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_parcial(par_parcial_id integer, par_periodo_id integer, par_codigo character varying, par_descripcion character varying, par_fecha_inicio date, par_fecha_fin date, par_fechaexamen_inicio date, par_fechaexamen_fin date, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_parcial(par_parcial_id integer, par_periodo_id integer, par_codigo character varying, par_descripcion character varying, par_fecha_inicio date, par_fecha_fin date, par_fechaexamen_inicio date, par_fechaexamen_fin date, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla parcial';


--
-- Name: mant_periodo(integer, integer, character varying, character varying, date, date, smallint, smallint, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_periodo(par_periodo_id integer, par_anio_lectivo_id integer, par_codigo character varying, par_descripcion character varying, par_fecha_inicio date, par_fecha_fin date, par_nota_minima smallint, par_nota_maxima smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_anio_lectivo_id_base integer;
	var_codigo_base character varying;
	var_descripcion_base character varying;
	var_fecha_inicio_base date;
	var_fecha_fin_base date;
	var_nota_minima_base smallint;
	var_nota_maxima_base smallint;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.periodo IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'periodo';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.periodo (anio_lectivo_id, codigo, descripcion, fecha_inicio, fecha_fin, nota_minima, nota_maxima, estado_id, creadopor, creado) 
						values (par_anio_lectivo_id, par_codigo, par_descripcion, par_fecha_inicio, par_fecha_fin, par_nota_minima, par_nota_maxima, par_estado_id, par_usuario_id, var_fechaevento)
						returning periodo_id into par_periodo_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'anio_lectivo_id', par_periodo_id, par_anio_lectivo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'codigo', par_periodo_id, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_periodo_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fecha_inicio', par_periodo_id, par_fecha_inicio, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fecha_fin', par_periodo_id, par_fecha_fin, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nota_minima', par_periodo_id, par_nota_minima, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nota_maxima', par_periodo_id, par_nota_maxima, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_periodo_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select anio_lectivo_id, codigo, descripcion, fecha_inicio, fecha_fin, nota_minima, nota_maxima, estado_id 
				into var_anio_lectivo_id_base, var_codigo_base, var_descripcion_base, var_fecha_inicio_base, var_fecha_fin_base, var_nota_minima_base, var_nota_maxima_base, var_estado_id_base 
				from academico.periodo where periodo_id = par_periodo_id;
			update academico.periodo set anio_lectivo_id = par_anio_lectivo_id, codigo = par_codigo, descripcion = par_descripcion, fecha_inicio = par_fecha_inicio, fecha_fin = par_fecha_fin, 
			       nota_minima = par_nota_minima, nota_maxima = par_nota_maxima, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
			       where periodo_id = par_periodo_id;
			if var_anio_lectivo_id_base <> par_anio_lectivo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'anio_lectivo_id', par_periodo_id, var_anio_lectivo_id_base, par_anio_lectivo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_codigo_base <> par_codigo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'codigo', par_periodo_id, var_codigo_base, par_codigo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_periodo_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_fecha_inicio_base <> par_fecha_inicio then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fecha_inicio', par_periodo_id, var_fecha_inicio_base, par_fecha_inicio, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_fecha_fin_base <> par_fecha_fin then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fecha_fin', par_periodo_id, var_fecha_fin_base, par_fecha_fin, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nota_minima_base <> par_nota_minima then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nota_minima', par_periodo_id, var_nota_minima_base, par_nota_minima, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nota_maxima_base <> par_nota_maxima then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nota_maxima', par_periodo_id, var_nota_maxima_base, par_nota_maxima, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_periodo_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then
			update academico.periodo set activo = 'N' where periodo_id = par_periodo_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_periodo_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_periodo_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_periodo_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_periodo(par_periodo_id integer, par_anio_lectivo_id integer, par_codigo character varying, par_descripcion character varying, par_fecha_inicio date, par_fecha_fin date, par_nota_minima smallint, par_nota_maxima smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_periodo(par_periodo_id integer, par_anio_lectivo_id integer, par_codigo character varying, par_descripcion character varying, par_fecha_inicio date, par_fecha_fin date, par_nota_minima smallint, par_nota_maxima smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_periodo(par_periodo_id integer, par_anio_lectivo_id integer, par_codigo character varying, par_descripcion character varying, par_fecha_inicio date, par_fecha_fin date, par_nota_minima smallint, par_nota_maxima smallint, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla periodo';


--
-- Name: mant_persona(integer, character, character varying, character varying, character varying, character varying, character varying, date, character varying, character varying, integer, character varying, character varying, character varying, integer, date, integer, integer, integer, integer, character varying, integer, smallint, text, integer, integer, integer, integer, integer, integer, character varying, character varying, integer, integer, integer, integer, character varying, text, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: postgres
--

CREATE FUNCTION academico.mant_persona(par_persona_id integer, par_tipopersona character, par_documentoidentificacion character varying, par_nombre1 character varying, par_nombre2 character varying, par_apellido1 character varying, par_apellido2 character varying, par_fechanacimiento date, par_direccion character varying, par_telefonoconvencional character varying, par_operadorafk integer, par_telefonocelular character varying, par_emailpersonal character varying, par_emailinstitucional character varying, par_nacionalidad_id integer, par_fechaingreso date, par_tipodocumento_id integer, par_sexo_id integer, par_identidadgenero_id integer, par_estadocivil_id integer, par_tiposangre character varying, par_tipodiscapacidad_id integer, par_porcentajediscapacidad smallint, par_descripciondiscapacidad text, par_idioma_id integer, par_etnia_id integer, par_paisnacimiento_id integer, par_provincianacimiento_id integer, par_ciudadnacimiento_id integer, par_parroquianacimiento_id integer, par_personacontacto character varying, par_telefonoconctacto character varying, par_paisdomicilio_id integer, par_provinciadomicilio_id integer, par_ciudaddomicilio_id integer, par_parroquiadomicilio_id integer, par_barrio character varying, par_referenciadireccion text, par_numerocarnet character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
    var_fechaevento timestamp;
	var_tipopersona_base character;
	var_documentoidentificacion_base character varying;
	var_nombre1_base character varying;
	var_nombre2_base character varying;
	var_apellido1_base character varying;
	var_apellido2_base character varying;
	var_fechanacimiento_base date;
	var_direccion_base character varying;
	var_telefonoconvencional_base character varying;
	var_operadorafk_base integer;
	var_telefonocelular_base character varying;
	var_emailpersonal_base character varying;
	var_emailinstitucional_base character varying;
	var_nacionalidad_id_base integer;
	var_fechaingreso_base date;
	var_tipodocumento_id_base integer;
	var_sexo_id_base integer;
	var_identidadgenero_id_base integer;
	var_estadocivil_id_base integer;
	var_tiposangre_base character varying;
	var_tipodiscapacidad_id_base integer;
	var_porcentajediscapacidad_base smallint;
	var_descripciondiscapacidad_base text;
	var_idioma_id_base integer;
	var_etnia_id_base integer;
	var_paisnacimiento_id_base integer;
	var_provincianacimiento_id_base integer;
	var_ciudadnacimiento_id_base integer;
	var_parroquianacimiento_id_base integer;
	var_personacontacto_base character varying;
	var_telefonoconctacto_base character varying;
	var_paisdomicilio_id_base integer;
	var_provinciadomicilio_id_base integer;
	var_ciudaddomicilio_id_base integer;
	var_parroquiadomicilio_id_base integer;
	var_barrio_base character varying;
	var_referenciadireccion_base text;
	var_numerocarnet_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.persona IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'persona';
		var_fechaevento := (select current_timestamp);

		
	IF EXISTS(SELECT 1 FROM academico.persona  where academico.persona.documentoidentificacion=par_documentoidentificacion AND  academico.persona.activo='S' AND academico.persona.estado_id=1) and par_accion <> 'D' THEN
	   par_accion:='U';
       SELECT academico.persona.persona_id INTO par_persona_id FROM academico.persona  where academico.persona.documentoidentificacion=par_documentoidentificacion  AND  academico.persona.activo='S' AND academico.persona.estado_id=1;
	END IF;		
        
        if par_accion = 'I' then
	
                INSERT INTO
              academico.persona(
              tipopersona,
              documentoidentificacion,
              nombre1,
              nombre2,
              apellido1,
              apellido2,
              fechanacimiento,
              direccion,
              telefonoconvencional,
              operadora_fk,
              telefonocelular,
              emailpersonal,
              emailinstitucional,
              nacionalidad_id,
              fechaingreso,
              tipodocumento_id,
              sexo_id,
              identidadgenero_id,
              estadocivil_id,
              tiposangre,
              tipodiscapacidad_id,
              porcentajediscapacidad,
              descripciondiscapacidad,
              idioma_id,
              etnia_id,
              paisnacimiento_id,
              provincianacimiento_id,
              ciudadnacimiento_id,
              parroquianacimiento_id,
              personacontacto,
              telefonoconctacto,
              paisdomicilio_id,
              provinciadomicilio_id,
              ciudaddomicilio_id,
              parroquiadomicilio_id,
              barrio,
              referenciadireccion,
              numerocarnetdiscapacidad,
              estado_id,
              creadopor,
              creado
              )
            VALUES(
              par_tipopersona,
              par_documentoidentificacion,
              par_nombre1,
              par_nombre2,
              par_apellido1,
              par_apellido2,
              par_fechanacimiento,
              par_direccion,
              par_telefonoconvencional,
              par_operadorafk,
              par_telefonocelular,
              par_emailpersonal,
              par_emailinstitucional,
              par_nacionalidad_id,
              case when par_fechaingreso is null then current_date::date else par_fechaingreso end,
              par_tipodocumento_id,
              par_sexo_id,
              par_identidadgenero_id,
              par_estadocivil_id,
              par_tiposangre,
              par_tipodiscapacidad_id,
              par_porcentajediscapacidad,
              par_descripciondiscapacidad,
              par_idioma_id,
              par_etnia_id,
              par_paisnacimiento_id,
              par_provincianacimiento_id,
              par_ciudadnacimiento_id,
              par_parroquianacimiento_id,
              par_personacontacto,
              par_telefonoconctacto,
              par_paisdomicilio_id,
              par_provinciadomicilio_id,
              par_ciudaddomicilio_id,
              par_parroquiadomicilio_id,
              par_barrio,
              par_referenciadireccion,
              par_numerocarnet,
              par_estado_id,
              par_usuario_id,
              var_fechaevento
              )returning persona_id into par_persona_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'tipopersona', par_persona_id, par_tipopersona, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'documentoidentificacion', par_persona_id, par_documentoidentificacion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nombre1', par_persona_id, par_nombre1, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nombre2', par_persona_id, par_nombre2, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'apellido1', par_persona_id, par_apellido1, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'apellido2', par_persona_id, par_apellido2, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechanacimiento', par_persona_id, par_fechanacimiento, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'direccion', par_persona_id, par_direccion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'telefonoconvencional', par_persona_id, par_telefonoconvencional, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'telefonocelular', par_persona_id, par_telefonocelular, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'emailpersonal', par_persona_id, par_emailpersonal, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'emailinstitucional', par_persona_id, par_emailinstitucional, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nacionalidad_id', par_persona_id, par_nacionalidad_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechaingreso', par_persona_id, case when par_fechaingreso is null then current_date::date else par_fechaingreso end, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'tipodocumento_id', par_persona_id, par_tipodocumento_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'sexo_id', par_persona_id, par_sexo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'identidadgenero_id', par_persona_id, par_identidadgenero_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estadocivil_id', par_persona_id, par_estadocivil_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'tiposangre', par_persona_id, par_tiposangre, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'tipodiscapacidad_id', par_persona_id, par_tipodiscapacidad_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'porcentajediscapacidad', par_persona_id, par_porcentajediscapacidad, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'idioma_id', par_persona_id, par_idioma_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'etnia_id', par_persona_id, par_etnia_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'paisnacimiento_id', par_persona_id, par_paisnacimiento_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'provincianacimiento_id', par_persona_id, par_provincianacimiento_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'ciudadnacimiento_id', par_persona_id, par_ciudadnacimiento_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'parroquianacimiento_id', par_persona_id, par_parroquianacimiento_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'personacontacto', par_persona_id, par_personacontacto, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'telefonoconctacto', par_persona_id, par_telefonoconctacto, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'paisdomicilio_id', par_persona_id, par_paisdomicilio_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'provinciadomicilio_id', par_persona_id, par_provinciadomicilio_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'ciudaddomicilio_id', par_persona_id, par_ciudaddomicilio_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'parroquiadomicilio_id', par_persona_id, par_parroquiadomicilio_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'barrio', par_persona_id, par_barrio, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'referenciadireccion', par_persona_id, par_referenciadireccion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'numerocarnetdiscapacidad', par_persona_id, par_numerocarnet, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_persona_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then		
            SELECT 
             academico.persona.tipopersona,
             academico.persona.documentoidentificacion,
             academico.persona.nombre1,
             academico.persona.nombre2,
             academico.persona.apellido1,
             academico.persona.apellido2,
             academico.persona.fechanacimiento,
             academico.persona.direccion,
             academico.persona.telefonoconvencional,
             academico.persona.operadora_fk,
             academico.persona.telefonocelular,
             academico.persona.emailpersonal,
             academico.persona.emailinstitucional,
             academico.persona.nacionalidad_id,
             academico.persona.fechaingreso,
             academico.persona.tipodocumento_id,
             academico.persona.sexo_id,
             academico.persona.identidadgenero_id,
             academico.persona.estadocivil_id,
             academico.persona.tiposangre,
             academico.persona.tipodiscapacidad_id,
             academico.persona.porcentajediscapacidad,
             academico.persona.descripciondiscapacidad,
             academico.persona.idioma_id,
             academico.persona.etnia_id,
             academico.persona.paisnacimiento_id,
             academico.persona.provincianacimiento_id,
             academico.persona.ciudadnacimiento_id,
             academico.persona.parroquianacimiento_id,
             academico.persona.personacontacto,
             academico.persona.telefonoconctacto,
             academico.persona.paisdomicilio_id,
             academico.persona.provinciadomicilio_id,
             academico.persona.ciudaddomicilio_id,
             academico.persona.parroquiadomicilio_id,
             academico.persona.barrio,
             academico.persona.referenciadireccion,
             academico.persona.numerocarnetdiscapacidad,
             academico.persona.estado_id  
             into var_tipopersona_base, var_documentoidentificacion_base, var_nombre1_base, var_nombre2_base, var_apellido1_base, var_apellido2_base, var_fechanacimiento_base, var_direccion_base, var_telefonoconvencional_base,var_operadorafk_base,
                        var_telefonocelular_base, var_emailpersonal_base, var_emailinstitucional_base, var_nacionalidad_id_base, var_fechaingreso_base, var_tipodocumento_id_base, var_sexo_id_base, var_identidadgenero_id_base,
                        var_estadocivil_id_base, var_tiposangre_base, var_tipodiscapacidad_id_base, var_porcentajediscapacidad_base, var_descripciondiscapacidad_base, var_idioma_id_base, var_etnia_id_base,
                        var_paisnacimiento_id_base, var_provincianacimiento_id_base, var_ciudadnacimiento_id_base, var_parroquianacimiento_id_base, var_personacontacto_base, var_telefonoconctacto_base,
                        var_paisdomicilio_id_base, var_provinciadomicilio_id_base, var_ciudaddomicilio_id_base, var_parroquiadomicilio_id_base, var_barrio_base, var_referenciadireccion_base, var_numerocarnet_base, var_estado_id_base
             FROM
             academico.persona
             WHERE
             persona_id = par_persona_id;
		
			UPDATE 
                    academico.persona
            SET
              tipopersona = par_tipopersona,
              documentoidentificacion = par_documentoidentificacion,
              nombre1 = par_nombre1,
              nombre2 = par_nombre2,
              apellido1 = par_apellido1,
              apellido2 = par_apellido2,
              fechanacimiento = par_fechanacimiento,
              direccion = par_direccion,
              telefonoconvencional = par_telefonoconvencional,
              telefonocelular = par_telefonocelular,
              emailpersonal = par_emailpersonal,
              emailinstitucional = par_emailinstitucional,
              nacionalidad_id = par_nacionalidad_id,
              fechaingreso = par_fechaingreso,
              tipodocumento_id = par_tipodocumento_id,
              sexo_id = par_sexo_id,
              identidadgenero_id = par_identidadgenero_id,
              estadocivil_id = par_estadocivil_id,
              tiposangre = par_tiposangre,
              tipodiscapacidad_id = par_tipodiscapacidad_id,
              porcentajediscapacidad = par_porcentajediscapacidad,
              descripciondiscapacidad = par_descripciondiscapacidad,
              idioma_id = par_idioma_id,
              etnia_id = par_etnia_id,
              paisnacimiento_id = par_paisnacimiento_id,
              provincianacimiento_id = par_provincianacimiento_id,
              ciudadnacimiento_id = par_ciudadnacimiento_id,
              parroquianacimiento_id = par_parroquianacimiento_id,
              personacontacto = par_personacontacto,
              telefonoconctacto = par_telefonoconctacto,
              paisdomicilio_id = par_paisdomicilio_id,
              provinciadomicilio_id = par_provinciadomicilio_id,
              ciudaddomicilio_id = par_ciudaddomicilio_id,
              parroquiadomicilio_id = par_parroquiadomicilio_id,
              barrio = par_barrio,
              referenciadireccion = par_referenciadireccion,
              numerocarnetdiscapacidad = par_numerocarnet,
              estado_id = par_estado_id,
              actualizadopor = par_usuario_id,
              actualizado = var_fechaevento,
              operadora_fk = par_operadorafk
            WHERE
              persona_id = par_persona_id;
			
			if var_tipopersona_base <> par_tipopersona then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'tipopersona', par_persona_id, var_tipopersona_base, par_tipopersona, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_documentoidentificacion_base <> par_documentoidentificacion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'documentoidentificacion', par_persona_id, var_documentoidentificacion_base, par_documentoidentificacion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nombre1_base <> par_nombre1 then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre1', par_persona_id, var_nombre1_base, par_nombre1, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nombre2_base <> par_nombre2 then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre2', par_persona_id, var_nombre2_base, par_nombre2, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_apellido1_base <> par_apellido1 then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'apellido1', par_persona_id, var_apellido1_base, par_apellido1, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_apellido2_base <> par_apellido2 then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'apellido2', par_persona_id, var_apellido2_base, par_apellido2, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_fechanacimiento_base <> par_fechanacimiento then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechanacimiento', par_persona_id, var_fechanacimiento_base, par_fechanacimiento, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_direccion_base <> par_direccion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'direccion', par_persona_id, var_direccion_base, par_direccion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_telefonoconvencional_base <> par_telefonoconvencional then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'telefonoconvencional', par_persona_id, var_telefonoconvencional_base, par_telefonoconvencional, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_telefonocelular_base <> par_telefonocelular then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'telefonocelular', par_persona_id, var_telefonocelular_base, par_telefonocelular, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_emailpersonal_base <> par_emailpersonal then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'emailpersonal', par_persona_id, var_emailpersonal_base, par_emailpersonal, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_emailinstitucional_base <> par_emailinstitucional then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'emailinstitucional', par_persona_id, var_emailinstitucional_base, par_emailinstitucional, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nacionalidad_id_base <> par_nacionalidad_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nacionalidad_id', par_persona_id, var_nacionalidad_id_base, par_nacionalidad_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_fechaingreso_base <> par_fechaingreso then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechaingreso', par_persona_id, var_fechaingreso_base, par_fechaingreso, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_tipodocumento_id_base <> par_tipodocumento_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'tipodocumento_id', par_persona_id, var_tipodocumento_id_base, par_tipodocumento_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_sexo_id_base <> par_sexo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'sexo_id', par_persona_id, var_sexo_id_base, par_sexo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_identidadgenero_id_base <> par_identidadgenero_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'identidadgenero_id', par_persona_id, var_identidadgenero_id_base, par_identidadgenero_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estadocivil_id_base <> par_estadocivil_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estadocivil_id', par_persona_id, var_estadocivil_id_base, par_estadocivil_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_tiposangre_base <> par_tiposangre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'tiposangre', par_persona_id, var_tiposangre_base, par_tiposangre, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_tipodiscapacidad_id_base <> par_tipodiscapacidad_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'tipodiscapacidad_id', par_persona_id, var_tipodiscapacidad_id_base, par_tipodiscapacidad_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_porcentajediscapacidad_base <> par_porcentajediscapacidad then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'porcentajediscapacidad', par_persona_id, var_porcentajediscapacidad_base, par_porcentajediscapacidad, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_descripciondiscapacidad_base <> par_descripciondiscapacidad then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripciondiscapacidad', par_persona_id, var_descripciondiscapacidad_base, par_descripciondiscapacidad, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_idioma_id_base <> par_idioma_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'idioma_id', par_persona_id, var_idioma_id_base, par_idioma_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_etnia_id_base <> par_etnia_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'etnia_id', par_persona_id, var_etnia_id_base, par_etnia_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_paisnacimiento_id_base <> par_paisnacimiento_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'paisnacimiento_id', par_persona_id, var_paisnacimiento_id_base, par_paisnacimiento_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_provincianacimiento_id_base <> par_provincianacimiento_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'provincianacimiento_id', par_persona_id, var_provincianacimiento_id_base, par_provincianacimiento_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_ciudadnacimiento_id_base <> par_ciudadnacimiento_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'ciudadnacimiento_id', par_persona_id, var_ciudadnacimiento_id_base, par_ciudadnacimiento_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_parroquianacimiento_id_base <> par_parroquianacimiento_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'parroquianacimiento_id', par_persona_id, var_parroquianacimiento_id_base, par_parroquianacimiento_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_personacontacto_base <> par_personacontacto then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'personacontacto', par_persona_id, var_personacontacto_base, par_personacontacto, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_telefonoconctacto_base <> par_telefonoconctacto then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'telefonoconctacto', par_persona_id, var_telefonoconctacto_base, par_telefonoconctacto, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_paisdomicilio_id_base <> par_paisdomicilio_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'paisdomicilio_id', par_persona_id, var_paisdomicilio_id_base, par_paisdomicilio_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_provinciadomicilio_id_base <> par_provinciadomicilio_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'provinciadomicilio_id', par_persona_id, var_provinciadomicilio_id_base, par_provinciadomicilio_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_ciudaddomicilio_id_base <> par_ciudaddomicilio_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'ciudaddomicilio_id', par_persona_id, var_ciudaddomicilio_id_base, par_ciudaddomicilio_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_parroquiadomicilio_id_base <> par_parroquiadomicilio_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'parroquiadomicilio_id', par_persona_id, var_parroquiadomicilio_id_base, par_parroquiadomicilio_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_barrio_base <> par_barrio then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'barrio', par_persona_id, var_barrio_base, par_barrio, par_usuario_id, var_fechaevento, par_ip);
			end if;			
			if var_numerocarnet_base <> par_numerocarnet then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'numerocarnetdiscapacidad', par_persona_id, var_numerocarnet_base, par_numerocarnet, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_referenciadireccion_base <> par_referenciadireccion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'referenciadireccion', par_persona_id, var_referenciadireccion_base, par_referenciadireccion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_persona_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_operadorafk_base <> par_operadorafk then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'operadora_fk', par_persona_id, var_operadorafk_base, par_operadorafk, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then
			update academico.persona set activo = 'N' where persona_id = par_persona_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_persona_id, par_usuario_id, var_fechaevento, par_ip);
		end if;

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito';		
		reg_mensaje.id := par_persona_id; 
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_persona_id;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_persona(par_persona_id integer, par_tipopersona character, par_documentoidentificacion character varying, par_nombre1 character varying, par_nombre2 character varying, par_apellido1 character varying, par_apellido2 character varying, par_fechanacimiento date, par_direccion character varying, par_telefonoconvencional character varying, par_operadorafk integer, par_telefonocelular character varying, par_emailpersonal character varying, par_emailinstitucional character varying, par_nacionalidad_id integer, par_fechaingreso date, par_tipodocumento_id integer, par_sexo_id integer, par_identidadgenero_id integer, par_estadocivil_id integer, par_tiposangre character varying, par_tipodiscapacidad_id integer, par_porcentajediscapacidad smallint, par_descripciondiscapacidad text, par_idioma_id integer, par_etnia_id integer, par_paisnacimiento_id integer, par_provincianacimiento_id integer, par_ciudadnacimiento_id integer, par_parroquianacimiento_id integer, par_personacontacto character varying, par_telefonoconctacto character varying, par_paisdomicilio_id integer, par_provinciadomicilio_id integer, par_ciudaddomicilio_id integer, par_parroquiadomicilio_id integer, par_barrio character varying, par_referenciadireccion text, par_numerocarnet character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO postgres;

--
-- Name: mant_personalc(integer, character, character varying, character varying, character varying, character varying, character varying, date, character varying, character varying, character varying, character varying, character varying, integer, date, integer, integer, integer, integer, character varying, integer, smallint, text, integer, integer, integer, integer, integer, integer, character varying, character varying, integer, integer, integer, integer, character varying, text, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_personalc(par_persona_id integer, par_tipopersona character, par_documentoidentificacion character varying, par_nombre1 character varying, par_nombre2 character varying, par_apellido1 character varying, par_apellido2 character varying, par_fechanacimiento date, par_direccion character varying, par_telefonoconvencional character varying, par_telefonocelular character varying, par_emailpersonal character varying, par_emailinstitucional character varying, par_nacionalidad_id integer, par_fechaingreso date, par_tipodocumento_id integer, par_sexo_id integer, par_identidadgenero_id integer, par_estadocivil_id integer, par_tiposangre character varying, par_tipodiscapacidad_id integer, par_porcentajediscapacidad smallint, par_descripciondiscapacidad text, par_idioma_id integer, par_etnia_id integer, par_paisnacimiento_id integer, par_provincianacimiento_id integer, par_ciudadnacimiento_id integer, par_parroquianacimiento_id integer, par_personacontacto character varying, par_telefonoconctacto character varying, par_paisdomicilio_id integer, par_provinciadomicilio_id integer, par_ciudaddomicilio_id integer, par_parroquiadomicilio_id integer, par_barrio character varying, par_referenciadireccion text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF academico.typ_mensajefuncion2
    LANGUAGE plpgsql
    AS $$
DECLARE
    var_tabla character varying;
    var_fechaevento timestamp;
    var_tipopersona_base character;
    var_documentoidentificacion_base character varying;
    var_nombre1_base character varying;
    var_nombre2_base character varying;
    var_apellido1_base character varying;
    var_apellido2_base character varying;
    var_fechanacimiento_base date;
    var_direccion_base character varying;
    var_telefonoconvencional_base character varying;
    var_telefonocelular_base character varying;
    var_emailpersonal_base character varying;
    var_emailinstitucional_base character varying;
    var_nacionalidad_id_base integer;
    var_fechaingreso_base date;
    var_tipodocumento_id_base integer;
    var_sexo_id_base integer;
    var_identidadgenero_id_base integer;
    var_estadocivil_id_base integer;
    var_tiposangre_base integer;
    var_tipodiscapacidad_id_base integer;
    var_porcentajediscapacidad_base smallint;
    var_descripciondiscapacidad_base text;
    var_idioma_id_base integer;
    var_etnia_id_base integer;
    var_paisnacimiento_id_base integer;
    var_provincianacimiento_id_base integer;
    var_ciudadnacimiento_id_base integer;
    var_parroquianacimiento_id_base integer;
    var_personacontacto_base character varying;
    var_telefonoconctacto_base character varying;
    var_paisdomicilio_id_base integer;
    var_provinciadomicilio_id_base integer;
    var_ciudaddomicilio_id_base integer;
    var_parroquiadomicilio_id_base integer;
    var_barrio_base character varying;
    var_referenciadireccion_base text;
    var_estado_id_base integer;
    reg_mensaje academico.typ_mensajefuncion2%rowtype;
BEGIN
    LOCK TABLE academico.persona IN EXCLUSIVE MODE;
    LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
    BEGIN
        var_tabla := 'persona';
        var_fechaevento := (select current_timestamp);
        if par_accion = 'I' then
		
		 insert into academico.persona (tipopersona, documentoidentificacion, nombre1, nombre2, apellido1, apellido2, fechanacimiento, direccion, telefonoconvencional,
					    telefonocelular, emailpersonal, emailinstitucional, nacionalidad_id, fechaingreso, tipodocumento_id, sexo_id, identidadgenero_id,
					    estadocivil_id, tiposangre, tipodiscapacidad_id, porcentajediscapacidad, descripciondiscapacidad, idioma_id, etnia_id,
					    paisnacimiento_id, provincianacimiento_id, ciudadnacimiento_id, parroquianacimiento_id, personacontacto, telefonoconctacto,
					    paisdomicilio_id, provinciadomicilio_id, ciudaddomicilio_id, parroquiadomicilio_id, barrio, referenciadireccion, estado_id, creadopor, creado) 
					values (par_tipopersona, par_documentoidentificacion, par_nombre1, par_nombre2, par_apellido1, par_apellido2, par_fechanacimiento, par_direccion,
					    par_telefonoconvencional, par_telefonocelular, par_emailpersonal, par_emailinstitucional, par_nacionalidad_id, case when par_fechaingreso is null then current_date::date else par_fechaingreso end, par_tipodocumento_id,
					    par_sexo_id, par_identidadgenero_id, par_estadocivil_id, par_tiposangre, par_tipodiscapacidad_id, par_porcentajediscapacidad, par_descripciondiscapacidad,
					    par_idioma_id, par_etnia_id, par_paisnacimiento_id, par_provincianacimiento_id, par_ciudadnacimiento_id, par_parroquianacimiento_id, par_personacontacto,
					    par_telefonoconctacto, par_paisdomicilio_id, par_provinciadomicilio_id, par_ciudaddomicilio_id, par_parroquiadomicilio_id, par_barrio, par_referenciadireccion, 
					    par_estado_id, par_usuario_id, var_fechaevento) RETURNING id INTO par_persona_id;
	 

                            
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'tipopersona', (select last_value from academico.pk_persona_id_seq), par_tipopersona, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'documentoidentificacion', (select last_value from academico.pk_persona_id_seq), par_documentoidentificacion, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'nombre1', (select last_value from academico.pk_persona_id_seq), par_nombre1, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'nombre2', (select last_value from academico.pk_persona_id_seq), par_nombre2, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'apellido1', (select last_value from academico.pk_persona_id_seq), par_apellido1, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'apellido2', (select last_value from academico.pk_persona_id_seq), par_apellido2, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'fechanacimiento', (select last_value from academico.pk_persona_id_seq), par_fechanacimiento, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'direccion', (select last_value from academico.pk_persona_id_seq), par_direccion, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'telefonoconvencional', (select last_value from academico.pk_persona_id_seq), par_telefonoconvencional, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'telefonocelular', (select last_value from academico.pk_persona_id_seq), par_telefonocelular, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'emailpersonal', (select last_value from academico.pk_persona_id_seq), par_emailpersonal, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'emailinstitucional', (select last_value from academico.pk_persona_id_seq), par_emailinstitucional, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'nacionalidad_id', (select last_value from academico.pk_persona_id_seq), par_nacionalidad_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'fechaingreso', (select last_value from academico.pk_persona_id_seq), case when par_fechaingreso is null then current_date::date else par_fechaingreso end, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'tipodocumento_id', (select last_value from academico.pk_persona_id_seq), par_tipodocumento_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'sexo_id', (select last_value from academico.pk_persona_id_seq), par_sexo_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'identidadgenero_id', (select last_value from academico.pk_persona_id_seq), par_identidadgenero_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'estadocivil_id', (select last_value from academico.pk_persona_id_seq), par_estadocivil_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'tiposangre', (select last_value from academico.pk_persona_id_seq), par_tiposangre, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'tipodiscapacidad_id', (select last_value from academico.pk_persona_id_seq), par_tipodiscapacidad_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'porcentajediscapacidad', (select last_value from academico.pk_persona_id_seq), par_porcentajediscapacidad, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'idioma_id', (select last_value from academico.pk_persona_id_seq), par_idioma_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'etnia_id', (select last_value from academico.pk_persona_id_seq), par_etnia_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'paisnacimiento_id', (select last_value from academico.pk_persona_id_seq), par_paisnacimiento_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'provincianacimiento_id', (select last_value from academico.pk_persona_id_seq), par_provincianacimiento_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'ciudadnacimiento_id', (select last_value from academico.pk_persona_id_seq), par_ciudadnacimiento_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'parroquianacimiento_id', (select last_value from academico.pk_persona_id_seq), par_parroquianacimiento_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'personacontacto', (select last_value from academico.pk_persona_id_seq), par_personacontacto, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'telefonoconctacto', (select last_value from academico.pk_persona_id_seq), par_telefonoconctacto, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'paisdomicilio_id', (select last_value from academico.pk_persona_id_seq), par_paisdomicilio_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'provinciadomicilio_id', (select last_value from academico.pk_persona_id_seq), par_provinciadomicilio_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'ciudaddomicilio_id', (select last_value from academico.pk_persona_id_seq), par_ciudaddomicilio_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'parroquiadomicilio_id', (select last_value from academico.pk_persona_id_seq), par_parroquiadomicilio_id, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'barrio', (select last_value from academico.pk_persona_id_seq), par_barrio, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'referenciadireccion', (select last_value from academico.pk_persona_id_seq), par_referenciadireccion, par_usuario_id, var_fechaevento, par_ip);
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
                        values ('I', var_tabla, 'estado_id', (select last_value from academico.pk_persona_id_seq), par_estado_id, par_usuario_id, var_fechaevento, par_ip);
        elsif par_accion = 'U' then
            select tipopersona, documentoidentificacion, nombre1, nombre2, apellido1, apellido2, fechanacimiento, direccion, telefonoconvencional,
                telefonocelular, emailpersonal, emailinstitucional, nacionalidad_id, fechaingreso, tipodocumento_id, sexo_id, identidadgenero_id,
                estadocivil_id, tiposangre, tipodiscapacidad_id, porcentajediscapacidad, descripciondiscapacidad, idioma_id, etnia_id,
                paisnacimiento_id, provincianacimiento_id, ciudadnacimiento_id, parroquianacimiento_id, personacontacto, telefonoconctacto,
                paisdomicilio_id, provinciadomicilio_id, ciudaddomicilio_id, parroquiadomicilio_id, barrio, referenciadireccion, estado_id
                into var_tipopersona_base, var_documentoidentificacion_base, var_nombre1_base, var_nombre2_base, var_apellido1_base, var_apellido2_base, var_fechanacimiento_base, var_direccion_base, var_telefonoconvencional_base,
                    var_telefonocelular_base, var_emailpersonal_base, var_emailinstitucional_base, var_nacionalidad_id_base, var_fechaingreso_base, var_tipodocumento_id_base, var_sexo_id_base, var_identidadgenero_id_base,
                    var_estadocivil_id_base, var_tiposangre_base, var_tipodiscapacidad_id_base, var_porcentajediscapacidad_base, var_descripciondiscapacidad_base, var_idioma_id_base, var_etnia_id_base,
                    var_paisnacimiento_id_base, var_provincianacimiento_id_base, var_ciudadnacimiento_id_base, var_parroquianacimiento_id_base, var_personacontacto_base, var_telefonoconctacto_base,
                    var_paisdomicilio_id_base, var_provinciadomicilio_id_base, var_ciudaddomicilio_id_base, var_parroquiadomicilio_id_base, var_barrio_base, var_referenciadireccion_base, var_estado_id_base
                from academico.persona where persona_id = par_persona_id;
            update academico.persona set tipopersona = par_tipopersona, documentoidentificacion = par_documentoidentificacion, nombre1 = par_nombre1, nombre2 = par_nombre2, apellido1 = par_apellido1, apellido2 = par_apellido2, fechanacimiento = par_fechanacimiento, direccion = par_direccion, telefonoconvencional = par_telefonoconvencional,
                    telefonocelular = par_telefonocelular, emailpersonal = par_emailpersonal, emailinstitucional = par_emailinstitucional, nacionalidad_id = par_nacionalidad_id, fechaingreso = par_fechaingreso, tipodocumento_id = par_tipodocumento_id, sexo_id = par_sexo_id, identidadgenero_id = par_identidadgenero_id,
                    estadocivil_id = par_estadocivil_id, tiposangre = par_tiposangre, tipodiscapacidad_id = par_tipodiscapacidad_id, porcentajediscapacidad = par_porcentajediscapacidad, descripciondiscapacidad = par_descripciondiscapacidad, idioma_id = par_idioma_id, etnia_id = par_etnia_id,
                    paisnacimiento_id = par_paisnacimiento_id, provincianacimiento_id = par_provincianacimiento_id, ciudadnacimiento_id = par_ciudadnacimiento_id, parroquianacimiento_id = par_parroquianacimiento_id, personacontacto = par_personacontacto, telefonoconctacto = par_telefonoconctacto,
                    paisdomicilio_id = par_paisdomicilio_id, provinciadomicilio_id = par_provinciadomicilio_id, ciudaddomicilio_id = par_ciudaddomicilio_id, parroquiadomicilio_id = par_parroquiadomicilio_id, barrio = par_barrio, referenciadireccion = par_referenciadireccion, estado_id = par_estado_id,
                    actualizadopor = par_usuario_id, actualizado = var_fechaevento 
                        where persona_id = par_persona_id;
            if var_tipopersona_base <> par_tipopersona then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'tipopersona', par_persona_id, var_tipopersona_base, par_tipopersona, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_documentoidentificacion_base <> par_documentoidentificacion then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'documentoidentificacion', par_persona_id, var_documentoidentificacion_base, par_documentoidentificacion, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_nombre1_base <> par_nombre1 then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'nombre1', par_persona_id, var_nombre1_base, par_nombre1, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_nombre2_base <> par_nombre2 then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'nombre2', par_persona_id, var_nombre2_base, par_nombre2, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_apellido1_base <> par_apellido1 then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'apellido1', par_persona_id, var_apellido1_base, par_apellido1, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_apellido2_base <> par_apellido2 then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'apellido2', par_persona_id, var_apellido2_base, par_apellido2, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_fechanacimiento_base <> par_fechanacimiento then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'fechanacimiento', par_persona_id, var_fechanacimiento_base, par_fechanacimiento, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_direccion_base <> par_direccion then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'direccion', par_persona_id, var_direccion_base, par_direccion, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_telefonoconvencional_base <> par_telefonoconvencional then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'telefonoconvencional', par_persona_id, var_telefonoconvencional_base, par_telefonoconvencional, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_telefonocelular_base <> par_telefonocelular then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'telefonocelular', par_persona_id, var_telefonocelular_base, par_telefonocelular, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_emailpersonal_base <> par_emailpersonal then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'emailpersonal', par_persona_id, var_emailpersonal_base, par_emailpersonal, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_emailinstitucional_base <> par_emailinstitucional then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'emailinstitucional', par_persona_id, var_emailinstitucional_base, par_emailinstitucional, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_nacionalidad_id_base <> par_nacionalidad_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'nacionalidad_id', par_persona_id, var_nacionalidad_id_base, par_nacionalidad_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_fechaingreso_base <> par_fechaingreso then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'fechaingreso', par_persona_id, var_fechaingreso_base, par_fechaingreso, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_tipodocumento_id_base <> par_tipodocumento_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'tipodocumento_id', par_persona_id, var_tipodocumento_id_base, par_tipodocumento_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_sexo_id_base <> par_sexo_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'sexo_id', par_persona_id, var_sexo_id_base, par_sexo_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_identidadgenero_id_base <> par_identidadgenero_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'identidadgenero_id', par_persona_id, var_identidadgenero_id_base, par_identidadgenero_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_estadocivil_id_base <> par_estadocivil_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'estadocivil_id', par_persona_id, var_estadocivil_id_base, par_estadocivil_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_tiposangre_base <> par_tiposangre then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'tiposangre', par_persona_id, var_tiposangre_base, par_tiposangre, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_tipodiscapacidad_id_base <> par_tipodiscapacidad_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'tipodiscapacidad_id', par_persona_id, var_tipodiscapacidad_id_base, par_tipodiscapacidad_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_porcentajediscapacidad_base <> par_porcentajediscapacidad then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'porcentajediscapacidad', par_persona_id, var_porcentajediscapacidad_base, par_porcentajediscapacidad, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_descripciondiscapacidad_base <> par_descripciondiscapacidad then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'descripciondiscapacidad', par_persona_id, var_descripciondiscapacidad_base, par_descripciondiscapacidad, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_idioma_id_base <> par_idioma_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'idioma_id', par_persona_id, var_idioma_id_base, par_idioma_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_etnia_id_base <> par_etnia_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'etnia_id', par_persona_id, var_etnia_id_base, par_etnia_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_paisnacimiento_id_base <> par_paisnacimiento_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'paisnacimiento_id', par_persona_id, var_paisnacimiento_id_base, par_paisnacimiento_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_provincianacimiento_id_base <> par_provincianacimiento_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'provincianacimiento_id', par_persona_id, var_provincianacimiento_id_base, par_provincianacimiento_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_ciudadnacimiento_id_base <> par_ciudadnacimiento_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'ciudadnacimiento_id', par_persona_id, var_ciudadnacimiento_id_base, par_ciudadnacimiento_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_parroquianacimiento_id_base <> par_parroquianacimiento_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'parroquianacimiento_id', par_persona_id, var_parroquianacimiento_id_base, par_parroquianacimiento_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_personacontacto_base <> par_personacontacto then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'personacontacto', par_persona_id, var_personacontacto_base, par_personacontacto, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_telefonoconctacto_base <> par_telefonoconctacto then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'telefonoconctacto', par_persona_id, var_telefonoconctacto_base, par_telefonoconctacto, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_paisdomicilio_id_base <> par_paisdomicilio_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'paisdomicilio_id', par_persona_id, var_paisdomicilio_id_base, par_paisdomicilio_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_provinciadomicilio_id_base <> par_provinciadomicilio_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'provinciadomicilio_id', par_persona_id, var_provinciadomicilio_id_base, par_provinciadomicilio_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_ciudaddomicilio_id_base <> par_ciudaddomicilio_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'ciudaddomicilio_id', par_persona_id, var_ciudaddomicilio_id_base, par_ciudaddomicilio_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_parroquiadomicilio_id_base <> par_parroquiadomicilio_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'parroquiadomicilio_id', par_persona_id, var_parroquiadomicilio_id_base, par_parroquiadomicilio_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_barrio_base <> par_barrio then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'barrio', par_persona_id, var_barrio_base, par_barrio, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_referenciadireccion_base <> par_referenciadireccion then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'referenciadireccion', par_persona_id, var_referenciadireccion_base, par_referenciadireccion, par_usuario_id, var_fechaevento, par_ip);
            end if;
            if var_estado_id_base <> par_estado_id then
                insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
                            values ('U', var_tabla, 'estado_id', par_persona_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
            end if;
        elsif par_accion = 'D' then
            update academico.persona set activo = 'N' where persona_id = par_persona_id;
            insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
                        values ('D', var_tabla, par_persona_id, par_usuario_id, var_fechaevento, par_ip);
        end if;

        reg_mensaje.error := 0;
        reg_mensaje.mensaje := 'Operación realizada con éxito';
        reg_mensaje.id:=par_persona_id;
    EXCEPTION WHEN OTHERS THEN
    reg_mensaje.error := 1;
    reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
    reg_mensaje.id:=par_persona_id;
    END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_personalc(par_persona_id integer, par_tipopersona character, par_documentoidentificacion character varying, par_nombre1 character varying, par_nombre2 character varying, par_apellido1 character varying, par_apellido2 character varying, par_fechanacimiento date, par_direccion character varying, par_telefonoconvencional character varying, par_telefonocelular character varying, par_emailpersonal character varying, par_emailinstitucional character varying, par_nacionalidad_id integer, par_fechaingreso date, par_tipodocumento_id integer, par_sexo_id integer, par_identidadgenero_id integer, par_estadocivil_id integer, par_tiposangre character varying, par_tipodiscapacidad_id integer, par_porcentajediscapacidad smallint, par_descripciondiscapacidad text, par_idioma_id integer, par_etnia_id integer, par_paisnacimiento_id integer, par_provincianacimiento_id integer, par_ciudadnacimiento_id integer, par_parroquianacimiento_id integer, par_personacontacto character varying, par_telefonoconctacto character varying, par_paisdomicilio_id integer, par_provinciadomicilio_id integer, par_ciudaddomicilio_id integer, par_parroquiadomicilio_id integer, par_barrio character varying, par_referenciadireccion text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_personalc(par_persona_id integer, par_tipopersona character, par_documentoidentificacion character varying, par_nombre1 character varying, par_nombre2 character varying, par_apellido1 character varying, par_apellido2 character varying, par_fechanacimiento date, par_direccion character varying, par_telefonoconvencional character varying, par_telefonocelular character varying, par_emailpersonal character varying, par_emailinstitucional character varying, par_nacionalidad_id integer, par_fechaingreso date, par_tipodocumento_id integer, par_sexo_id integer, par_identidadgenero_id integer, par_estadocivil_id integer, par_tiposangre character varying, par_tipodiscapacidad_id integer, par_porcentajediscapacidad smallint, par_descripciondiscapacidad text, par_idioma_id integer, par_etnia_id integer, par_paisnacimiento_id integer, par_provincianacimiento_id integer, par_ciudadnacimiento_id integer, par_parroquianacimiento_id integer, par_personacontacto character varying, par_telefonoconctacto character varying, par_paisdomicilio_id integer, par_provinciadomicilio_id integer, par_ciudaddomicilio_id integer, par_parroquiadomicilio_id integer, par_barrio character varying, par_referenciadireccion text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_personalc(par_persona_id integer, par_tipopersona character, par_documentoidentificacion character varying, par_nombre1 character varying, par_nombre2 character varying, par_apellido1 character varying, par_apellido2 character varying, par_fechanacimiento date, par_direccion character varying, par_telefonoconvencional character varying, par_telefonocelular character varying, par_emailpersonal character varying, par_emailinstitucional character varying, par_nacionalidad_id integer, par_fechaingreso date, par_tipodocumento_id integer, par_sexo_id integer, par_identidadgenero_id integer, par_estadocivil_id integer, par_tiposangre character varying, par_tipodiscapacidad_id integer, par_porcentajediscapacidad smallint, par_descripciondiscapacidad text, par_idioma_id integer, par_etnia_id integer, par_paisnacimiento_id integer, par_provincianacimiento_id integer, par_ciudadnacimiento_id integer, par_parroquianacimiento_id integer, par_personacontacto character varying, par_telefonoconctacto character varying, par_paisdomicilio_id integer, par_provinciadomicilio_id integer, par_ciudaddomicilio_id integer, par_parroquiadomicilio_id integer, par_barrio character varying, par_referenciadireccion text, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla Persona';


--
-- Name: mant_planificacioncarrera(integer, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_planificacioncarrera(par_planificacioncarrera_id integer, par_planificacionregistro_id integer, par_carrera_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;	
	
	var_planificacioncarrera_base academico.planificacioncarrera%ROWTYPE;
	
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.planificacioncarrera IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'planificacioncarrera';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.planificacioncarrera (planificacionregistro_id, carrera_id, creadopor, creado) 
									values (par_planificacionregistro_id, par_carrera_id, par_usuario_id, var_fechaevento)
					returning planificacioncarrera_id into par_planificacioncarrera_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'planificacionregistro_id', par_planificacioncarrera_id, par_planificacionregistro_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'carrera_id', par_planificacioncarrera_id, par_carrera_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select * into var_planificacioncarrera_base from academico.planificacioncarrera where planificacioncarrera_id = par_planificacioncarrera_id;
			update academico.planificacioncarrera set planificacionregistro_id = par_planificacioncarrera_id, carrera_id = par_carrera_id, 
														actualizadopor = par_usuario_id, actualizado = var_fechaevento 
								where planificacioncarrera_id = par_planificacioncarrera_id;
			if var_planificacioncarrera_base.planificacionregistro_id <> par_planificacionregistro_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'planificacionregistro_id', par_planificacioncarrera_id, var_planificacioncarrera_base.planificacionregistro_id, par_planificacionregistro_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacioncarrera_base.carrera_id <> par_carrera_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'carrera_id', par_planificacioncarrera_id, var_planificacioncarrera_base.carrera_id, par_carrera_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.planificacioncarrera set activo = 'N' where planificacioncarrera_id = par_planificacioncarrera_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_planificacioncarrera_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_planificacioncarrera_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id := par_planificacioncarrera_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_planificacioncarrera(par_planificacioncarrera_id integer, par_planificacionregistro_id integer, par_carrera_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_planificacioncarrera(par_planificacioncarrera_id integer, par_planificacionregistro_id integer, par_carrera_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_planificacioncarrera(par_planificacioncarrera_id integer, par_planificacionregistro_id integer, par_carrera_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla planificacioncarrera';


--
-- Name: mant_planificacioncarreracurso(integer, integer, character, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_planificacioncarreracurso(par_planificacioncarreracurso_id integer, par_planificacionregistro_id integer, par_tipocarreracurso character, par_carrera_id integer, par_elementoeducativo_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;	
	
	var_planificacioncarreracurso_base academico.planificacioncarreracurso%ROWTYPE;
	
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.planificacioncarreracurso IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'planificacioncarreracurso';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.planificacioncarreracurso (planificacionregistro_id, tipocarreracurso, carrera_id, elementoeducativo_id, creadopor, creado) 
									values (par_planificacionregistro_id, par_tipocarreracurso, par_carrera_id, par_elementoeducativo_id, par_usuario_id, var_fechaevento)
					returning planificacioncarreracurso_id into par_planificacioncarreracurso_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'planificacionregistro_id', par_planificacioncarreracurso_id, par_planificacionregistro_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'tipocarreracurso', par_planificacioncarreracurso_id, par_tipocarreracurso, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'carrera_id', par_planificacioncarreracurso_id, par_carrera_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'elementoeducativo_id', par_planificacioncarreracurso_id, par_elementoeducativo_id, par_usuario_id, var_fechaevento, par_ip);			
		elsif par_accion = 'U' then
			select * into var_planificacioncarreracurso_base from academico.planificacioncarreracurso where planificacioncarreracurso_id = par_planificacioncarreracurso_id;
			update academico.planificacioncarreracurso set planificacionregistro_id = par_planificacioncarreracurso_id, tipocarreracurso = par_tipocarreracurso, carrera_id = par_carrera_id, elementoeducativo_id = par_elementoeducativo_id,
														actualizadopor = par_usuario_id, actualizado = var_fechaevento 
								where planificacioncarreracurso_id = par_planificacioncarreracurso_id;
			if var_planificacioncarreracurso_base.planificacionregistro_id <> par_planificacionregistro_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'planificacionregistro_id', par_planificacioncarreracurso_id, var_planificacioncarreracurso_base.planificacionregistro_id, par_planificacionregistro_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacioncarreracurso_base.tipocarreracurso <> par_tipocarreracurso then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'tipocarreracurso', par_planificacioncarreracurso_id, var_planificacioncarreracurso_base.tipocarreracurso, par_tipocarreracurso, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacioncarreracurso_base.carrera_id <> par_carrera_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'carrera_id', par_planificacioncarreracurso_id, var_planificacioncarreracurso_base.carrera_id, par_carrera_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacioncarreracurso_base.elementoeducativo_id <> par_elementoeducativo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'elementoeducativo_id', par_planificacioncarreracurso_id, var_planificacioncarreracurso_base.elementoeducativo_id, par_elementoeducativo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.planificacioncarreracurso set activo = 'N' where planificacioncarreracurso_id = par_planificacioncarreracurso_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_planificacioncarreracurso_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_planificacioncarreracurso_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id := par_planificacioncarreracurso_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_planificacioncarreracurso(par_planificacioncarreracurso_id integer, par_planificacionregistro_id integer, par_tipocarreracurso character, par_carrera_id integer, par_elementoeducativo_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_planificacioncarreracurso(par_planificacioncarreracurso_id integer, par_planificacionregistro_id integer, par_tipocarreracurso character, par_carrera_id integer, par_elementoeducativo_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_planificacioncarreracurso(par_planificacioncarreracurso_id integer, par_planificacionregistro_id integer, par_tipocarreracurso character, par_carrera_id integer, par_elementoeducativo_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla planificacioncarreracurso';


--
-- Name: mant_planificacionregistro(integer, character, text, integer, integer, boolean, date, date, date, date, date, boolean, integer, date, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_planificacionregistro(par_planificacionregistro_id integer, par_ambito character, par_descripcion text, par_aniolectivo_id integer, par_periodo_id integer, par_tienecursonivelacion boolean, par_fechainicio_inscripcion date, par_fechafin_inscripcion date, par_fechainicio_curso date, par_fechafin_curso date, par_fechamaximopago date, par_tienedescuento boolean, par_porcentajedescuento integer, par_fechapagodescuento date, par_entidadeducativa_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;	
	
	var_planificacionregistro_base academico.planificacionregistro%ROWTYPE;

	
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.planificacionregistro IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'planificacionregistro';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.planificacionregistro (ambito, descripcion, aniolectivo_id, periodo_id, tienecursonivelacion, fechainicio_inscripcion, fechafin_inscripcion, fechainicio_curso, fechafin_curso, fechamaximopago, tienedescuento, porcentajedescuento, fechapagodescuento, entidadeducativa_id, estado_id, creadopor, creado) 
									values (par_ambito, par_descripcion, par_aniolectivo_id, par_periodo_id, par_tienecursonivelacion, par_fechainicio_inscripcion, par_fechafin_inscripcion, par_fechainicio_curso, par_fechafin_curso, par_fechamaximopago, par_tienedescuento, par_porcentajedescuento, par_fechapagodescuento, par_entidadeducativa_id, par_estado_id, par_usuario_id, var_fechaevento)
					returning planificacionregistro_id into par_planificacionregistro_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'ambito', par_planificacionregistro_id, par_ambito, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_planificacionregistro_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'aniolectivo_id', par_planificacionregistro_id, par_aniolectivo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'periodo_id', par_planificacionregistro_id, par_periodo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'tienecursonivelacion', par_planificacionregistro_id, par_tienecursonivelacion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechainicio_inscripcion', par_planificacionregistro_id, par_fechainicio_inscripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechafin_inscripcion', par_planificacionregistro_id, par_fechafin_inscripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechainicio_curso', par_planificacionregistro_id, par_fechainicio_curso, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechafin_curso', par_planificacionregistro_id, par_fechafin_curso, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechamaximopago', par_planificacionregistro_id, par_fechamaximopago, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'tienedescuento', par_planificacionregistro_id, par_tienedescuento, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'porcentajedescuento', par_planificacionregistro_id, par_porcentajedescuento, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechapagodescuento', par_planificacionregistro_id, par_fechapagodescuento, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'entidadeducativa_id', par_planificacionregistro_id, par_entidadeducativa_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_planificacionregistro_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select * into var_planificacionregistro_base from academico.planificacionregistro where planificacionregistro_id = par_planificacionregistro_id;
			update academico.planificacionregistro set ambito = par_ambito, descripcion = par_descripcion, aniolectivo_id = par_aniolectivo_id, periodo_id = par_periodo_id,
								tienecursonivelacion = par_tienecursonivelacion, fechainicio_inscripcion = par_fechainicio_inscripcion, fechafin_inscripcion = par_fechafin_inscripcion,
								fechainicio_curso = par_fechainicio_curso, fechafin_curso = par_fechafin_curso, fechamaximopago = par_fechamaximopago, tienedescuento = par_tienedescuento,
								porcentajedescuento = par_porcentajedescuento, fechapagodescuento = par_fechapagodescuento, entidadeducativa_id = par_entidadeducativa_id, estado_id = par_estado_id, 
								actualizadopor = par_usuario_id, actualizado = var_fechaevento 
								where planificacionregistro_id = par_planificacionregistro_id;
			if var_planificacionregistro_base.ambito <> par_ambito then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'ambito', par_planificacionregistro_id, var_planificacionregistro_base.ambito, par_ambito, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionregistro_base.descripcion <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_planificacionregistro_id, var_planificacionregistro_base.descripcion, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionregistro_base.aniolectivo_id <> par_aniolectivo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'aniolectivo_id', par_planificacionregistro_id, var_planificacionregistro_base.aniolectivo_id, par_aniolectivo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionregistro_base.periodo_id <> par_periodo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'periodo_id', par_planificacionregistro_id, var_planificacionregistro_base.periodo_id, par_periodo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionregistro_base.tienecursonivelacion <> par_tienecursonivelacion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'tienecursonivelacion_id', par_planificacionregistro_id, var_planificacionregistro_base.tienecursonivelacion, par_tienecursonivelacion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionregistro_base.fechainicio_inscripcion <> par_fechainicio_inscripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechainicio_inscripcion', par_planificacionregistro_id, var_planificacionregistro_base.fechainicio_inscripcion, par_fechainicio_inscripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionregistro_base.fechafin_inscripcion <> par_fechafin_inscripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechafin_inscripcion', par_planificacionregistro_id, var_planificacionregistro_base.fechafin_inscripcion, par_fechafin_inscripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionregistro_base.fechainicio_curso <> par_fechainicio_curso then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechainicio_curso', par_planificacionregistro_id, var_planificacionregistro_base.fechainicio_curso, par_fechainicio_curso, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionregistro_base.fechafin_curso <> par_fechafin_curso then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechafin_curso', par_planificacionregistro_id, var_planificacionregistro_base.fechafin_curso, par_fechafin_curso, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionregistro_base.fechamaximopago <> par_fechamaximopago then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechamaximopago', par_planificacionregistro_id, var_planificacionregistro_base.fechamaximopago, par_fechamaximopago, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionregistro_base.tienedescuento <> par_tienedescuento then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'tienedescuento', par_planificacionregistro_id, var_planificacionregistro_base.tienedescuento, par_tienedescuento, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionregistro_base.porcentajedescuento <> par_porcentajedescuento then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'porcentajedescuento', par_planificacionregistro_id, var_planificacionregistro_base.porcentajedescuento, par_porcentajedescuento, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionregistro_base.fechapagodescuento <> par_fechapagodescuento then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechapagodescuento', par_planificacionregistro_id, var_planificacionregistro_base.fechapagodescuento, par_fechapagodescuento, par_usuario_id, var_fechaevento, par_ip);
			end if;			
			if var_planificacionregistro_base.entidadeducativa_id <> par_entidadeducativa_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'entidadeducativa_id', par_planificacionregistro_id, var_planificacionregistro_base.entidadeducativa_id, par_entidadeducativa_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionregistro_base.estado_id <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_planificacionregistro_id, var_planificacionregistro_base.estado_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.planificacionregistro set activo = 'N' where planificacionregistro_id = par_planificacionregistro_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_planificacionregistro_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_planificacionregistro_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id := par_planificacionregistro_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_planificacionregistro(par_planificacionregistro_id integer, par_ambito character, par_descripcion text, par_aniolectivo_id integer, par_periodo_id integer, par_tienecursonivelacion boolean, par_fechainicio_inscripcion date, par_fechafin_inscripcion date, par_fechainicio_curso date, par_fechafin_curso date, par_fechamaximopago date, par_tienedescuento boolean, par_porcentajedescuento integer, par_fechapagodescuento date, par_entidadeducativa_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_planificacionregistro(par_planificacionregistro_id integer, par_ambito character, par_descripcion text, par_aniolectivo_id integer, par_periodo_id integer, par_tienecursonivelacion boolean, par_fechainicio_inscripcion date, par_fechafin_inscripcion date, par_fechainicio_curso date, par_fechafin_curso date, par_fechamaximopago date, par_tienedescuento boolean, par_porcentajedescuento integer, par_fechapagodescuento date, par_entidadeducativa_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_planificacionregistro(par_planificacionregistro_id integer, par_ambito character, par_descripcion text, par_aniolectivo_id integer, par_periodo_id integer, par_tienecursonivelacion boolean, par_fechainicio_inscripcion date, par_fechafin_inscripcion date, par_fechainicio_curso date, par_fechafin_curso date, par_fechamaximopago date, par_tienedescuento boolean, par_porcentajedescuento integer, par_fechapagodescuento date, par_entidadeducativa_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla planificacionregistro';


--
-- Name: mant_planificacionrequisito(integer, integer, character, integer, integer, boolean, numeric, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_planificacionrequisito(par_planificacionrequisito_id integer, par_planificacionregistro_id integer, par_tiporequisito character, par_requisito_id integer, par_rubro_id integer, par_aplicadescuento boolean, par_valor numeric, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;	
	
	var_planificacionrequisito_base academico.planificacionrequisito%ROWTYPE;
	
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.planificacionrequisito IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'planificacionrequisito';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.planificacionrequisito (planificacionregistro_id, tiporequisito, requisito_id, rubro_id, aplicadescuento, valor, creadopor, creado) 
									values (par_planificacionregistro_id, par_tiporequisito, par_requisito_id, par_rubro_id, par_aplicadescuento, par_valor, par_usuario_id, var_fechaevento)
					returning planificacionrequisito_id into par_planificacionrequisito_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'planificacionregistro_id', par_planificacionrequisito_id, par_planificacionregistro_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'tiporequisito', par_planificacionrequisito_id, par_tiporequisito, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'requisito_id', par_planificacionrequisito_id, par_requisito_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'rubro_id', par_planificacionrequisito_id, par_rubro_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'aplicadescuento', par_planificacionrequisito_id, par_aplicadescuento, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'valor', par_planificacionrequisito_id, par_valor, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select * into var_planificacionrequisito_base from academico.planificacionrequisito where planificacionrequisito_id = par_planificacionrequisito_id;
			update academico.planificacionrequisito set planificacionregistro_id = par_planificacionregistro_id, tiporequisito = par_tiporequisito, requisito_id = par_requisito_id, rubro_id = par_rubro_id, aplicadescuento = par_aplicadescuento, 
														valor = par_valor, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
								where planificacionrequisito_id = par_planificacionrequisito_id;
			if var_planificacionrequisito_base.planificacionregistro_id <> par_planificacionregistro_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'planificacionregistro_id', par_planificacionrequisito_id, var_planificacionrequisito_base.planificacionregistro_id, par_planificacionregistro_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionrequisito_base.tiporequisito <> par_tiporequisito then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'tiporequisito', par_planificacionrequisito_id, var_planificacionrequisito_base.tiporequisito, par_tiporequisito, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionrequisito_base.requisito_id <> par_requisito_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'requisito_id', par_planificacionrequisito_id, var_planificacionrequisito_base.requisito_id, par_requisito_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionrequisito_base.rubro_id <> par_rubro_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'rubro_id', par_planificacionrequisito_id, var_planificacionrequisito_base.rubro_id, par_rubro_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionrequisito_base.aplicadescuento <> par_aplicadescuento then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'aplicadescuento', par_planificacionrequisito_id, var_planificacionrequisito_base.aplicadescuento, par_aplicadescuento, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_planificacionrequisito_base.valor <> par_valor then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'valor', par_planificacionrequisito_id, var_planificacionrequisito_base.valor, par_valor, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.planificacionrequisito set activo = 'N' where planificacionrequisito_id = par_planificacionrequisito_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_planificacionrequisito_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_planificacionrequisito_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id := par_planificacionrequisito_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_planificacionrequisito(par_planificacionrequisito_id integer, par_planificacionregistro_id integer, par_tiporequisito character, par_requisito_id integer, par_rubro_id integer, par_aplicadescuento boolean, par_valor numeric, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_planificacionrequisito(par_planificacionrequisito_id integer, par_planificacionregistro_id integer, par_tiporequisito character, par_requisito_id integer, par_rubro_id integer, par_aplicadescuento boolean, par_valor numeric, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_planificacionrequisito(par_planificacionrequisito_id integer, par_planificacionregistro_id integer, par_tiporequisito character, par_requisito_id integer, par_rubro_id integer, par_aplicadescuento boolean, par_valor numeric, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla planificacionrequisito';


--
-- Name: mant_prerequisitoelemento(integer, integer, integer, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_prerequisitoelemento(par_prerequiisitoelemento_id integer, par_mallaelemento_id integer, par_mallaelementopre_id integer, par_elementoeducativo_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_mallaelemento_id_base integer;
	var_mallaelementopre_id_base integer;
	var_elementoeducativo_id_base integer;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.prerequisitoelemento IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'prerequisitoelemento';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.prerequisitoelemento (mallaelemento_id, mallaelementopre_id, elementoeducativo_id, estado_id, creadopor, creado) 
					values (par_mallaelemento_id, par_mallaelementopre_id, par_elementoeducativo_id, par_estado_id, par_usuario_id, var_fechaevento)
					returning prerequisitoelemento_id into par_prerequiisitoelemento_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'mallaelemento_id', par_prerequiisitoelemento_id, par_mallaelemento_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'mallaelementopre_id', par_prerequiisitoelemento_id, par_mallaelementopre_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'elementoeducativo', par_prerequiisitoelemento_id, par_elementoeducativo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_prerequiisitoelemento_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then		
			select mallaelemento_id, mallaelementopre_id, elementoeducativo_id, estado_id into var_mallaelemento_id_base, var_mallaelementopre_id_base, var_elementoeducativo_id_base, var_estado_id_base 
						from academico.prerequisitoelemento where prerequisitoelemento_id = par_prerequisitoelemento_id;
			update academico.prerequisitoelemento set mallaelemento_id = par_mallaelemento_id, mallaelementopre_id = par_mallaelementopre_id, elementoeducativo_id = par_elemenetoeducativo_id, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where prerequisitoelemento_id = par_prerequisitoelemento_id;
			if var_mallaelemento_id_base <> par_mallaelemento_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'mallaelemento_id', par_prerequisitoelemento_id, var_mallaelelemento_id_base, par_mallaelemento_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_mallaelementopre_id_base <> par_mallaelementopre_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'mallaelementopre_id', par_prerequisitoelemento_id, var_mallaelementopre_id_base, par_mallaelementopre_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_elementoeducativo_id_base <> par_elementoeducativo_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'elementoeducativo_id', par_prerequisitoelemento_id, var_elementoeducativo_id_base, par_elementoeducativo_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_prerequisitoelemento_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;			
		elsif par_accion = 'D' then
			update academico.prerequisitoelemento set activo = 'N' where prerequisitoelemento_id = par_prerequiisitoelemento_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_prerequiisitoelemento_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_prerequiisitoelemento_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_prerequiisitoelemento_id;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_prerequisitoelemento(par_prerequiisitoelemento_id integer, par_mallaelemento_id integer, par_mallaelementopre_id integer, par_elementoeducativo_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_prerequisitoelemento(par_prerequiisitoelemento_id integer, par_mallaelemento_id integer, par_mallaelementopre_id integer, par_elementoeducativo_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_prerequisitoelemento(par_prerequiisitoelemento_id integer, par_mallaelemento_id integer, par_mallaelementopre_id integer, par_elementoeducativo_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla prerequisitoelemento';


--
-- Name: mant_provincia(integer, integer, character varying, boolean, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_provincia(par_provincia_id integer, par_pais_id integer, par_nombre character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_pais_id_base integer;
	var_nombre_base character varying;
	var_eslocal_base boolean;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.provincia IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'provincia';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.provincia (pais_id, nombre, eslocal, estado_id, creadopor, creado) values (par_pais_id, par_nombre, par_eslocal, par_estado_id, par_usuario_id, var_fechaevento)
					returning provincia_id into par_provincia_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'pais_id', par_provincia_id, par_pais_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nombre', par_provincia_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'eslocal', par_provincia_id, par_eslocal, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_provincia_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select pais_id, nombre, eslocal, estado_id into var_pais_id_base, var_nombre_base, var_eslocal_base, var_estado_id_base from academico.provincia where provincia_id = par_provincia_id;
			update academico.provincia set pais_id = par_pais_id, nombre = par_nombre, eslocal = par_eslocal, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento
							where provincia_id = par_provincia_id;
			if var_pais_id_base <> par_pais_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'pais_id', par_provincia_id, var_pais_id_base, par_pais_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nombre_base <> par_nombre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre', par_provincia_id, var_nombre_base, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_eslocal_base <> par_eslocal then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'eslocal', par_provincia_id, var_eslocal_base, par_eslocal, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_provincia_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.provincia set activo = 'N' where provincia_id = par_provincia_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_provincia_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_provincia_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_provincia_id;
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_provincia(par_provincia_id integer, par_pais_id integer, par_nombre character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_provincia(par_provincia_id integer, par_pais_id integer, par_nombre character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_provincia(par_provincia_id integer, par_pais_id integer, par_nombre character varying, par_eslocal boolean, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla pais';


--
-- Name: mant_sexo(integer, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_sexo(par_sexo_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.sexo IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'sexo';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.sexo (descripcion, estado_id, creadopor, creado) values (par_descripcion, par_estado_id, par_usuario_id, var_fechaevento)
					returning sexo_id into par_sexo_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_sexo_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_sexo_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, estado_id into var_descripcion_base, var_estado_id_base from academico.sexo where sexo_id = par_sexo_id;
			update academico.sexo set descripcion = par_descripcion, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where sexo_id = par_sexo_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_sexo_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_sexo_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.sexo set activo = 'N' where sexo_id = par_sexo_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_sexo_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_sexo_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 	
	reg_mensaje.id := par_sexo_id;	
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_sexo(par_sexo_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_sexo(par_sexo_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_sexo(par_sexo_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla sexo';


--
-- Name: mant_tipodiscapacidad(integer, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_tipodiscapacidad(par_tipodiscapacidad_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.tipodiscapacidad IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'tipodiscapacidad';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.tipodiscapacidad (descripcion, estado_id, creadopor, creado) values (par_descripcion, par_estado_id, par_usuario_id, var_fechaevento)
					returning tipodiscapacidad_id into par_tipodiscapacidad_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_tipodiscapacidad_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_tipodiscapacidad_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, estado_id into var_descripcion_base, var_estado_id_base from academico.tipodiscapacidad where tipodiscapacidad_id = par_tipodiscapacidad_id;
			update academico.tipodiscapacidad set descripcion = par_descripcion, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where tipodiscapacidad_id = par_tipodiscapacidad_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_tipodiscapacidad_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_tipodiscapacidad_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.tipodiscapacidad set activo = 'N' where tipodiscapacidad_id = par_tipodiscapacidad_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_tipodiscapacidad_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_tipodiscapacidad_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 	
	reg_mensaje.id := par_tipodiscapacidad_id;	
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION academico.mant_tipodiscapacidad(par_tipodiscapacidad_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_tipodiscapacidad(par_tipodiscapacidad_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_tipodiscapacidad(par_tipodiscapacidad_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla tipodiscapacidad';


--
-- Name: mant_tipodocumento(integer, character varying, boolean, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_tipodocumento(par_tipodocumento_id integer, par_descripcion character varying, par_es_identificacion boolean, par_entidad_educativa integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_es_identificacion_base boolean;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.tipodocumento IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'tipodocumento';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			
            insert into academico.tipodocumento (descripcion,entidad_educativa, estado_id, creadopor, creado) values (par_descripcion,par_entidad_educativa, par_estado_id, par_usuario_id, var_fechaevento)
					returning tipodocumento_id into par_tipodocumento_id;
			

			perform seguridad.func_guardar_log(par_accion,var_tabla,'de_identificacion'::varchar,par_tipodocumento_id,null::text,par_es_identificacion::text,par_usuario_id,var_fechaevento,par_ip);

			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_tipodocumento_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'entidad_educativa', par_tipodocumento_id, par_entidad_educativa, par_usuario_id, var_fechaevento, par_ip);
            
            insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_tipodocumento_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			
            select descripcion, estado_id,de_identificacion into var_descripcion_base, var_estado_id_base,var_es_identificacion_base from academico.tipodocumento where tipodocumento_id = par_tipodocumento_id AND entidad_educativa=par_entidad_educativa;
			
            update academico.tipodocumento set descripcion = par_descripcion,de_identificacion=par_es_identificacion, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where tipodocumento_id = par_tipodocumento_id AND entidad_educativa=par_entidad_educativa;

			if var_es_identificacion_base <> par_es_identificacion THEN

				perform	seguridad.func_guardar_log(par_accion,var_tabla,'de_identificacion'::varchar,par_tipodocumento_id,var_es_identificacion_base::text,par_es_identificacion::text,par_usuario_id,var_fechaevento,par_ip);				

			end if; 

			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_tipodocumento_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_tipodocumento_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			
            update academico.tipodocumento set activo = 'N' where tipodocumento_id = par_tipodocumento_id AND entidad_educativa=par_entidad_educativa;
			
            insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_tipodocumento_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_tipodocumento_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 	
	reg_mensaje.id := par_tipodocumento_id;	
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_tipodocumento(par_tipodocumento_id integer, par_descripcion character varying, par_es_identificacion boolean, par_entidad_educativa integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: mant_tipounidadeducativa(integer, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_tipounidadeducativa(par_tipounidadeducativa_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.tipounidadeducativa IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'tipounidadeducativa';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.tipounidadeducativa (descripcion, estado_id, creadopor, creado) values (par_descripcion, par_estado_id, par_usuario_id, var_fechaevento)
					returning tipounidadeducativa_id into par_tipounidadeducativa_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_tipounidadeducativa_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_tipounidadeducativa_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, estado_id into var_descripcion_base, var_estado_id_base from academico.tipounidadeducativa where tipounidadeducativa_id = par_tipounidadeducativa_id;
			update academico.tipounidadeducativa set descripcion = par_descripcion, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where tipounidadeducativa_id = par_tipounidadeducativa_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_tipounidadeducativa_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_tipounidadeducativa_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.tipounidadeducativa set activo = 'N' where tipounidadeducativa_id = par_tipounidadeducativa_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_tipounidadeducativa_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_tipounidadeducativa_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 	
	reg_mensaje.id := par_tipounidadeducativa_id;	
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_tipounidadeducativa(par_tipounidadeducativa_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_tipounidadeducativa(par_tipounidadeducativa_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_tipounidadeducativa(par_tipounidadeducativa_id integer, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla tipounidadeducativa';


--
-- Name: mant_unidadeducativa(integer, integer, character varying, integer, integer, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_unidadeducativa(par_unidadeducativa_id integer, par_tipounidadeducativa_id integer, par_nombre character varying, par_pais_id integer, par_provincia_id integer, par_ciudad_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_tipounidadeducativa_id_base integer;
	var_nombre_base character varying;	
	var_pais_id_base integer;
	var_provincia_id_base integer;
	var_ciudad_id_base integer;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.unidadeducativa IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'unidadeducativa';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.unidadeducativa (tipounidadeducativa_id, nombre, pais_id, provincia_id, ciudad_id, estado_id, creadopor, creado) 
									values (par_tipounidadeducativa_id, par_nombre, par_pais_id, par_provincia_id, par_ciudad_id, par_estado_id, par_usuario_id, var_fechaevento)
									returning unidadeducativa_id into par_unidadeducativa_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'tipounidadeducativa_id', par_unidadeducativa_id, par_tipounidadeducativa_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nombre', par_unidadeducativa_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'pais_id', par_unidadeducativa_id, par_pais_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'provincia_id', par_unidadeducativa_id, par_provincia_id, par_usuario_id, var_fechaevento, par_ip);						
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'ciudad_id', par_unidadeducativa_id, par_ciudad_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_unidadeducativa_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select tipounidadeducativa_id, nombre, pais_id, provincia_id, ciudad_id, estado_id into var_tipounidadeducativa_id_base, var_nombre_base, var_pais_id_base, var_provincia_id_base, var_ciudad_id_base, var_estado_id_base 
					from academico.unidadeducativa where unidadeducativa_id = par_unidadeducativa_id;
			update academico.unidadeducativa set tipounidadeducativa_id = par_tipounidadeducativa_id, nombre = par_nombre, pais_id = par_pais_id, provincia_id = par_provincia_id, ciudad_id = par_ciudad_id, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where unidadeducativa_id = par_unidadeducativa_id;
			if var_tipounidadeducativa_id_base <> par_tipounidadeducativa_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'tipounidadeducativa_id', par_unidadeducativa_id, var_tipounidadeducativa_id_base, par_tipounidadeducativa_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nombre_base <> par_nombre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre', par_unidadeducativa_id, var_nombre_base, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_pais_id_base <> par_pais_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'pais_id', par_unidadeducativa_id, var_pais_id_base, par_pais_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_provincia_id_base <> par_provincia_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'provincia_id', par_unidadeducativa_id, var_provincia_id_base, par_provincia_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_ciudad_id_base <> par_ciudad_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'ciudad_id', par_unidadeducativa_id, var_ciudad_id_base, par_ciudad_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_unidadeducativa_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.unidadeducativa set activo = 'N' where unidadeducativa_id = par_unidadeducativa_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_unidadeducativa_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_unidadeducativa_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_unidadeducativa_id;		
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_unidadeducativa(par_unidadeducativa_id integer, par_tipounidadeducativa_id integer, par_nombre character varying, par_pais_id integer, par_provincia_id integer, par_ciudad_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_unidadeducativa(par_unidadeducativa_id integer, par_tipounidadeducativa_id integer, par_nombre character varying, par_pais_id integer, par_provincia_id integer, par_ciudad_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_unidadeducativa(par_unidadeducativa_id integer, par_tipounidadeducativa_id integer, par_nombre character varying, par_pais_id integer, par_provincia_id integer, par_ciudad_id integer, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla unidadeducativa';


--
-- Name: mant_unidadformacion(integer, character varying, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.mant_unidadformacion(par_unidadformacion_id integer, par_descripcion character varying, par_color character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_color_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.unidadformacion IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'unidadformacion';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.unidadformacion (descripcion, color, estado_id, creadopor, creado) 
									values (par_descripcion, par_color, par_estado_id, par_usuario_id, var_fechaevento)
									returning unidadformacion_id into par_unidadformacion_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_unidadformacion_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'color', par_unidadformacion_id, par_color, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_unidadformacion_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select descripcion, color, estado_id into var_descripcion_base, var_color_base, var_estado_id_base 
					from academico.unidadformacion where unidadformacion_id = par_unidadformacion_id;
			update academico.unidadformacion set descripcion = par_descripcion, color = par_color, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where unidadformacion_id = par_unidadformacion_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_unidadformacion_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_color_base <> par_color then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'color', par_unidadformacion_id, var_color_base, par_color, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_unidadformacion_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.unidadformacion set activo = 'N' where unidadformacion_id = par_unidadformacion_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_unidadformacion_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_unidadformacion_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	reg_mensaje.id := par_unidadformacion_id;		
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.mant_unidadformacion(par_unidadformacion_id integer, par_descripcion character varying, par_color character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_unidadformacion(par_unidadformacion_id integer, par_descripcion character varying, par_color character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.mant_unidadformacion(par_unidadformacion_id integer, par_descripcion character varying, par_color character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla unidadformacion';


--
-- Name: migra_ciudad(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.migra_ciudad() RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	cur_tabla refcursor;
	rec_registro record;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.provincia IN EXCLUSIVE MODE;
	BEGIN
	open cur_tabla for select distinct lo.localidnom, apr.provincia_id
				from localidades lo
				inner join provincia pr on pr.provincod = lo.provincod
				inner join academico.provincia apr on pr.provinnom = apr.nombre;
	loop
		fetch cur_tabla into rec_registro;
		exit when not found;
		insert into academico.ciudad (provincia_id, nombre, estado_id, creadopor, creado) values (rec_registro.provincia_id, rec_registro.localidnom, 1, 1, (select current_timestamp));
	end loop;
	close cur_tabla;
	reg_mensaje.error := 0;
	reg_mensaje.mensaje := 'Operación realizada con éxito'; 
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.migra_ciudad() OWNER TO attinae_user;

--
-- Name: migra_docente(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.migra_docente() RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
declare
	cur_persona refcursor;
	rec_persona record;	
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.pais IN EXCLUSIVE MODE;
	BEGIN
		open cur_persona for select * from academico.persona where tipopersona = 'D' and persona_id > 13;
		loop
			fetch cur_persona into rec_persona;
			exit when not found;
			insert into academico.docente (persona_id, estado_id, creadopor, creado, activo) 
								values (rec_persona.persona_id, rec_persona.estado_id, rec_persona.creadopor, rec_persona.creado, rec_persona.activo);

		end loop;
		close cur_persona;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		EXCEPTION WHEN OTHERS THEN
		reg_mensaje.error := 1;
		reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	END;
	RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.migra_docente() OWNER TO attinae_user;

--
-- Name: migra_estudiante(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.migra_estudiante() RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
declare
	cur_persona refcursor;
	rec_persona record;	
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.persona IN EXCLUSIVE MODE;
	BEGIN
		open cur_persona for select * from academico.persona where tipopersona = 'E' and persona_id > 19;
		loop
			fetch cur_persona into rec_persona;
			exit when not found;
			insert into academico.estudiante (persona_id, estado_id, creadopor, creado, activo) 
								values (rec_persona.persona_id, rec_persona.estado_id, rec_persona.creadopor, rec_persona.creado, rec_persona.activo);

		end loop;
		close cur_persona;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		EXCEPTION WHEN OTHERS THEN
		reg_mensaje.error := 1;
		reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	END;
	RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.migra_estudiante() OWNER TO attinae_user;

--
-- Name: migra_pais(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.migra_pais() RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	cur_tabla refcursor;
	rec_registro record;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.pais IN EXCLUSIVE MODE;
	BEGIN
	open cur_tabla for select paisnom from paises;
	loop
		fetch cur_tabla into rec_registro;
		exit when not found;
		insert into academico.pais (nombre, estado_id, creadopor, creado) values (rec_registro.paisnom, 1, 1, (select current_timestamp));
	end loop;
	close cur_tabla;
	reg_mensaje.error := 0;
	reg_mensaje.mensaje := 'Operación realizada con éxito'; 
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.migra_pais() OWNER TO attinae_user;

--
-- Name: migra_provincia(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.migra_provincia() RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	cur_tabla refcursor;
	rec_registro record;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.provincia IN EXCLUSIVE MODE;
	BEGIN
	open cur_tabla for select pr.provinnom, apa.pais_id, apa.eslocal
				from provincia pr
				inner join paises as pa on  pa.paiscod = pr.paiscod
				inner join academico.pais apa on pa.paisnom = apa.nombre;
	loop
		fetch cur_tabla into rec_registro;
		exit when not found;
		insert into academico.provincia (pais_id, nombre, estado_id, creadopor, creado) values (rec_registro.pais_id, rec_registro.provinnom, 1, 1, (select current_timestamp));
	end loop;
	close cur_tabla;
	reg_mensaje.error := 0;
	reg_mensaje.mensaje := 'Operación realizada con éxito'; 
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.migra_provincia() OWNER TO attinae_user;

--
-- Name: proc_matriculacionestudiante(integer, integer, integer, integer, integer, character, integer, text, integer, integer, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.proc_matriculacionestudiante(par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_ciclo_id integer, par_jornada_id integer, par_paralelo character, par_estudiante_id integer, par_observacion text, par_estado_id integer, par_usuario_id integer, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;	
	var_paraleloestudiante_id integer;
	cur_paralelo refcursor;
	rec_paralelo record;
	
	
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.paraleloestudiante IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		
		var_fechaevento := (select current_timestamp);
		
		open cur_paralelo for select * from academico.paralelo where anio_lectivo_id = par_anio_lectivo_id and periodo_id = par_periodo_id and carrera_id = par_carrera_id
																		and ciclo_id = par_ciclo_id and jornada_id = par_jornada_id and paralelo = par_paralelo and elementoeducativo_id = 37;
		loop
			fetch cur_paralelo into rec_paralelo;
			exit when not found;			
			if (rec_paralelo.disponible > 0) then
				rec_paralelo.disponible := rec_paralelo.disponible - 1;
				update academico.paralelo set disponible = rec_paralelo.disponible where paralelo_id = rec_paralelo.paralelo_id;
				var_tabla := 'paralelo';
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'disponible', rec_paralelo.paralelo_id, rec_paralelo.disponible, par_usuario_id, var_fechaevento, par_ip);
			else
				raise exception 'Cupo no disponible.';
			end if;
			
			insert into academico.paraleloestudiante (paralelo_id, persona_id, observacion, estado_id, creadopor, creado) 
								values (rec_paralelo.paralelo_id, par_estudiante_id, par_observacion, par_estado_id, par_usuario_id, var_fechaevento)
								returning paraleloestudiante_id into var_paraleloestudiante_id;

			var_tabla := 'paraleloestudiante';
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'paralelo_id', var_paraleloestudiante_id, rec_paralelo.paralelo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estudiante_id', var_paraleloestudiante_id, par_estudiante_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'observacion_id', var_paraleloestudiante_id, par_observacion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', var_paraleloestudiante_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		end loop;
		close cur_paralelo;
	
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := var_paraleloestudiante_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id := var_paraleloestudiante_id;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.proc_matriculacionestudiante(par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_ciclo_id integer, par_jornada_id integer, par_paralelo character, par_estudiante_id integer, par_observacion text, par_estado_id integer, par_usuario_id integer, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION proc_matriculacionestudiante(par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_ciclo_id integer, par_jornada_id integer, par_paralelo character, par_estudiante_id integer, par_observacion text, par_estado_id integer, par_usuario_id integer, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.proc_matriculacionestudiante(par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_ciclo_id integer, par_jornada_id integer, par_paralelo character, par_estudiante_id integer, par_observacion text, par_estado_id integer, par_usuario_id integer, par_ip character varying) IS 'Realiza la matriculacion de estudiantes';


--
-- Name: proc_ordenpago_formapago(character varying, timestamp without time zone, integer, integer, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.proc_ordenpago_formapago(par_numeroorden character varying, par_fechapago timestamp without time zone, par_formapago_id integer, par_usuario_id integer, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_registronivelacion_id numeric;
	var_ordenpago_id_base numeric;
	var_fechapago_base timestamp;
	var_formapago_id_base integer;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.ordenpago IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'ordenpago';
		var_fechaevento := (select current_timestamp);
		var_ordenpago_id_base := (select ordenpago_id from academico.ordenpago where numeroorden = par_numeroorden);
		
		select registronivelacion_id, fechapago, formapago, estado_id into var_registronivelacion_id, var_fechapago_base, var_formapago_id_base, var_estado_id_base
				from academico.ordenpago where numeroorden = par_numeroorden;
				
		update academico.ordenpago set formapago_id = par_formapago_id, fechapago = par_fechapago, estado_id = 17, actualizadopor = par_usuario_id, actualizado = var_fechaevento
						where numeroorden = par_numeroorden;
						
		insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
					values ('U', var_tabla, 'fechapago', var_ordenpago_id_base, var_fechapago_base, par_fechapago, par_usuario_id, var_fechaevento, par_ip);
		insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
					values ('U', var_tabla, 'formapago', var_ordenpago_id_base, var_formapago_id_base, par_formapago_id, par_usuario_id, var_fechaevento, par_ip);
		insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
					values ('U', var_tabla, 'estado_id', var_ordenpago_id_base, var_estado_id_base, 17, par_usuario_id, var_fechaevento, par_ip);

		reg_mensaje := (select academico.proc_registronivelacion_estado(var_registronivelacion_id::integer, 11::integer, par_usuario_id::integer, par_ip::character varying));

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito proc_ordenpago_pagobanco'; 
		reg_mensaje.id := var_registronivelacion_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error en (proc_ordenpago_pagobanco) al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id := var_registronivelacion_id;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.proc_ordenpago_formapago(par_numeroorden character varying, par_fechapago timestamp without time zone, par_formapago_id integer, par_usuario_id integer, par_ip character varying) OWNER TO attinae_user;

--
-- Name: proc_ordenpago_generacion(character, integer, integer, integer, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.proc_ordenpago_generacion(par_tipoordenpago character, par_persona_id integer, par_registro_id integer, par_usuario_id integer, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_ordenpago_id integer;
	var_numeroorden character varying;
	var_banco character varying;
	var_numerocuenta character varying;
	var_tipocuenta character varying;
	var_fechageneracion timestamp without time zone;
	var_fechapago timestamp without time zone;
	var_fechamaximapago timestamp without time zone;
	var_concepto character varying;
	var_estado_id integer;	
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.ordenpago IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'ordenpago';
		var_fechaevento := (select current_timestamp);

		if (not exists (select ordenpago_id from academico.ordenpago where persona_id = par_persona_id
								and registronivelacion_id = par_registro_id
								and estado_id = 16)) then
			var_ordenpago_id := 0;
		else
			select case when ordenpago_id is null then 0 else ordenpago_id end into var_ordenpago_id from academico.ordenpago where persona_id = par_persona_id
								and registronivelacion_id = par_registro_id
								and estado_id = 16;
		end if;

		if (var_ordenpago_id = 0) then
		begin
			var_numeroorden := (select academico.func_obtenernumeroordenpago((select numeroorden from academico.ordenpago where ordenpago_id = (select max(ordenpago_id) from academico.ordenpago))));
			raise notice '%', var_numeroorden;
			var_banco := (select valor from seguridad.parametro where parametro_id = 1);
			var_numerocuenta := (select valor from seguridad.parametro where parametro_id = 2);
			var_tipocuenta := (select valor from seguridad.parametro where parametro_id = 3);
			var_fechageneracion := (select current_timestamp);
			var_fechamaximapago := (var_fechageneracion + ((select valor from seguridad.parametro where parametro_id = 4) || ' days')::interval);
			var_concepto := (select valor from seguridad.parametro where parametro_id = 6);
			var_estado_id := 16;
		
			if (par_tipoordenpago = 'N') then
			begin
				insert into academico.ordenpago (numeroorden, persona_id, registronivelacion_id, banco, numerocuenta, tipocuenta, fechageneracion, fechamaximapago, concepto, estado_id, creadopor, creado) 
						values (var_numeroorden, par_persona_id, par_registro_id, var_banco, var_numerocuenta, var_tipocuenta, var_fechageneracion, var_fechamaximapago, var_concepto, var_estado_id, par_usuario_id, var_fechaevento)
						returning ordenpago_id into var_ordenpago_id;
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'registronivelacion_id', var_ordenpago_id, par_registro_id, par_usuario_id, var_fechaevento, par_ip);					
			end;
			else
			begin
				insert into academico.ordenpago (numeroorden, persona_id, registroperiodo_id, banco, numerocuenta, tipocuenta, fechageneracion, fechamaximapago, concepto, estado_id, creadopor, creado) 
						values (var_numeroorden, par_persona_id, par_registro_id, var_banco, var_numerocuenta, var_tipocuenta, var_fechageneracion, var_fechamaximapago, var_concepto, var_estado_id, par_usuario_id, var_fechaevento)
						returning ordenpago_id into var_ordenpago_id;		
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'registroperiodo_id', var_ordenpago_id, par_registro_id, par_usuario_id, var_fechaevento, par_ip);					
			end;
			end if;


					
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'numeroorden', var_ordenpago_id, var_numeroorden, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'persona_id', var_ordenpago_id, par_persona_id, par_usuario_id, var_fechaevento, par_ip);
											
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'banco', var_ordenpago_id, var_banco, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'numerocuenta', var_ordenpago_id, var_numerocuenta, par_usuario_id, var_fechaevento, par_ip);										
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'tipocuenta', var_ordenpago_id, var_tipocuenta, par_usuario_id, var_fechaevento, par_ip);					
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechageneracion', var_ordenpago_id, var_fechageneracion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fechamaximapago', var_ordenpago_id, var_fechamaximapago, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'concepto', var_ordenpago_id, var_concepto, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', var_ordenpago_id, var_estado_id, par_usuario_id, var_fechaevento, par_ip);

		end;
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := var_ordenpago_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id := var_ordenpago_id;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.proc_ordenpago_generacion(par_tipoordenpago character, par_persona_id integer, par_registro_id integer, par_usuario_id integer, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION proc_ordenpago_generacion(par_tipoordenpago character, par_persona_id integer, par_registro_id integer, par_usuario_id integer, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.proc_ordenpago_generacion(par_tipoordenpago character, par_persona_id integer, par_registro_id integer, par_usuario_id integer, par_ip character varying) IS 'Realiza la generación de OP';


--
-- Name: proc_ordenpago_vencimiento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.proc_ordenpago_vencimiento() RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_ordenpago_id_base integer;
	var_registronivelacion_id_base integer;
	var_cursonivelacionjornada_id_base integer;
	var_cantprerregistrado_base smallint;
	var_estado_id_base integer;
	cur_ordenpago refcursor;
	rec_ordenpago record;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.ordenpago IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'ordenpago';
		var_fechaevento := (select current_timestamp);
		
		open cur_ordenpago for select ordenpago_id, registronivelacion_id, registroperiodo_id, estado_id from academico.ordenpago 
						where (select seguridad.func_sumar_dias_habiles(fechageneracion::date, (select valor from seguridad.parametro where parametro_id = 4)::numeric))::date < current_date::date 
							and estado_id = 16 and activo = 'S';
		loop
			fetch cur_ordenpago into rec_ordenpago;
			exit when not found;

			update academico.ordenpago set estado_id = 18 where ordenpago_id = rec_ordenpago.ordenpago_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
					values ('U', var_tabla, 'estado_id', var_ordenpago_id_base, 18, rec_ordenpago.estado_id, 0, var_fechaevento, (select inet_server_addr()));

			select cursonivelacionjornada_id, cantprerregistrado into var_cursonivelacionjornada_id_base, var_cantprerregistrado_base from academico.cursonivelacionjornada 
					where cursonivelacionjornada_id = (select cursonivelacionjornada_id from academico.registronivelacion where registronivelacion_id = rec_ordenpago.registronivelacion_id);
			update academico.cursonivelacionjornada set cantprerregistrado = cantprerregistrado - 1 
					where cursonivelacionjornada_id = var_cursonivelacionjornada_id_base;						
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
					values ('U', 'cursonivelacionjornada', 'cantprerregistrado', var_cursonivelacionjornada_id_base, 
						var_cursonivelacionjornada_id_base, (var_cursonivelacionjornada_id_base - 1), 0, var_fechaevento, (select inet_server_addr()));
		
		end loop;
		close cur_ordenpago;

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito proc_ordenpago_vencimiento'; 
		reg_mensaje.id := var_ordenpago_id_base;

	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error en al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id := var_ordenpago_id_base;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.proc_ordenpago_vencimiento() OWNER TO attinae_user;

--
-- Name: proc_planificaparalelo(integer, integer, integer, integer, integer, integer, integer, character, smallint, smallint, integer, integer, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.proc_planificaparalelo(par_paralelo_id integer, par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_malla_id integer, par_ciclo_id integer, par_jornada_id integer, par_paralelo character, par_cupo smallint, par_disponible smallint, par_estado_id integer, par_usuario_id integer, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_anio_lectivo_id_base integer;
	var_periodo_id_base integer;
	var_carrera_id_base integer;
	var_malla_id_base integer;
	var_ciclo_id_base integer;
	var_jornada_id_base integer;
	--var_elementoeducativo_id_base integer;
	var_paralelo_base character;
	var_cupo_base smallint;
	var_disponible_base smallint;
	var_estado_id_base integer;
	cur_mallaelemento refcursor;
	rec_mallaelemento record;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.paralelo IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'paralelo';
		var_fechaevento := (select current_timestamp);
		
		open cur_mallaelemento for select * from academico.mallaelemento where malla_id = par_malla_id and ciclo_id = par_ciclo_id;
		loop
			fetch cur_mallaelemento into rec_mallaelemento;
			exit when not found;
			insert into academico.paralelo (anio_lectivo_id, periodo_id, carrera_id, malla_id, ciclo_id, jornada_id, elementoeducativo_id, paralelo, cupo, disponible, estado_id, creadopor, creado) 
								values (par_anio_lectivo_id, par_periodo_id, par_carrera_id, par_malla_id, par_ciclo_id, par_jornada_id, rec_mallaelemento.elementoeducativo_id, par_paralelo, par_cupo, par_disponible, par_estado_id, par_usuario_id, var_fechaevento)
								returning paralelo_id into par_paralelo_id;

			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'anio_lectivo_id', par_paralelo_id, par_anio_lectivo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'periodo_id', par_paralelo_id, par_periodo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'carrera_id', par_paralelo_id, par_carrera_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'malla_id', par_paralelo_id, par_malla_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'ciclo_id', par_paralelo_id, par_ciclo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'jornada_id', par_paralelo_id, par_jornada_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'elementoeducativo_id', par_paralelo_id, rec_mallaelemento.elementoeducativo_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'paralelo', par_paralelo_id, par_paralelo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'cupo', par_paralelo_id, par_cupo, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'disponible', par_paralelo_id, par_disponible, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_paralelo_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);				
		end loop;
		close cur_mallaelemento;
	

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_paralelo_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id := par_paralelo_id;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.proc_planificaparalelo(par_paralelo_id integer, par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_malla_id integer, par_ciclo_id integer, par_jornada_id integer, par_paralelo character, par_cupo smallint, par_disponible smallint, par_estado_id integer, par_usuario_id integer, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION proc_planificaparalelo(par_paralelo_id integer, par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_malla_id integer, par_ciclo_id integer, par_jornada_id integer, par_paralelo character, par_cupo smallint, par_disponible smallint, par_estado_id integer, par_usuario_id integer, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.proc_planificaparalelo(par_paralelo_id integer, par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_malla_id integer, par_ciclo_id integer, par_jornada_id integer, par_paralelo character, par_cupo smallint, par_disponible smallint, par_estado_id integer, par_usuario_id integer, par_ip character varying) IS 'Realiza la planificación de paralelos';


--
-- Name: proc_registrocalificacionestudiante(integer, text, integer, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.proc_registrocalificacionestudiante(par_desglosecalificacionestudiante_id integer, par_calificacion_equivalencia text, par_usuario_id integer, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	rec_desglosecalificaciconestudiante record;
	par_estado_id integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.desglosecalificaciconestudiante IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'desglosecalificaciconestudiante';
		var_fechaevento := (select current_timestamp);
		
		select * into rec_desglosecalificaciconestudiante from academico.desglosecalificaciconestudiante where desglosecalificacionestudiante_id = par_desglosecalificacionestudiante_id;
		
		if (rec_desglosecalificaciconestudiante.calificacion_equivalencia is null) then
			par_estado_id := 29;
		else
			par_estado_id := 30;
		end if;
		
		update academico.desglosecalificaciconestudiante set calificacion_equivalencia = par_calificacion_equivalencia, estado_id = par_estado_id
			where desglosecalificacionestudiante_id = par_desglosecalificacionestudiante_id;
		
		insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
			values ('U', var_tabla, 'calificacion_equivalencia', par_desglosecalificacionestudiante_id, rec_desglosecalificaciconestudiante.calificacion_equivalencia, par_calificacion_equivalencia, par_usuario_id, var_fechaevento, par_ip);
			
		insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
			values ('U', var_tabla, 'estado_id', par_desglosecalificacionestudiante_id, rec_desglosecalificaciconestudiante.estado_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_desglosecalificacionestudiante_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 	
	reg_mensaje.id := par_desglosecalificacionestudiante_id;	
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.proc_registrocalificacionestudiante(par_desglosecalificacionestudiante_id integer, par_calificacion_equivalencia text, par_usuario_id integer, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION proc_registrocalificacionestudiante(par_desglosecalificacionestudiante_id integer, par_calificacion_equivalencia text, par_usuario_id integer, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.proc_registrocalificacionestudiante(par_desglosecalificacionestudiante_id integer, par_calificacion_equivalencia text, par_usuario_id integer, par_ip character varying) IS 'Realiza registro de desglose calificacion estudiante';


--
-- Name: proc_registronivelacion(integer, integer, integer, integer, integer, timestamp without time zone, numeric, integer, integer, character, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.proc_registronivelacion(par_registronivelacion_id integer, par_cursonivelacion_id integer, par_cursonivelacionjornada_id integer, par_planificacioncarrera_id integer, par_persona_id integer, par_fecha_registro timestamp without time zone, par_calificacionfinal numeric, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_cursonivelacion_id_base integer;
	var_cursonivelacionjornada_id_base integer;
	var_planificacioncarrera_id_base integer;
	var_persona_id_base integer;
	var_fecha_registro_base timestamp;
	var_calificacionfinal_base numeric;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.registronivelacion IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'registronivelacion';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into academico.registronivelacion (cursonivelacion_id, cursonivelacionjornada_id, planificacioncarrera_id, persona_id, fecha_registro, calificacionfinal, estado_id, creadopor, creado, validacampos) 
						values (par_cursonivelacion_id, par_cursonivelacionjornada_id, par_planificacioncarrera_id, par_persona_id, par_fecha_registro, par_calificacionfinal, par_estado_id, par_usuario_id, var_fechaevento, '000000000000000000000000000000000000000000000')
						returning registronivelacion_id into par_registronivelacion_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'cursonivelacion_id', par_registronivelacion_id, par_cursonivelacion_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'cursonivelacionjornada_id', par_registronivelacion_id, par_cursonivelacionjornada_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'planificacioncarrera_id', par_registronivelacion_id, par_planificacioncarrera_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'persona_id', par_registronivelacion_id, par_persona_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'fecha_registro', par_registronivelacion_id, par_fecha_registro, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'calificacionfinal', par_registronivelacion_id, par_calificacionfinal, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_registronivelacion_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_registronivelacion_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);						
			update academico.cursonivelacionjornada set cantprerregistrado = cantprerregistrado + 1 where cursonivelacionjornada_id = par_cursonivelacionjornada_id;
/*
		elsif par_accion = 'U' then
			select unidadeducativa_id, titulobachiller, fechagraduacion, calificaciongraduacion, calificacionsobre, estado_id 
				into var_unidadeducativa_id_base, var_titulobachiller_base, var_fechagraduacion_base, var_calificaciongraduacion_base, var_calificacionsobre_base, var_estado_id_base 
					from academico.aspirante where persona_id = var_persona_id_base;
			update academico.aspirante set unidadeducativa_id = par_unidadeducativa_id, titulobachiller = par_titulobachiller, fechagraduacion = par_fechagraduacion, 
							calificaciongraduacion = par_calificaciongraduacion, calificacionsobre = par_calificacionsobre,
							estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where persona_id = var_persona_id_base;
			if var_unidadeducativa_id_base <> par_unidadeducativa_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'unidadeducativa_id', var_persona_id_base, var_unidadeducativa_id_base, par_unidadeducativa_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_titulobachiller_base <> par_titulobachiller then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'titulobachiller', var_persona_id_base, var_titulobachiller_base, par_titulobachiller, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_fechagraduacion_base <> par_fechagraduacion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'fechagraduacion', var_persona_id_base, var_fechagraduacion_base, par_fechagraduacion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_calificaciongraduacion_base <> par_calificaciongraduacion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'calificaciongraduacion', var_persona_id_base, var_calificaciongraduacion_base, par_calificaciongraduacion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_calificacionsobre_base <> par_calificacionsobre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'calificacionsobre', var_persona_id_base, var_calificacionsobre_base, par_calificacionsobre, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', var_persona_id_base, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update academico.aspirante set activo = 'N' where persona_id = var_persona_id_base;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, var_persona_id_base, par_usuario_id, var_fechaevento, par_ip);
*/
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_registronivelacion_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 	
	reg_mensaje.id := par_registronivelacion_id;	
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.proc_registronivelacion(par_registronivelacion_id integer, par_cursonivelacion_id integer, par_cursonivelacionjornada_id integer, par_planificacioncarrera_id integer, par_persona_id integer, par_fecha_registro timestamp without time zone, par_calificacionfinal numeric, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION proc_registronivelacion(par_registronivelacion_id integer, par_cursonivelacion_id integer, par_cursonivelacionjornada_id integer, par_planificacioncarrera_id integer, par_persona_id integer, par_fecha_registro timestamp without time zone, par_calificacionfinal numeric, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.proc_registronivelacion(par_registronivelacion_id integer, par_cursonivelacion_id integer, par_cursonivelacionjornada_id integer, par_planificacioncarrera_id integer, par_persona_id integer, par_fecha_registro timestamp without time zone, par_calificacionfinal numeric, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla registronivelacion';


--
-- Name: proc_registronivelacion_estado(integer, integer, integer, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.proc_registronivelacion_estado(par_registronivelacion_id integer, par_estado_id integer, par_usuario_id integer, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_estado_id_base integer;	
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.registronivelacion IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'registronivelacion';
		var_fechaevento := (select current_timestamp);
		
		select estado_id into var_estado_id_base
				from academico.registronivelacion where registronivelacion_id = par_registronivelacion_id;
		update academico.registronivelacion set estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
						where registronivelacion_id = par_registronivelacion_id;
		if var_estado_id_base <> par_estado_id then
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
						values ('U', var_tabla, 'estado_id', par_registronivelacion_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		end if;

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_registronivelacion_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id := par_registronivelacion_id;
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.proc_registronivelacion_estado(par_registronivelacion_id integer, par_estado_id integer, par_usuario_id integer, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION proc_registronivelacion_estado(par_registronivelacion_id integer, par_estado_id integer, par_usuario_id integer, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.proc_registronivelacion_estado(par_registronivelacion_id integer, par_estado_id integer, par_usuario_id integer, par_ip character varying) IS 'Realiza el cambio de estado en la tabla registronivelacion';


--
-- Name: proc_registronivelacion_validacampos(integer, text, integer, character varying); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.proc_registronivelacion_validacampos(par_registronivelacion_id integer, par_validacampos text, par_usuario_id integer, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_validacampos_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE academico.registronivelacion IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'registronivelacion';
		var_fechaevento := (select current_timestamp);

		select validacampos into var_validacampos_base from academico.registronivelacion 
					where registronivelacion_id = par_registronivelacion_id;
		update registronivelacion set validacampos = par_validacampos where registronivelacion_id = par_registronivelacion_id;

		insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
					values ('U', var_tabla, 'validacampos', par_registronivelacion_id, var_validacampos_base, par_validacampos, par_usuario_id, var_fechaevento, par_ip);

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_registronivelacion_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 	
	reg_mensaje.id := par_registronivelacion_id;	
	END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION academico.proc_registronivelacion_validacampos(par_registronivelacion_id integer, par_validacampos text, par_usuario_id integer, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION proc_registronivelacion_validacampos(par_registronivelacion_id integer, par_validacampos text, par_usuario_id integer, par_ip character varying); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.proc_registronivelacion_validacampos(par_registronivelacion_id integer, par_validacampos text, par_usuario_id integer, par_ip character varying) IS 'Realiza actualización campo validacampos';


--
-- Name: query_paralelodocente(integer); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.query_paralelodocente(par_paralelo_id integer) RETURNS text
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_resultado text;
	r academico.paralelodocente%rowtype;
BEGIN
	var_resultado := '';
	FOR r IN SELECT * FROM academico.paralelodocente where paralelo_id = par_paralelo_id and activo = 'S'
	LOOP
		var_resultado := var_resultado || (select  case when (select abreviatura from academico.titulo where titulo_id = doc.titulo_id) is null then '' else (select abreviatura from academico.titulo where titulo_id = doc.titulo_id) end
										   		|| ' ' || apellido1 || ' ' || apellido2 || ', ' || nombre1 || ' <br/> '
												from academico.persona per
													join academico.docente doc on doc.persona_id = per.persona_id
												where per.persona_id = r.persona_id
										  );
	END LOOP;
    RETURN var_resultado;
END;

$$;


ALTER FUNCTION academico.query_paralelodocente(par_paralelo_id integer) OWNER TO attinae_user;

--
-- Name: FUNCTION query_paralelodocente(par_paralelo_id integer); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.query_paralelodocente(par_paralelo_id integer) IS 'Realiza subconsulta de paralelodocente';


--
-- Name: query_promedio_periodo(integer, integer, integer, integer, character, integer, integer); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.query_promedio_periodo(par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_ciclo_id integer, par_paralelo character, par_elementoeducativo_id integer, par_persona_id integer) RETURNS text
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_resultado 				text;
	var_promedio 				numeric;	
	cur_calificacionparcial		refcursor;
	rec_calificacionparcial		record;	
BEGIN
	var_resultado := '';
	var_promedio := 0;
	
	var_promedio :=  (select academico.query_promedioparcial_periodo(par_anio_lectivo_id, par_periodo_id, par_carrera_id, par_ciclo_id, par_paralelo, par_elementoeducativo_id, par_persona_id))::numeric;
	if (var_promedio = null) then
		var_resultado = '--';
	else
		var_promedio = var_promedio	+
					 (select case when calificacion_numerica is null then 0 else calificacion_numerica end  FROM academico.vi_calificacionesperiodo where 
													anio_lectivo_id = par_anio_lectivo_id
													and periodo_id = par_periodo_id
													and carrera_id = par_carrera_id
													and ciclo_id = par_ciclo_id
													and paralelo = par_paralelo
													and elementoeducativo_id = par_elementoeducativo_id
													and persona_id = par_persona_id
													and calificacioncondesglose = false);
		var_resultado = (round(var_promedio, 2))::text;
	end if;
    RETURN var_resultado;
END;

$$;


ALTER FUNCTION academico.query_promedio_periodo(par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_ciclo_id integer, par_paralelo character, par_elementoeducativo_id integer, par_persona_id integer) OWNER TO attinae_user;

--
-- Name: FUNCTION query_promedio_periodo(par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_ciclo_id integer, par_paralelo character, par_elementoeducativo_id integer, par_persona_id integer); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.query_promedio_periodo(par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_ciclo_id integer, par_paralelo character, par_elementoeducativo_id integer, par_persona_id integer) IS 'Realiza subconsulta para calcular el promedio de los parciales';


--
-- Name: query_promedioparcial_periodo(integer, integer, integer, integer, character, integer, integer); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.query_promedioparcial_periodo(par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_ciclo_id integer, par_paralelo character, par_elementoeducativo_id integer, par_persona_id integer) RETURNS text
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_resultado 				text;
	var_promedio 				numeric;	
	var_contador				numeric;
	cur_calificacionparcial		refcursor;
	rec_calificacionparcial		record;	
BEGIN
	var_resultado := '';
	var_promedio := 0;
	var_contador := 0;
	
	open cur_calificacionparcial for select calificacion_numerica FROM academico.vi_calificacionesperiodo where 
													anio_lectivo_id = par_anio_lectivo_id
													and periodo_id = par_periodo_id
													and carrera_id = par_carrera_id
													and ciclo_id = par_ciclo_id
													and paralelo = par_paralelo
													and elementoeducativo_id = par_elementoeducativo_id
													and persona_id = par_persona_id
													and calificacioncondesglose = true;
	loop
		fetch cur_calificacionparcial into rec_calificacionparcial;
		exit when not found;
			var_contador := var_contador + 1;
			var_promedio := var_promedio + rec_calificacionparcial.calificacion_numerica;				

	end loop;
	close cur_calificacionparcial;
	
	if var_contador > 0 then
		var_resultado := (round(((var_promedio / var_contador) * 0.80), 2))::text;
	else
		var_resultado := 0;
	end if;
    RETURN var_resultado;
END;

$$;


ALTER FUNCTION academico.query_promedioparcial_periodo(par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_ciclo_id integer, par_paralelo character, par_elementoeducativo_id integer, par_persona_id integer) OWNER TO attinae_user;

--
-- Name: FUNCTION query_promedioparcial_periodo(par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_ciclo_id integer, par_paralelo character, par_elementoeducativo_id integer, par_persona_id integer); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.query_promedioparcial_periodo(par_anio_lectivo_id integer, par_periodo_id integer, par_carrera_id integer, par_ciclo_id integer, par_paralelo character, par_elementoeducativo_id integer, par_persona_id integer) IS 'Realiza subconsulta para calcular el promedio de los parciales';


--
-- Name: trg_calculapromedioestudiante(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_calculapromedioestudiante() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
	var_promedio_numerico		numeric;	
	var_promedio_equivalencia	text;
	var_cantitems	 			numeric;
	var_calificacion_id 		numeric;
	var_calificacion_numerica	numeric;
	var_modoevaluacion_id 		numeric;
	cur_modoevaluacion			refcursor;
	rec_modoevaluacion 			record;
	
  BEGIN
	--if ((OLD.calificacion_equivalencia is null or (NEW.calificacion_equivalencia <> OLD.calificacion_equivalencia)) and TG_OP = 'UPDATE') then
	
	if (TG_OP = 'UPDATE') then
	begin
		select calificacion_id, modoevaluacion_id into var_calificacion_id, var_modoevaluacion_id from academico.vi_paralelos_modoevaluacion 
			where desglosecalificacionestudiante_id = NEW.desglosecalificacionestudiante_id 
					and desgloseevaluacion_id = NEW.desgloseevaluacion_id;
		
		--raise notice '% %', var_calificacion_id , var_modoevaluacion_id;
		--Validacion de calificaciones
		if (var_calificacion_id = 1) then
			if (NEW.calificacion_equivalencia ~ '[0-9]' or NEW.calificacion_equivalencia = '' or NEW.calificacion_equivalencia is null) then
				if (NEW.calificacion_equivalencia ~ '[0-9]') then
					var_calificacion_numerica := NEW.calificacion_equivalencia::numeric;
					if (var_calificacion_numerica >= 0 and var_calificacion_numerica <= 10 and var_modoevaluacion_id <> 11) then
						NEW.calificacion_numerica := var_calificacion_numerica;
					else
						if (var_modoevaluacion_id = 11) then
							NEW.calificacion_numerica := var_calificacion_numerica;
						else
							raise exception 'Valor debe ser entre 0 y 10'; 
							return null;
						end if;						
					end if;
				else
					NEW.calificacion_equivalencia := NULL;
					var_calificacion_numerica := NULL;
				end if;				
			else
				raise exception 'Valor no es válido'; 
				return null;
			end if;
		else  --aqui colocar la validación para cuando es letras	
		
			if (NEW.calificacion_equivalencia in (select calificacion from academico.detallecalificacion where calificacion_id = var_calificacion_id)) then
				NEW.calificacion_numerica := (select valornumerico from academico.detallecalificacion where calificacion_id = var_calificacion_id and calificacion::text = NEW.calificacion_equivalencia::text);
			else
				raise exception 'Valor no válido para la calificación'; 
				return null;
			end if;
		end if;
						
		--calculo de promedio		
		if (NEW.calificacion_equivalencia = '' or NEW.calificacion_equivalencia is null) then
			update academico.calificacionestudiante set calificacion_equivalencia =  NULL, calificacion_numerica = NULL
					where calificacionestudiante_id = NEW.calificacionestudiante_id;			
		else
			--raise notice '%', NEW.calificacionestudiante_id;			
			var_promedio_numerico := 0;			
			open cur_modoevaluacion for select distinct desglosecalificacionestudiante_id, porcentajecalificacion, desglosecalificacion_numerica
												from academico.vi_paralelos_modoevaluacion 
												where calificacionestudiante_id = NEW.calificacionestudiante_id and desdeintegradora = false; --and desglosecalificacion_numerica is not null;
			loop
				fetch cur_modoevaluacion into rec_modoevaluacion;
				exit when not found;
				
				raise notice '% %', rec_modoevaluacion.desglosecalificacionestudiante_id, NEW.desglosecalificacionestudiante_id;				
				if (rec_modoevaluacion.desglosecalificacionestudiante_id = NEW.desglosecalificacionestudiante_id) then
					var_promedio_numerico := var_promedio_numerico + (NEW.calificacion_numerica * (rec_modoevaluacion.porcentajecalificacion / 100));
				else
					if (rec_modoevaluacion.desglosecalificacion_numerica is not null) then
						var_promedio_numerico := var_promedio_numerico + (rec_modoevaluacion.desglosecalificacion_numerica * (rec_modoevaluacion.porcentajecalificacion / 100));
					end if;
				end if;
			end loop;
			close cur_modoevaluacion;
			
			if (var_promedio_numerico = 0) then
				var_promedio_numerico := NEW.calificacion_numerica;
			end if;
			
			raise notice 'Promedio %', var_promedio_numerico;			
			if (var_calificacion_id = 1) then
				var_promedio_equivalencia := round(var_promedio_numerico, 2)::text;
				--update academico.calificacionestudiante set calificacion_equivalencia = case when length(var_promedio_equivalencia) < 2 then format('0%s', var_promedio_equivalencia) else var_promedio_equivalencia end, calificacion_numerica = var_promedio_numerico
				update academico.calificacionestudiante set calificacion_equivalencia =  var_promedio_equivalencia, calificacion_numerica = var_promedio_numerico
					where calificacionestudiante_id = NEW.calificacionestudiante_id;
			else --aqui colocar la equivalencia para cuando es letras			
				var_promedio_equivalencia := (select calificacion from academico.detallecalificacion where calificacion_id = var_calificacion_id and valornumerico = round(var_promedio_numerico));
				
				update academico.calificacionestudiante set calificacion_equivalencia = var_promedio_equivalencia, calificacion_numerica = var_promedio_numerico
					where calificacionestudiante_id = NEW.calificacionestudiante_id;
			end if;
		end if;
		return NEW;
	end;
	else
		--raise notice '% %', NEW.calificacion_equivalencia, OLD.calificacion_equivalencia;
		return NEW;
	end if;
  END;
$$;


ALTER FUNCTION academico.trg_calculapromedioestudiante() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_calculapromedioestudiante(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_calculapromedioestudiante() IS 'Calcula el promedio parcial de los estudiantes';


--
-- Name: trg_valida_anio_aniolectivo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_anio_aniolectivo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select anio from academico.anio_lectivo where anio = NEW.anio and activo = 'S' and entidad_educativa = NEW.entidad_educativa) and (OLD.anio <> NEW.anio) then
		begin
			raise exception 'Año Lectivo ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;
$$;


ALTER FUNCTION academico.trg_valida_anio_aniolectivo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_anio_aniolectivo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_anio_aniolectivo() IS 'Verifica años lectivos repetidos campo anio';


--
-- Name: trg_valida_aniolectivo_cursonivelacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_aniolectivo_cursonivelacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select aniolectivo_id from academico.cursonivelacion where aniolectivo_id = NEW.aniolectivo_id and activo = 'S' and entidad_educativa = NEW.entidad_educativa ) then
		begin
			raise exception 'No se puede eliminar Año Lectivo que tengan Curso Nivelación asociada';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;
$$;


ALTER FUNCTION academico.trg_valida_aniolectivo_cursonivelacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_aniolectivo_cursonivelacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_aniolectivo_cursonivelacion() IS 'Validad relación aniolectivo - cursonivelacion';


--
-- Name: trg_valida_aniolectivo_paralelo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_aniolectivo_paralelo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select anio_lectivo_id from academico.paralelo where anio_lectivo_id = NEW.anio_lectivo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Año Lectivo que tengan Paralelo asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_aniolectivo_paralelo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_aniolectivo_paralelo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_aniolectivo_paralelo() IS 'Validad relación aniolectivo - paralelo';


--
-- Name: trg_valida_aniolectivo_periodo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_aniolectivo_periodo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select periodo_id from academico.periodo where anio_lectivo_id = NEW.anio_lectivo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Años Lectivos que tengan Periodos asociados'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_aniolectivo_periodo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_aniolectivo_periodo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_aniolectivo_periodo() IS 'Validad relación anio_lectivo - periodo';


--
-- Name: trg_valida_aspirante_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_aspirante_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select persona_id from academico.persona where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Aspirante a una Persona inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_aspirante_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_aspirante_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_aspirante_persona() IS 'Validad relación aspirante - persona';


--
-- Name: trg_valida_aspirante_registronivelacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_aspirante_registronivelacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select persona_id from academico.registronivelacion where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Aspirante que tengan Registro Nivelación asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_aspirante_registronivelacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_aspirante_registronivelacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_aspirante_registronivelacion() IS 'Validad relación aspirante - registronivelacion';


--
-- Name: trg_valida_aspirante_registrorequisitoaspirante(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_aspirante_registrorequisitoaspirante() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select persona_id from academico.registrorequisitoaspirante where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Aspirante que tengan registro asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_aspirante_registrorequisitoaspirante() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_aspirante_registrorequisitoaspirante(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_aspirante_registrorequisitoaspirante() IS 'Validad relación requisitoaspiranteperiodo - registrorequisitoaspirante';


--
-- Name: trg_valida_aspirante_unidadeducativa(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_aspirante_unidadeducativa() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select unidadeducativa_id from academico.unidadeducativa where unidadeducativa_id = NEW.unidadeducativa_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Aspirante a una Unidad Eduvativa inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_aspirante_unidadeducativa() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_aspirante_unidadeducativa(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_aspirante_unidadeducativa() IS 'Validad relación aspirante - unidadeducativa';


--
-- Name: trg_valida_campoformacion_mallaelemento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_campoformacion_mallaelemento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select campoformacion_id from academico.mallaelemento where campoformacion_id = NEW.campoformacion_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Campos de Formación que tengan registros asociados en Malla'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_campoformacion_mallaelemento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_campoformacion_mallaelemento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_campoformacion_mallaelemento() IS 'Validad relación ciclo - mallaelemento';


--
-- Name: trg_valida_cantidad_ciclo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_cantidad_ciclo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  cur_ciclos refcursor; 

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select * from academico.ciclo where activo = 'S') then
		begin
			raise exception 'No se puede continuar con la operación, no hay Ciclos creados'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_cantidad_ciclo() OWNER TO attinae_user;

--
-- Name: trg_valida_carrera_carreraciclo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_carrera_carreraciclo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select carrera_id from academico.carreraciclo where carrera_id = NEW.carrera_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Carreras que tengan Ciclos asociados'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_carrera_carreraciclo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_carrera_carreraciclo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_carrera_carreraciclo() IS 'Validad relación carrera - carreraciclo';


--
-- Name: trg_valida_carrera_cursonivelacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_carrera_cursonivelacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select carrera_id from academico.cursonivelacion where carrera_id = NEW.carrera_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Carrera que tengan Curso Nivelación asociada';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_carrera_cursonivelacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_carrera_cursonivelacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_carrera_cursonivelacion() IS 'Validad relación carrera - cursonivelacion';


--
-- Name: trg_valida_carrera_facultad(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_carrera_facultad() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select facultad_id from academico.facultad where facultad_id = NEW.facultad_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Carrera a una Facultad inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_carrera_facultad() OWNER TO attinae_user;

--
-- Name: trg_valida_carrera_malla(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_carrera_malla() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select carrera_id from academico.malla where carrera_id = NEW.carrera_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Carreras que tengan Mallas asociadas'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_carrera_malla() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_carrera_malla(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_carrera_malla() IS 'Validad relación carrera - malla';


--
-- Name: trg_valida_carrera_nucleoproblemico(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_carrera_nucleoproblemico() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select carrera_id from academico.nucleoproblemico where carrera_id = NEW.carrera_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Carreras que tengan Núcleos Problémicos asociados'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_carrera_nucleoproblemico() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_carrera_nucleoproblemico(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_carrera_nucleoproblemico() IS 'Validad relación carrera - nucleoproblemico';


--
-- Name: trg_valida_carrera_paralelo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_carrera_paralelo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select carrera_id from academico.paralelo where carrera_id = NEW.carrera_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Carrera que tengan Paralelo asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_carrera_paralelo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_carrera_paralelo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_carrera_paralelo() IS 'Validad relación carrera - paralelo';


--
-- Name: trg_valida_ciclo_mallaciclo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_ciclo_mallaciclo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select ciclo_id from academico.mallaciclo where ciclo_id = NEW.ciclo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Ciclos que tengan Mallas asociadas'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_ciclo_mallaciclo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_ciclo_mallaciclo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_ciclo_mallaciclo() IS 'Validad relación ciclo - mallaciclo';


--
-- Name: trg_valida_ciclo_mallaelemento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_ciclo_mallaelemento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select ciclo_id from academico.mallaelemento where ciclo_id = NEW.ciclo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Ciclos que tengan registros asociados en Malla'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_ciclo_mallaelemento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_ciclo_mallaelemento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_ciclo_mallaelemento() IS 'Validad relación ciclo - mallaelemento';


--
-- Name: trg_valida_ciclo_paralelo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_ciclo_paralelo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select ciclo_id from academico.paralelo where ciclo_id = NEW.ciclo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Ciclo que tengan Paralelo asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_ciclo_paralelo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_ciclo_paralelo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_ciclo_paralelo() IS 'Validad relación ciclo - paralelo';


--
-- Name: trg_valida_ciudad_parroquia(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_ciudad_parroquia() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select ciudad_id from academico.parroquia where ciudad_id = NEW.ciudad_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Ciudad que tengan Parroquia asociada';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_ciudad_parroquia() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_ciudad_parroquia(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_ciudad_parroquia() IS 'Validad relación ciudad - parroquia';


--
-- Name: trg_valida_ciudad_provincia(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_ciudad_provincia() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select provincia_id from academico.provincia where provincia_id = NEW.provincia_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Ciudad a una Provincia inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_ciudad_provincia() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_ciudad_provincia(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_ciudad_provincia() IS 'Validad relación ciudad - provincia';


--
-- Name: trg_valida_ciudad_unidadeducativa(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_ciudad_unidadeducativa() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select ciudad_id from academico.unidadeducativa where ciudad_id = NEW.ciudad_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Ciudad que tengan Unidad Educativa asociada';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_ciudad_unidadeducativa() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_ciudad_unidadeducativa(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_ciudad_unidadeducativa() IS 'Validad relación ciudad - unidadeducativa';


--
-- Name: trg_valida_ciudaddomicilio_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_ciudaddomicilio_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select ciudaddomicilio_id from academico.persona where ciudaddomicilio_id = NEW.ciudad_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Ciudad que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_ciudaddomicilio_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_ciudaddomicilio_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_ciudaddomicilio_persona() IS 'Validad relación ciudaddomicilio - persona';


--
-- Name: trg_valida_ciudadnacimiento_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_ciudadnacimiento_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select ciudadnacimiento_id from academico.persona where ciudadnacimiento_id = NEW.ciudad_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Ciudad que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_ciudadnacimiento_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_ciudadnacimiento_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_ciudadnacimiento_persona() IS 'Validad relación ciudadnacimiento - persona';


--
-- Name: trg_valida_codigo_carrera(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_codigo_carrera() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select codigo from academico.carrera where codigo = NEW.codigo and activo = 'S') and (OLD.codigo <> NEW.codigo) then
		begin
			raise exception 'Código de Carrera ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_codigo_carrera() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_codigo_carrera(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_codigo_carrera() IS 'Verifica Carrera repetidas campo codigo';


--
-- Name: trg_valida_codigo_cursocertificacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_codigo_cursocertificacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select codigo from academico.cursocertificacion where codigo = NEW.codigo and activo = 'S') and (OLD.codigo <> NEW.codigo) then
		begin
			raise exception 'Código de Curso Certificación ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_codigo_cursocertificacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_codigo_cursocertificacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_codigo_cursocertificacion() IS 'Verifica Curso Certificación repetidas campo codigo';


--
-- Name: trg_valida_codigo_elementoeducativo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_codigo_elementoeducativo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select codigo from academico.elementoeducativo where codigo = NEW.codigo and activo = 'S') and (OLD.codigo <> NEW.codigo) then
		begin
			raise exception 'Código de Materia ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_codigo_elementoeducativo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_codigo_elementoeducativo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_codigo_elementoeducativo() IS 'Verifica Materia repetidas campo codigo';


--
-- Name: trg_valida_codigo_facultad(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_codigo_facultad() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select codigo from academico.facultad where codigo = NEW.codigo and activo = 'S') and (OLD.codigo <> NEW.codigo) then
		begin
			raise exception 'Código de Facultad ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_codigo_facultad() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_codigo_facultad(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_codigo_facultad() IS 'Verifica Facultad repetidas campo codigo';


--
-- Name: trg_valida_codigo_malla(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_codigo_malla() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select codigo from academico.malla where codigo = NEW.codigo and activo = 'S') and (OLD.codigo <> NEW.codigo) then
		begin
			raise exception 'Código de Malla ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_codigo_malla() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_codigo_malla(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_codigo_malla() IS 'Verifica Malla repetidas campo codigo';


--
-- Name: trg_valida_codigo_parcial(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_codigo_parcial() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select periodo_id, codigo from academico.parcial where periodo_id = NEW.periodo_id and codigo = NEW.codigo and activo = 'S') and (OLD.periodo_id <> NEW.periodo_id and OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Código de Parcial ya existe en el Periodo asignado'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_codigo_parcial() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_codigo_parcial(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_codigo_parcial() IS 'Verifica Parcial repetidos campo periodo_id, codigo';


--
-- Name: trg_valida_codigo_periodo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_codigo_periodo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select anio_lectivo_id, codigo from academico.periodo where anio_lectivo_id = NEW.anio_lectivo_id and codigo = NEW.codigo and activo = 'S') and (OLD.anio_lectivo_id  <> NEW.anio_lectivo_id and OLD.codigo <> NEW.codigo) then
		begin
			raise exception 'Código de Periodo ya existe en el Año Lectivo asignado'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_codigo_periodo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_codigo_periodo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_codigo_periodo() IS 'Verifica Periodos repetidos campo anio_lectivo_id, codigo';


--
-- Name: trg_valida_cursocertificacion_facultad(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_cursocertificacion_facultad() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select facultad_id from academico.facultad where facultad_id = NEW.facultad_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Curso de Certificación a una Facultad inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_cursocertificacion_facultad() OWNER TO attinae_user;

--
-- Name: trg_valida_cursocertificacion_malla(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_cursocertificacion_malla() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select instancia_id from academico.malla where instancia_id = NEW.cursocertificacion_id and tipoinstancia = 'CC' and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Cursos de Certificación que tengan Mallas asociadas'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_cursocertificacion_malla() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_cursocertificacion_malla(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_cursocertificacion_malla() IS 'Validad relación cursocertificacion - malla';


--
-- Name: trg_valida_cursonivelacion_aniolectivo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_cursonivelacion_aniolectivo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select anio_lectivo_id from academico.anio_lectivo where anio_lectivo_id = NEW.aniolectivo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Curso Nivelación a un Año Lectivo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_cursonivelacion_aniolectivo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_cursonivelacion_aniolectivo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_cursonivelacion_aniolectivo() IS 'Validad relación cursonivelacion - aniolectivo';


--
-- Name: trg_valida_cursonivelacion_carrera(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_cursonivelacion_carrera() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select carrera_id from academico.carrera where carrera_id = NEW.carrera_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Curso Nivelación a un Carrera inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_cursonivelacion_carrera() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_cursonivelacion_carrera(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_cursonivelacion_carrera() IS 'Validad relación cursonivelacion - carrera';


--
-- Name: trg_valida_cursonivelacion_cursonivelacionjornada(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_cursonivelacion_cursonivelacionjornada() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select cursonivelacion_id from academico.cursonivelacionjornada where cursonivelacion_id = NEW.cursonivelacion_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Curso Nivelación que tengan Curso Nivelación Jornada asociada';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_cursonivelacion_cursonivelacionjornada() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_cursonivelacion_cursonivelacionjornada(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_cursonivelacion_cursonivelacionjornada() IS 'Validad relación cursonivelacion - cursonivelacionjornada';


--
-- Name: trg_valida_cursonivelacion_periodo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_cursonivelacion_periodo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select periodo_id from academico.periodo where periodo_id = NEW.periodo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Curso Nivelación a un Periodo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_cursonivelacion_periodo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_cursonivelacion_periodo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_cursonivelacion_periodo() IS 'Validad relación cursonivelacion - periodo';


--
-- Name: trg_valida_cursonivelacion_registronivelacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_cursonivelacion_registronivelacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select cursonivelacion_id from academico.registronivelacion where cursonivelacion_id = NEW.cursonivelacion_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Curso Nivelación que tengan Registro Nivelación asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_cursonivelacion_registronivelacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_cursonivelacion_registronivelacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_cursonivelacion_registronivelacion() IS 'Validad relación cursonivelacion - registronivelacion';


--
-- Name: trg_valida_cursonivelacionjornada_cursonivelacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_cursonivelacionjornada_cursonivelacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select cursonivelacion_id from academico.cursonivelacion where cursonivelacion_id = NEW.cursonivelacion_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Curso Nivelación Jornada a un Curso Nivelación inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_cursonivelacionjornada_cursonivelacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_cursonivelacionjornada_cursonivelacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_cursonivelacionjornada_cursonivelacion() IS 'Validad relación cursonivelacionjornada -  cursonivelacion';


--
-- Name: trg_valida_cursonivelacionjornada_jornada(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_cursonivelacionjornada_jornada() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select jornada_id from academico.jornada where jornada_id = NEW.jornada_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Curso Nivelación Jornada a una Jornada inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_cursonivelacionjornada_jornada() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_cursonivelacionjornada_jornada(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_cursonivelacionjornada_jornada() IS 'Validad relación cursonivelacionjornada -  jornada';


--
-- Name: trg_valida_cursonivelacionjornada_registronivelacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_cursonivelacionjornada_registronivelacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select cursonivelacionjornada_id from academico.registronivelacion where cursonivelacionjornada_id = NEW.cursonivelacionjornada_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Curso Nivelación Jornada que tengan Registro Nivelación asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_cursonivelacionjornada_registronivelacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_cursonivelacionjornada_registronivelacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_cursonivelacionjornada_registronivelacion() IS 'Validad relación cursonivelacionjornada - registronivelacion';


--
-- Name: trg_valida_descripcion_campoformacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_campoformacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.campoformacion where descripcion = NEW.descripcion and activo = 'S') and (OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_campoformacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_campoformacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_campoformacion() IS 'Verifica Campo Formación repetidos campo descripcion';


--
-- Name: trg_valida_descripcion_ciclo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_ciclo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.ciclo where descripcion = NEW.descripcion and activo = 'S') and (OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción de Ciclo ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_ciclo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_ciclo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_ciclo() IS 'Verifica Ciclo repetidos campo descripcion';


--
-- Name: trg_valida_descripcion_estadocivil(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_estadocivil() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.estadocivil where descripcion = NEW.descripcion and activo = 'S') and (OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_estadocivil() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_estadocivil(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_estadocivil() IS 'Verifica Estado Civil repetidos campo descripcion';


--
-- Name: trg_valida_descripcion_etnia(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_etnia() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.etnia where descripcion = NEW.descripcion and activo = 'S') and (OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_etnia() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_etnia(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_etnia() IS 'Verifica Etnia repetidos campo descripcion';


--
-- Name: trg_valida_descripcion_formapago(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_formapago() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.formapago where descripcion = NEW.descripcion and activo = 'S') and (OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_formapago() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_formapago(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_formapago() IS 'Verifica Forma de Pago repetidos campo descripción';


--
-- Name: trg_valida_descripcion_identidadgenero(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_identidadgenero() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.identidadgenero where descripcion = NEW.descripcion and activo = 'S') and (OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_identidadgenero() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_identidadgenero(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_identidadgenero() IS 'Verifica Identidad Género repetidos campo descripcion';


--
-- Name: trg_valida_descripcion_idioma(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_idioma() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.idioma where descripcion = NEW.descripcion and activo = 'S') and (OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_idioma() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_idioma(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_idioma() IS 'Verifica Idioma repetidos campo descripcion';


--
-- Name: trg_valida_descripcion_modoevaluacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_modoevaluacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.modoevaluacion where descripcion = NEW.descripcion and activo = 'S') and (OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción del Modo Evaluación ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_modoevaluacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_modoevaluacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_modoevaluacion() IS 'Verifica ModoEvaluacion repetidas campo descripcion';


--
-- Name: trg_valida_descripcion_nacionalidad(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_nacionalidad() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.nacionalidad where descripcion = NEW.descripcion and activo = 'S') and (OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción de la Nacionalidad ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_nacionalidad() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_nacionalidad(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_nacionalidad() IS 'Verifica Nacionalidad repetidas campo descripcion';


--
-- Name: trg_valida_descripcion_parcial(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_parcial() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.parcial where descripcion = NEW.descripcion and activo = 'S') and (OLD.periodo_id <> NEW.periodo_id and OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_parcial() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_parcial(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_parcial() IS 'Verifica Parcial repetidas campo descripcion';


--
-- Name: trg_valida_descripcion_periodo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_periodo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.periodo where anio_lectivo_id = NEW.anio_lectivo_id and descripcion = NEW.descripcion and activo = 'S') and (OLD.anio_lectivo_id  <> NEW.anio_lectivo_id and OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_periodo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_periodo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_periodo() IS 'Verifica Periodo repetidas campo descripcion';


--
-- Name: trg_valida_descripcion_sexo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_sexo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.sexo where descripcion = NEW.descripcion and activo = 'S') and (OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_sexo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_sexo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_sexo() IS 'Verifica Sexo repetidos campo descripcion';


--
-- Name: trg_valida_descripcion_tipodiscapacidad(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_tipodiscapacidad() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.tipodiscapacidad where descripcion = NEW.descripcion and activo = 'S') and (OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_tipodiscapacidad() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_tipodiscapacidad(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_tipodiscapacidad() IS 'Verifica Tipo Discapacidad repetidos campo descripcion';


--
-- Name: trg_valida_descripcion_tipodocumento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_tipodocumento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.tipodocumento where descripcion = NEW.descripcion and activo = 'S') and (OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_tipodocumento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_tipodocumento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_tipodocumento() IS 'Verifica Tipo Documento repetidos campo descripción';


--
-- Name: trg_valida_descripcion_unidadformacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_descripcion_unidadformacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select descripcion from academico.unidadformacion where descripcion = NEW.descripcion and activo = 'S') and (OLD.descripcion <> NEW.descripcion) then
		begin
			raise exception 'Descripción ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_descripcion_unidadformacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_descripcion_unidadformacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_descripcion_unidadformacion() IS 'Verifica Unidades Formacion repetidos campo descripcion';


--
-- Name: trg_valida_desgloseevaluacion_detallemodoevaluacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_desgloseevaluacion_detallemodoevaluacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select detallemodoevaluacion_id from academico.detallemodoevaluacion where detallemodoevaluacion_id = NEW.detallemodoevaluacion_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Desgloce Evaluación a un registro de Detalle Evaluació inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_desgloseevaluacion_detallemodoevaluacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_desgloseevaluacion_detallemodoevaluacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_desgloseevaluacion_detallemodoevaluacion() IS 'Validad relación desgloseevaluacion - detallemodoevaluacion';


--
-- Name: trg_valida_desgloseevaluacion_mallaelemento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_desgloseevaluacion_mallaelemento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select mallaelemento_id from academico.mallaelemento where mallaelemento_id = NEW.mallaelemento_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un registro de Desgloce Evaluación a una Malla Elemento inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_desgloseevaluacion_mallaelemento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_desgloseevaluacion_mallaelemento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_desgloseevaluacion_mallaelemento() IS 'Validad relación desgloseevaluacion - mallaelemento';


--
-- Name: trg_valida_detallemodoevaluacion_desgloseevaluacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_detallemodoevaluacion_desgloseevaluacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select detallemodoevaluacion_id from academico.desgloseevaluacion where detallemodoevaluacion_id = NEW.detallemodoevaluacion_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Detalles de Modo de Evaluación que tengan Desgloces de Evaluación asociados'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_detallemodoevaluacion_desgloseevaluacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_detallemodoevaluacion_desgloseevaluacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_detallemodoevaluacion_desgloseevaluacion() IS 'Validad relación detallemodoevaluacion - desgloseevaluacion';


--
-- Name: trg_valida_detallemodoevaluacion_modoevaluacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_detallemodoevaluacion_modoevaluacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select modoevaluacion_id from academico.modoevaluacion where modoevaluacion_id = NEW.modoevaluacion_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Detalle de Evaluación a un Modo de Evaluación inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_detallemodoevaluacion_modoevaluacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_detallemodoevaluacion_modoevaluacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_detallemodoevaluacion_modoevaluacion() IS 'Validad relación detallemodoevaluacion - modoevaluacion';


--
-- Name: trg_valida_detallemodoevaluaciondesdeintegradora(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_detallemodoevaluaciondesdeintegradora() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if NEW.desdeintegradora = TRUE and (select paraintegrar from academico.modoevaluacion where modoevaluacion_id = NEW.modoevaluacion_id) = FALSE then
		begin
			raise exception 'No se puede asignar este valor para el registro porque el Modo de Evaluación no ha sido especificado con la opción de Cátedra Integradora'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_detallemodoevaluaciondesdeintegradora() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_detallemodoevaluaciondesdeintegradora(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_detallemodoevaluaciondesdeintegradora() IS 'Verifica que se pueda asignar DesdeIntegradora solo si la cabecera tiene especificado paraintegrar';


--
-- Name: trg_valida_detallemodoevaluacionsoloundesdeintegradora(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_detallemodoevaluacionsoloundesdeintegradora() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select desdeintegradora from academico.detallemodoevaluacion where modoevaluacion_id = NEW.modoevaluacion_id and detallemodoevaluacion_id <> NEW.detallemodoevaluacion_id and desdeintegradora = true)  and NEW.desdeintegradora = TRUE then
		begin
			raise exception 'No se puede indicar se Resgistra desde Cátedra Integradora, porque ya hay un registro en el detalle con esa asignación'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_detallemodoevaluacionsoloundesdeintegradora() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_detallemodoevaluacionsoloundesdeintegradora(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_detallemodoevaluacionsoloundesdeintegradora() IS 'Verifica que solo un detalle tenga asignado Registra desde Cátedra Integradora';


--
-- Name: trg_valida_detallemodoevaluacionsumecien(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_detallemodoevaluacionsumecien() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if ((select case when sum(porcentajecalificacion) is null then 0 else sum(porcentajecalificacion) end  from academico.detallemodoevaluacion where modoevaluacion_id = NEW.modoevaluacion_id and detallemodoevaluacion_id <> NEW.detallemodoevaluacion_id and activo = 'S') + NEW.porcentajecalificacion) > 100 then
		begin
			raise exception 'No se puede asignar el valor en el campo Porcentaje Calificación porque la suma de todos los detalles supera el Cien por ciento'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_detallemodoevaluacionsumecien() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_detallemodoevaluacionsumecien(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_detallemodoevaluacionsumecien() IS 'Verifica la suma de los detalles no supere el 100%';


--
-- Name: trg_valida_disponible_cursonivelacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_disponible_cursonivelacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  
DECLARE
	var_disponible_base integer;
  BEGIN
	if (TG_OP = 'INSERT') then
	begin
		select (cupo - cantregistrado) into var_disponible_base from academico.cursonivelacionjornada where cursonivelacionjornada_id = NEW.cursonivelacionjornada_id;		
		if var_disponible_base = 0 then
		begin
			raise exception 'No hay cupo disponible para el Curso de Nivelación seleccionado.';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_disponible_cursonivelacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_disponible_cursonivelacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_disponible_cursonivelacion() IS 'Valida disponiblidad en curso de nivelación';


--
-- Name: trg_valida_docente_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_docente_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select persona_id from academico.persona where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Docente a una Persona inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;
$$;


ALTER FUNCTION academico.trg_valida_docente_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_docente_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_docente_persona() IS 'Validad relación docente - persona';


--
-- Name: trg_valida_docente_titulo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_docente_titulo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if NEW.persona_id is null then
			return NEW;
		else
		begin
			if not exists (select persona_id from academico.persona where persona_id = NEW.persona_id and activo = 'S') then
			begin
				raise exception 'No se puede asociar una Persona a un Título inexistente'; 
				return null;
			end;
			else
				return NEW;
			end if;
		end;
		end if;
	end;
	else
		return NEW;
	end if;
  END;
$$;


ALTER FUNCTION academico.trg_valida_docente_titulo() OWNER TO attinae_user;

--
-- Name: trg_valida_documento_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_documento_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select documentoidentificacion from academico.persona where documentoidentificacion = NEW.documentoidentificacion and activo = 'S') and (OLD.documentoidentificacion <> NEW.documentoidentificacion) then
		begin
			raise exception 'Documento Identificación ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_documento_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_documento_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_documento_persona() IS 'Verifica Persona repetidos campo documento_identifiacion';


--
-- Name: trg_valida_elementoeducativo_mallaelemento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_elementoeducativo_mallaelemento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select elementoeducativo_id from academico.mallaelemento where elementoeducativo_id = NEW.elementoeducativo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Elementos Educativos que tengan registros asociados en Malla'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_elementoeducativo_mallaelemento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_elementoeducativo_mallaelemento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_elementoeducativo_mallaelemento() IS 'Validad relación elementoeducativo - mallaelemento';


--
-- Name: trg_valida_elementoeducativo_paralelo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_elementoeducativo_paralelo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select elementoeducativo_id from academico.paralelo where elementoeducativo_id = NEW.elementoeducativo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Malla que tengan Elemento Educativo asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_elementoeducativo_paralelo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_elementoeducativo_paralelo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_elementoeducativo_paralelo() IS 'Validad relación elementoeducativo - paralelo';


--
-- Name: trg_valida_elementoeducativo_prerequisitoelemento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_elementoeducativo_prerequisitoelemento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select elementoeducativo_id from academico.prerequisitoelemento where elementoeducativo_id = NEW.elementoeducativo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Elementos Educativos que tengan Prerequisitos asociados'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_elementoeducativo_prerequisitoelemento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_elementoeducativo_prerequisitoelemento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_elementoeducativo_prerequisitoelemento() IS 'Validad relación elementoeducativo - prerequisitoelemento';


--
-- Name: trg_valida_elementointegra_mallaelemento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_elementointegra_mallaelemento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select mallaelemento_id from academico.mallaelemento where mallaelemento_id = NEW.mallaelemento_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Elemento Integrado a una Malla Elemento inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_elementointegra_mallaelemento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_elementointegra_mallaelemento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_elementointegra_mallaelemento() IS 'Validad relación elementointegra - mallaelemento';


--
-- Name: trg_valida_eslocal_ciudad(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_eslocal_ciudad() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT') then
	begin
		if exists (select eslocal from academico.ciudad where eslocal = true and activo = 'S')  and NEW.eslocal = true then
		begin
			raise exception 'Ya existe una Ciudad definida como Local';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	elsif (TG_OP = 'UPDATE') then
		if exists (select eslocal from academico.ciudad where eslocal = true and activo = 'S') and (NEW.eslocal = true) and (OLD.ciudad_id <> NEW.ciudad_id) then
		begin
			raise exception 'Ya existe una Ciudad definida como Local';
			return null;
		end;
		else
			return NEW;
		end if;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_eslocal_ciudad() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_eslocal_ciudad(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_eslocal_ciudad() IS 'Verifica Ciudad repetidos campo eslocal';


--
-- Name: trg_valida_eslocal_idioma(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_eslocal_idioma() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT') then
	begin
		if exists (select eslocal from academico.idioma where eslocal = true and activo = 'S')  and NEW.eslocal = true then
		begin
			raise exception 'Ya existe un Idioma definido como Local';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	elsif (TG_OP = 'UPDATE') then
		if exists (select eslocal from academico.idioma where eslocal = true and activo = 'S') and (NEW.eslocal = true) and (OLD.idioma_id <> NEW.idioma_id) then
		begin
			raise exception 'Ya existe un Idioma definido como Local';
			return null;
		end;
		else
			return NEW;
		end if;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_eslocal_idioma() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_eslocal_idioma(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_eslocal_idioma() IS 'Verifica Idioma repetidos campo eslocal';


--
-- Name: trg_valida_eslocal_nacionalidad(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_eslocal_nacionalidad() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT') then
	begin
		if exists (select eslocal from academico.nacionalidad where eslocal = true and activo = 'S')  and NEW.eslocal = true then
		begin
			raise exception 'Ya existe una Nacionalidad definida como Local';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	elsif (TG_OP = 'UPDATE') then
	begin
		if ((select nacionalidad_id from academico.nacionalidad where eslocal = true and activo = 'S') <> NEW.nacionalidad_id) and OLD.eslocal <> NEW.eslocal then
		begin
			raise exception 'Ya existe una Nacionalidad definida como Local';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_eslocal_nacionalidad() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_eslocal_nacionalidad(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_eslocal_nacionalidad() IS 'Verifica Nacionalidad repetidos campo eslocal';


--
-- Name: trg_valida_eslocal_pais(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_eslocal_pais() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT') then
	begin
		if exists (select eslocal from academico.pais where eslocal = true and activo = 'S' )  and NEW.eslocal = true  then
		begin
			raise exception 'Ya existe un País definido como Local';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	elsif (TG_OP = 'UPDATE') then
	begin
		if exists (select eslocal from academico.pais where eslocal = true and activo = 'S') and (NEW.eslocal = true) and (OLD.pais_id <> NEW.pais_id) then
		begin
			raise exception 'Ya existe un País definido como Local';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_eslocal_pais() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_eslocal_pais(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_eslocal_pais() IS 'Verifica Pais repetidos campo eslocal';


--
-- Name: trg_valida_eslocal_provincia(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_eslocal_provincia() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT') then
	begin
		if exists (select eslocal from academico.provincia where eslocal = true and activo = 'S') and NEW.eslocal = true then
		begin
			raise exception 'Ya existe una Provincia definida como Local';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	elsif(TG_OP = 'UPDATE') then
	begin
		if exists (select eslocal from academico.provincia where eslocal = true and activo = 'S') and (NEW.eslocal = true) and (OLD.provincia_id <> NEW.provincia_id) then
		begin
			raise exception 'Ya existe una Provincia definida como Local';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_eslocal_provincia() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_eslocal_provincia(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_eslocal_provincia() IS 'Verifica Provincia repetidos campo eslocal';


--
-- Name: trg_valida_estado_aniolectivo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_estado_aniolectivo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
  
  BEGIN
	if (NEW.estado_id = 3 and (TG_OP = 'INSERT' OR TG_OP = 'UPDATE')) then
	begin
		if exists (select anio_lectivo_id from academico.anio_lectivo where estado_id = 3 and activo = 'S' and entidad_educativa = NEW.entidad_educativa  and anio_lectivo_id <> NEW.anio_lectivo_id) then
		begin
			raise exception 'No puede haber varios años lectivos con el estado Abierto'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;
$$;


ALTER FUNCTION academico.trg_valida_estado_aniolectivo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_estado_aniolectivo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_estado_aniolectivo() IS 'Verifica que un solo año lectivo tenga el estado_id = 3';


--
-- Name: trg_valida_estado_parcial(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_estado_parcial() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
	
  BEGIN
	if (NEW.estado_id = 3 and (TG_OP = 'INSERT' OR TG_OP = 'UPDATE')) then
	begin
		if exists (select parcial_id from academico.parcial where periodo_id = NEW.periodo_id and estado_id = 3 and activo = 'S') then
		begin
			raise exception 'No puede haber varios Parciales con el estado Abierto en un mismo Periodo'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_estado_parcial() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_estado_parcial(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_estado_parcial() IS 'Verifica que un solo parcial tenga el estado_id = 3 en un mismo periodo';


--
-- Name: trg_valida_estado_periodo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_estado_periodo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
	
  BEGIN
	if (NEW.estado_id = 3 and (TG_OP = 'INSERT' OR TG_OP = 'UPDATE')) then
	begin
		if exists (select periodo_id from academico.periodo where anio_lectivo_id = NEW.anio_lectivo_id and estado_id = 3 and activo = 'S' and NEW.periodo_id <> OLD.periodo_id) then
		begin
			raise exception 'No puede haber varios Periodos con el estado Abierto en un mismo Año Lectivo'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_estado_periodo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_estado_periodo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_estado_periodo() IS 'Verifica que un solo periodo tenga el estado_id = 3 en un mismo año lectivo';


--
-- Name: trg_valida_estadocivil_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_estadocivil_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select estadocivil_id from academico.persona where estadocivil_id = NEW.estadocivil_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Estado Civil que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_estadocivil_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_estadocivil_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_estadocivil_persona() IS 'Validad relación estadocivil - persona';


--
-- Name: trg_valida_estadoid_ambito0(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_estadoid_ambito0() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select estado_id from seguridad.estado where estado_id = NEW.estado_id and ambito = 0) then
		begin
			raise exception 'Valor no válido para el campo estado'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_estadoid_ambito0() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_estadoid_ambito0(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_estadoid_ambito0() IS 'Valida ámbito del campo estado';


--
-- Name: trg_valida_estadoid_ambito1(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_estadoid_ambito1() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select estado_id from seguridad.estado where estado_id = NEW.estado_id and ambito = 1) then
		begin
			raise exception 'Valor no válido para el campo estado'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_estadoid_ambito1() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_estadoid_ambito1(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_estadoid_ambito1() IS 'Valida ámbito del campo estado';


--
-- Name: trg_valida_estadoid_ambito2(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_estadoid_ambito2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select estado_id from seguridad.estado where estado_id = NEW.estado_id and ambito = 2) then
		begin
			raise exception 'Valor no válido para el campo estado'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_estadoid_ambito2() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_estadoid_ambito2(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_estadoid_ambito2() IS 'Valida ámbito del campo estado';


--
-- Name: trg_valida_estadoid_ambito3(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_estadoid_ambito3() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select estado_id from seguridad.estado where estado_id = NEW.estado_id and ambito = 3) then
		begin
			raise exception 'Valor no válido para el campo estado'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_estadoid_ambito3() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_estadoid_ambito3(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_estadoid_ambito3() IS 'Valida ámbito del campo estado';


--
-- Name: trg_valida_estadoid_ambito4(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_estadoid_ambito4() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select estado_id from seguridad.estado where estado_id = NEW.estado_id and ambito = 4) then
		begin
			raise exception 'Valor no válido para el campo estado'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_estadoid_ambito4() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_estadoid_ambito4(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_estadoid_ambito4() IS 'Valida ámbito del campo estado';


--
-- Name: trg_valida_estadoid_ambito6(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_estadoid_ambito6() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select estado_id from seguridad.estado where estado_id = NEW.estado_id and ambito = 6) then
		begin
			raise exception 'Valor no válido para el campo estado'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;
$$;


ALTER FUNCTION academico.trg_valida_estadoid_ambito6() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_estadoid_ambito6(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_estadoid_ambito6() IS 'Valida ámbito del campo estado';


--
-- Name: trg_valida_estudiante_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_estudiante_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select persona_id from academico.persona where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Estudiante a una Persona inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_estudiante_persona() OWNER TO attinae_user;

--
-- Name: trg_valida_etnia_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_etnia_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select etnia_id from academico.persona where etnia_id = NEW.etnia_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Etnia que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_etnia_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_etnia_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_etnia_persona() IS 'Validad relación etnia - persona';


--
-- Name: trg_valida_facultad_carrera(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_facultad_carrera() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select facultad_id from academico.carrera where facultad_id = NEW.facultad_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Facultaddes que tengan Carreras asociadas'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_facultad_carrera() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_facultad_carrera(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_facultad_carrera() IS 'Validad relación facultad - carrera';


--
-- Name: trg_valida_formapago_ordenpago(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_formapago_ordenpago() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select formapago_id from academico.ordenpago where formapago_id = NEW.formapago_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Forma de Pago que tengan Órdenes de Pago asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_formapago_ordenpago() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_formapago_ordenpago(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_formapago_ordenpago() IS 'Validad relación formapago - ordenpago';


--
-- Name: trg_valida_identidadgenero_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_identidadgenero_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select identidadgenero_id from academico.persona where identidadgenero_id = NEW.identidadgenero_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Identidad Género que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_identidadgenero_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_identidadgenero_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_identidadgenero_persona() IS 'Validad relación identidadgenero - persona';


--
-- Name: trg_valida_idioma_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_idioma_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select idioma_id from academico.persona where idioma_id = NEW.idioma_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Idioma que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_idioma_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_idioma_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_idioma_persona() IS 'Validad relación idioma - persona';


--
-- Name: trg_valida_jornada_cursonivelacionjornada(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_jornada_cursonivelacionjornada() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select jornada_id from academico.cursonivelacionjornada where jornada_id = NEW.jornada_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Jornada que tengan Curso Nivelación Jornada asociada';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_jornada_cursonivelacionjornada() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_jornada_cursonivelacionjornada(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_jornada_cursonivelacionjornada() IS 'Validad relación jornada - cursonivelacionjornada';


--
-- Name: trg_valida_jornada_paralelo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_jornada_paralelo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select paralelo_id from academico.paralelo where jornada_id = NEW.jornada_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Jornada que tengan Paralelos asociados'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_jornada_paralelo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_jornada_paralelo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_jornada_paralelo() IS 'Validad relación jornada - paralelo';


--
-- Name: trg_valida_malla_carrera(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_malla_carrera() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select carrera_id from academico.carrera where carrera_id = NEW.carrera_id and NEW. activo = 'S') then
		begin
			raise exception 'No se puede asociar una Malla a una Carrera inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_malla_carrera() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_malla_carrera(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_malla_carrera() IS 'Validad relación malla - carrera';


--
-- Name: trg_valida_malla_cursocertificacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_malla_cursocertificacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select cursocertificacion_id from academico.cursocertificacion where cursocertificacion_id = NEW.instancia_id and activo = 'S') and (NEW.tipoinstancia = 'CC') then
		begin
			raise exception 'No se puede asociar una Malla a un Curso Certificación inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_malla_cursocertificacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_malla_cursocertificacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_malla_cursocertificacion() IS 'Validad relación malla - cursocertificacion';


--
-- Name: trg_valida_malla_mallaelemento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_malla_mallaelemento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select malla_id from academico.mallaelemento where malla_id = NEW.malla_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Mallas que tengan Elementos Académicos asociados';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_malla_mallaelemento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_malla_mallaelemento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_malla_mallaelemento() IS 'Validad relación malla - mallaelemento';


--
-- Name: trg_valida_malla_paralelo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_malla_paralelo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select malla_id from academico.paralelo where malla_id = NEW.malla_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Malla que tengan Paralelo asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_malla_paralelo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_malla_paralelo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_malla_paralelo() IS 'Validad relación malla - paralelo';


--
-- Name: trg_valida_mallaciclo_ciclo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_mallaciclo_ciclo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select ciclo_id from academico.ciclo where ciclo_id = NEW.ciclo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Malla a un Ciclo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_mallaciclo_ciclo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_mallaciclo_ciclo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_mallaciclo_ciclo() IS 'Validad relación mallaciclo - ciclo';


--
-- Name: trg_valida_mallaciclo_malla(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_mallaciclo_malla() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select malla_id from academico.malla where malla_id = NEW.malla_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Ciclo a una Malla inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_mallaciclo_malla() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_mallaciclo_malla(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_mallaciclo_malla() IS 'Validad relación mallaciclo - malla';


--
-- Name: trg_valida_mallaciclo_mallaciclo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_mallaciclo_mallaciclo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select malla_id, ciclo_id from academico.mallaciclo where malla_id = NEW.malla_id and ciclo_id = NEW.ciclo_id and activo = 'S') then
		begin
			raise exception 'Asignación Malla - Ciclo ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_mallaciclo_mallaciclo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_mallaciclo_mallaciclo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_mallaciclo_mallaciclo() IS 'Verifica MallaCiclo repetidas campo malla_id ciclo_id';


--
-- Name: trg_valida_mallaciclo_mallaelemento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_mallaciclo_mallaelemento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select mallaciclo_id from academico.mallaelemento where mallaciclo_id = NEW.mallaciclo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Mallas Ciclos que tengan Elementos en Malla asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_mallaciclo_mallaelemento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_mallaciclo_mallaelemento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_mallaciclo_mallaelemento() IS 'Validad relación mallaciclo - mallaelemento';


--
-- Name: trg_valida_mallaciclo_nucleoproblemico(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_mallaciclo_nucleoproblemico() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select nucleoproblemico_id from academico.nucleoproblemico where nucleoproblemico_id = NEW.nucleoproblemico_id and activo = 'S') and NEW.nucleoproblemico_id is not null then
		begin
			raise exception 'No se puede asociar una Malla Ciclo a un Nucleo Problémico inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_mallaciclo_nucleoproblemico() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_mallaciclo_nucleoproblemico(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_mallaciclo_nucleoproblemico() IS 'Validad relación mallaciclo - nucleoproblemico';


--
-- Name: trg_valida_mallaciclo_unidadformacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_mallaciclo_unidadformacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select unidadformacion_id from academico.unidadformacion where unidadformacion_id = NEW.unidadformacion_id and activo = 'S') and NEW.unidadformacion_id is not null then
		begin
			raise exception 'No se puede asociar una Malla Ciclo a una Unidad de Formación inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_mallaciclo_unidadformacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_mallaciclo_unidadformacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_mallaciclo_unidadformacion() IS 'Validad relación mallaciclo - tipociclo';


--
-- Name: trg_valida_mallaelemento_campoformacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_mallaelemento_campoformacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select campoformacion_id from academico.campoformacion where campoformacion_id = NEW.campoformacion_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un registro de Malla Elemento Educativo a un Campo de Formación inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_mallaelemento_campoformacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_mallaelemento_campoformacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_mallaelemento_campoformacion() IS 'Validad relación mallaelemento - ciclo';


--
-- Name: trg_valida_mallaelemento_ciclo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_mallaelemento_ciclo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select ciclo_id from academico.ciclo where ciclo_id = NEW.ciclo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un registro de Malla Elemento Educativo a un Ciclo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_mallaelemento_ciclo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_mallaelemento_ciclo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_mallaelemento_ciclo() IS 'Validad relación mallaelemento - ciclo';


--
-- Name: trg_valida_mallaelemento_elementoeducativo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_mallaelemento_elementoeducativo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select elementoeducativo_id from academico.elementoeducativo where elementoeducativo_id = NEW.elementoeducativo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un registro de Malla Elemento Educativo a un Elemento Educativo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_mallaelemento_elementoeducativo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_mallaelemento_elementoeducativo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_mallaelemento_elementoeducativo() IS 'Validad relación mallaelemento - elementoeducativo';


--
-- Name: trg_valida_mallaelemento_elementointegra(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_mallaelemento_elementointegra() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select mallaelemento_id from academico.elementointegra where mallaelemento_id = NEW.mallaelemento_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Malla Elemento que tengan Elementos Integrados asociados'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_mallaelemento_elementointegra() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_mallaelemento_elementointegra(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_mallaelemento_elementointegra() IS 'Validad relación mallaelemento - elementointegra';


--
-- Name: trg_valida_mallaelemento_malla(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_mallaelemento_malla() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select malla_id from academico.malla where malla_id = NEW.malla_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Elemento Académico a una Malla inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_mallaelemento_malla() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_mallaelemento_malla(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_mallaelemento_malla() IS 'Validad relación mallaelemento - malla';


--
-- Name: trg_valida_mallaelemento_mallaciclo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_mallaelemento_mallaciclo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select mallaciclo_id from academico.mallaciclo where mallaciclo_id = NEW.mallaciclo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Elemento Educativo en Malla a un Ciclo no programado en Malla';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_mallaelemento_mallaciclo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_mallaelemento_mallaciclo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_mallaelemento_mallaciclo() IS 'Validad relación mallaelemento - mallaciclo';


--
-- Name: trg_valida_mallaelemento_modoevaluacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_mallaelemento_modoevaluacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select modoevaluacion_id from academico.modoevaluacion where modoevaluacion_id = NEW.modoevaluacion_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un registro de Malla Elemento Educativo a un Modo Evaluación inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_mallaelemento_modoevaluacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_mallaelemento_modoevaluacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_mallaelemento_modoevaluacion() IS 'Validad relación mallaelemento - modoevaluacion';


--
-- Name: trg_valida_mallaelemento_prerequisitoelemento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_mallaelemento_prerequisitoelemento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select mallaelemento_id from academico.prerequisitoelemento where mallaelemento_id = NEW.mallaelemento_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Malla Elemento que tengan Prerequisitos asociados'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_mallaelemento_prerequisitoelemento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_mallaelemento_prerequisitoelemento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_mallaelemento_prerequisitoelemento() IS 'Validad relación mallaelemento - prerequisitoelemento';


--
-- Name: trg_valida_modoevaluacion_detallemodoevaluacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_modoevaluacion_detallemodoevaluacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select modoevaluacion_id from academico.detallemodoevaluacion where modoevaluacion_id = NEW.modoevaluacion_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Modo Evaluación que tengan Detalles asociados'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_modoevaluacion_detallemodoevaluacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_modoevaluacion_detallemodoevaluacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_modoevaluacion_detallemodoevaluacion() IS 'Validad relación modoevaluacion - detallemodoevaluacion';


--
-- Name: trg_valida_modoevaluacion_mallaelemento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_modoevaluacion_mallaelemento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select modoevaluacion_id from academico.mallaelemento where modoevaluacion_id = NEW.modoevaluacion_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Modo Evaluación que tengan registros asociados en Malla'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_modoevaluacion_mallaelemento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_modoevaluacion_mallaelemento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_modoevaluacion_mallaelemento() IS 'Validad relación modoevaluacion - mallaelemento';


--
-- Name: trg_valida_nombre_elementoeducativo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_nombre_elementoeducativo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select nombre from academico.elementoeducativo where nombre = NEW.nombre and activo = 'S') and (OLD.nombre <> NEW.nombre) then
		begin
			raise exception 'Nombre de Materia ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_nombre_elementoeducativo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_nombre_elementoeducativo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_nombre_elementoeducativo() IS 'Verifica Materia repetidas campo nombre';


--
-- Name: trg_valida_nombre_facultad(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_nombre_facultad() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if exists (select nombre from academico.facultad where nombre = NEW.nombre and activo = 'S') and (OLD.nombre <> NEW.nombre)then
		begin
			raise exception 'Nombre de Facultad ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_nombre_facultad() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_nombre_facultad(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_nombre_facultad() IS 'Verifica Facultad repetidas campo nombre';


--
-- Name: trg_valida_nombre_pais(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_nombre_pais() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT') then
	begin
		if exists (select nombre from academico.pais where nombre = NEW.nombre and activo = 'S') then
		begin
			raise exception 'Descripción ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	elsif (TG_OP = 'UPDATE') then
	begin
		if exists (select nombre from academico.pais where nombre = NEW.nombre and activo = 'S') and (OLD.nombre <> NEW.nombre) then
		begin
			raise exception 'Descripción ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;	
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_nombre_pais() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_nombre_pais(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_nombre_pais() IS 'Verifica Pais repetidos campo nombre';


--
-- Name: trg_valida_nucleoproblemico_carrera(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_nucleoproblemico_carrera() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select carrera_id from academico.carrera where carrera_id = NEW.carrera_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Núcleo Problémico a una Carrera inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_nucleoproblemico_carrera() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_nucleoproblemico_carrera(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_nucleoproblemico_carrera() IS 'Validad relación nucleoproblemico - carrera';


--
-- Name: trg_valida_nucleoproblemico_mallaciclo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_nucleoproblemico_mallaciclo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select nucleoproblemico_id from academico.mallaciclo where nucleoproblemico_id = NEW.nucleoproblemico_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Núcleo Problémico que tengan Mallas Ciclos asociados'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_nucleoproblemico_mallaciclo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_nucleoproblemico_mallaciclo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_nucleoproblemico_mallaciclo() IS 'Validad relación nucleoproblemico - mallaciclo';


--
-- Name: trg_valida_operadora_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_operadora_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select operadora_fk from academico.persona where operadora_fk = NEW.operadora_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Operadora que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;
$$;


ALTER FUNCTION academico.trg_valida_operadora_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_operadora_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_operadora_persona() IS 'Validad relación operadora - persona';


--
-- Name: trg_valida_ordenpago_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_ordenpago_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select persona_id from academico.persona where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Orden de Pago a una Persona inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_ordenpago_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_ordenpago_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_ordenpago_persona() IS 'Validad relación ordenpago - persona';


--
-- Name: trg_valida_ordenpago_registronivelacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_ordenpago_registronivelacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if ((TG_OP = 'INSERT' OR TG_OP = 'UPDATE') and NEW.registronivelacion_id is not null) then
	begin
		if not exists (select registronivelacion_id from academico.registronivelacion where registronivelacion_id = NEW.registronivelacion_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Orden de Pago a un Registro Nivelación inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_ordenpago_registronivelacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_ordenpago_registronivelacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_ordenpago_registronivelacion() IS 'Validad relación ordenpago - registronivelacion';


--
-- Name: trg_valida_pais_provincia(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_pais_provincia() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select pais_id from academico.provincia where pais_id = NEW.pais_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar País que tengan Provincia asociada';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_pais_provincia() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_pais_provincia(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_pais_provincia() IS 'Validad relación pais - provincia';


--
-- Name: trg_valida_pais_unidadeducativa(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_pais_unidadeducativa() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select pais_id from academico.unidadeducativa where pais_id = NEW.pais_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar País que tengan Unidad Educativa asociada';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_pais_unidadeducativa() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_pais_unidadeducativa(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_pais_unidadeducativa() IS 'Validad relación pais - unidadeducativa';


--
-- Name: trg_valida_paisdomicilio_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_paisdomicilio_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select paisdomicilio_id from academico.persona where paisdomicilio_id = NEW.pais_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar País que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_paisdomicilio_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_paisdomicilio_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_paisdomicilio_persona() IS 'Validad relación paisdomicilio - persona';


--
-- Name: trg_valida_paisnacimiento_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_paisnacimiento_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select paisnacimiento_id from academico.persona where paisnacimiento_id = NEW.pais_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar País que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_paisnacimiento_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_paisnacimiento_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_paisnacimiento_persona() IS 'Validad relación paisnacimiento - persona';


--
-- Name: trg_valida_paralelo_aniolectivo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_paralelo_aniolectivo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select anio_lectivo_id from academico.anio_lectivo where anio_lectivo_id = NEW.anio_lectivo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Paralelo a un Año Lectivo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_paralelo_aniolectivo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_paralelo_aniolectivo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_paralelo_aniolectivo() IS 'Validad relación paralelo - a';


--
-- Name: trg_valida_paralelo_carrera(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_paralelo_carrera() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select carrera_id from academico.carrera where carrera_id = NEW.carrera_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Paralelo a una Carrera inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_paralelo_carrera() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_paralelo_carrera(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_paralelo_carrera() IS 'Validad relación paralelo - carrera';


--
-- Name: trg_valida_paralelo_ciclo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_paralelo_ciclo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select ciclo_id from academico.ciclo where ciclo_id = NEW.ciclo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Paralelo a un Ciclo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_paralelo_ciclo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_paralelo_ciclo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_paralelo_ciclo() IS 'Validad relación paralelo - ciclo';


--
-- Name: trg_valida_paralelo_elementoeducativo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_paralelo_elementoeducativo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select elementoeducativo_id from academico.elementoeducativo where elementoeducativo_id = NEW.elementoeducativo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Paralelo a un Elemento Educativo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_paralelo_elementoeducativo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_paralelo_elementoeducativo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_paralelo_elementoeducativo() IS 'Validad relación paralelo - elementoeducativo';


--
-- Name: trg_valida_paralelo_jornada(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_paralelo_jornada() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select jornada_id from academico.jornada where jornada_id = NEW.jornada_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Paralelo a una Jornada inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_paralelo_jornada() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_paralelo_jornada(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_paralelo_jornada() IS 'Validad relación paralelo - jornada';


--
-- Name: trg_valida_paralelo_malla(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_paralelo_malla() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select malla_id from academico.malla where malla_id = NEW.malla_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Paralelo a una Malla inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_paralelo_malla() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_paralelo_malla(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_paralelo_malla() IS 'Validad relación paralelo - malla';


--
-- Name: trg_valida_paralelo_paralelodocente(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_paralelo_paralelodocente() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select paralelo_id from academico.paralelodocente where paralelo_id = NEW.paralelo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar un Paralelo que tengan Docentes asignados';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;
$$;


ALTER FUNCTION academico.trg_valida_paralelo_paralelodocente() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_paralelo_paralelodocente(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_paralelo_paralelodocente() IS 'Validad relación paralelo - paralelodocente';


--
-- Name: trg_valida_paralelo_periodo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_paralelo_periodo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select periodo_id from academico.periodo where periodo_id = NEW.periodo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Paralelo a un Periodo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_paralelo_periodo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_paralelo_periodo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_paralelo_periodo() IS 'Validad relación paralelo - periodo';


--
-- Name: trg_valida_paralelodocente_paralelo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_paralelodocente_paralelo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select paralelo_id from academico.paralelo where paralelo_id = NEW.paralelo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Paralelo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;

$$;


ALTER FUNCTION academico.trg_valida_paralelodocente_paralelo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_paralelodocente_paralelo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_paralelodocente_paralelo() IS 'Validad relación paralelodocente - paralelo';


--
-- Name: trg_valida_paralelodocente_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_paralelodocente_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select persona_id from academico.persona where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Docente inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;
$$;


ALTER FUNCTION academico.trg_valida_paralelodocente_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_paralelodocente_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_paralelodocente_persona() IS 'Validad relación paralelodocente - persona';


--
-- Name: trg_valida_parcial_periodo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_parcial_periodo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select periodo_id from academico.periodo where periodo_id = NEW.periodo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Parcial a un Periodo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_parcial_periodo() OWNER TO attinae_user;

--
-- Name: trg_valida_parroquia_ciudad(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_parroquia_ciudad() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select ciudad_id from academico.ciudad where ciudad_id = NEW.ciudad_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Parroquia a una Ciudad inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_parroquia_ciudad() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_parroquia_ciudad(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_parroquia_ciudad() IS 'Validad relación parroquia - ciudad';


--
-- Name: trg_valida_parroquiadomicilio_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_parroquiadomicilio_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select parroquiadomicilio_id from academico.persona where parroquiadomicilio_id = NEW.parroquia_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Parroquia que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_parroquiadomicilio_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_parroquiadomicilio_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_parroquiadomicilio_persona() IS 'Validad relación parroquiadomicilio - persona';


--
-- Name: trg_valida_parroquianacimiento_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_parroquianacimiento_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select parroquianacimiento_id from academico.persona where parroquianacimiento_id = NEW.parroquia_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Parroquia que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_parroquianacimiento_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_parroquianacimiento_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_parroquianacimiento_persona() IS 'Validad relación parroquianacimiento - persona';


--
-- Name: trg_valida_periodo_aniolectivo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_periodo_aniolectivo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select anio_lectivo_id from academico.anio_lectivo where anio_lectivo_id = NEW.anio_lectivo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Periodo a un Año Lectivo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_periodo_aniolectivo() OWNER TO attinae_user;

--
-- Name: trg_valida_periodo_cursonivelacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_periodo_cursonivelacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select periodo_id from academico.cursonivelacion where periodo_id = NEW.periodo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Periodo que tengan Curso Nivelación asociada';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_periodo_cursonivelacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_periodo_cursonivelacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_periodo_cursonivelacion() IS 'Validad relación periodo - cursonivelacion';


--
-- Name: trg_valida_periodo_paralelo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_periodo_paralelo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select periodo_id from academico.paralelo where periodo_id = NEW.periodo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Periodo que tengan Paralelo asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_periodo_paralelo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_periodo_paralelo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_periodo_paralelo() IS 'Validad relación periodo - paralelo';


--
-- Name: trg_valida_periodo_parcial(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_periodo_parcial() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select parcial_id from academico.parcial where periodo_id = NEW.periodo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Periodos que tengan Parciales asociados'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_periodo_parcial() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_periodo_parcial(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_periodo_parcial() IS 'Validad relación periodo - parcial';


--
-- Name: trg_valida_periodo_requisitoaspiranteperiodo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_periodo_requisitoaspiranteperiodo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select periodo_id from academico.requisitoaspiranteperiodo where periodo_id = NEW.periodo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Periodo que tengan Requisito asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_periodo_requisitoaspiranteperiodo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_periodo_requisitoaspiranteperiodo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_periodo_requisitoaspiranteperiodo() IS 'Validad relación periodo - requisitoaspiranteperiodo';


--
-- Name: trg_valida_persona_aspirante(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_aspirante() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select persona_id from academico.aspirante where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Persona que tengan Aspirante asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_aspirante() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_aspirante(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_aspirante() IS 'Validad relación persona - aspirante';


--
-- Name: trg_valida_persona_ciudaddomicilio(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_ciudaddomicilio() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if NEW.ciudaddomicilio_id is null then
			return NEW;
		else
		begin
			if not exists (select ciudad_id from academico.ciudad where ciudad_id = NEW.ciudaddomicilio_id and activo = 'S') then
			begin
				raise exception 'No se puede asociar una Persona a una Ciudad inexistente'; 
				return null;
			end;
			else
				return NEW;
			end if;
		end;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_ciudaddomicilio() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_ciudaddomicilio(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_ciudaddomicilio() IS 'Validad relación persona - ciudaddomicilio';


--
-- Name: trg_valida_persona_ciudadnacimiento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_ciudadnacimiento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if NEW.ciudadnacimiento_id is null then
			return NEW;
		else
		begin
			if not exists (select ciudad_id from academico.ciudad where ciudad_id = NEW.ciudadnacimiento_id and activo = 'S') then
			begin
				raise exception 'No se puede asociar una Persona a una Ciudad inexistente'; 
				return null;
			end;
			else
				return NEW;
			end if;
		end;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_ciudadnacimiento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_ciudadnacimiento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_ciudadnacimiento() IS 'Validad relación persona - ciudadnacimiento';


--
-- Name: trg_valida_persona_docente(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_docente() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select persona_id from academico.docente where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Persona que tengan Docente asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;
$$;


ALTER FUNCTION academico.trg_valida_persona_docente() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_docente(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_docente() IS 'Validad relación persona - docente';


--
-- Name: trg_valida_persona_estadocivil(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_estadocivil() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select estadocivil_id from academico.estadocivil where estadocivil_id = NEW.estadocivil_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Persona a un Estado Civil inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_estadocivil() OWNER TO attinae_user;

--
-- Name: trg_valida_persona_estudiante(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_estudiante() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select persona_id from academico.estudiante where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Persona que tengan Estudiante asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_estudiante() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_estudiante(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_estudiante() IS 'Validad relación persona - estudiante';


--
-- Name: trg_valida_persona_etnia(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_etnia() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if NEW.etnia_id is null then
			return NEW;
		else
		begin
			if not exists (select etnia_id from academico.etnia where etnia_id = NEW.etnia_id and activo = 'S') then
			begin
				raise exception 'No se puede asociar una Persona a una Etnia inexistente'; 
				return null;
			end;
			else
				return NEW;
			end if;
		end;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_etnia() OWNER TO attinae_user;

--
-- Name: trg_valida_persona_identidadgenero(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_identidadgenero() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if NEW.identidadgenero_id is null then
			return NEW;
		else
		begin
			if not exists (select identidadgenero_id from academico.identidadgenero where identidadgenero_id = NEW.identidadgenero_id and activo = 'S') then
			begin
				raise exception 'No se puede asociar una Persona a una Identidad Género inexistente'; 
				return null;
			end;
			else
				return NEW;
			end if;
		end;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_identidadgenero() OWNER TO attinae_user;

--
-- Name: trg_valida_persona_idioma(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_idioma() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select idioma_id from academico.idioma where idioma_id = NEW.idioma_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Persona a un Idioma inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_idioma() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_idioma(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_idioma() IS 'Validad relación persona - idioma';


--
-- Name: trg_valida_persona_operadora(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_operadora() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select operadora_id from academico.operadora where operadora_id = NEW.operadora_fk and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Persona a un Operadora inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;
$$;


ALTER FUNCTION academico.trg_valida_persona_operadora() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_operadora(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_operadora() IS 'Validad relación persona - operadora';


--
-- Name: trg_valida_persona_ordenpago(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_ordenpago() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select persona_id from academico.ordenpago where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Persona que tengan Órdenes de Pago asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_ordenpago() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_ordenpago(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_ordenpago() IS 'Validad relación persona - ordenpago';


--
-- Name: trg_valida_persona_paisdomicilio(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_paisdomicilio() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if NEW.paisdomicilio_id is null then
			return NEW;
		else
		begin
			if not exists (select pais_id from academico.pais where pais_id = NEW.paisdomicilio_id and activo = 'S') then
			begin
				raise exception 'No se puede asociar una Persona a un País inexistente'; 
				return null;
			end;
			else
				return NEW;
			end if;
		end;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_paisdomicilio() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_paisdomicilio(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_paisdomicilio() IS 'Validad relación persona - paisdomicilio';


--
-- Name: trg_valida_persona_paisnacimiento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_paisnacimiento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if NEW.paisnacimiento_id is null then
			return NEW;
		else
		begin
			if not exists (select pais_id from academico.pais where pais_id = NEW.paisnacimiento_id and activo = 'S') then
			begin
				raise exception 'No se puede asociar una Persona a un País inexistente'; 
				return null;
			end;
			else
				return NEW;
			end if;
		end;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_paisnacimiento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_paisnacimiento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_paisnacimiento() IS 'Validad relación persona - paisnacimiento';


--
-- Name: trg_valida_persona_paralelodocente(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_paralelodocente() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select persona_id from academico.paralelodocente where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar un Docente que tengan Paralelos asignados';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;
$$;


ALTER FUNCTION academico.trg_valida_persona_paralelodocente() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_paralelodocente(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_paralelodocente() IS 'Validad relación persona - paralelodocente';


--
-- Name: trg_valida_persona_parroquiadomicilio(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_parroquiadomicilio() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if NEW.parroquiadomicilio_id is null then
			return NEW;
		else
		begin
			if not exists (select parroquia_id from academico.parroquia where parroquia_id = NEW.parroquiadomicilio_id and activo = 'S') then
			begin
				raise exception 'No se puede asociar una Persona a una Parroquia inexistente'; 
				return null;
			end;
			else
				return NEW;
			end if;
		end;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_parroquiadomicilio() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_parroquiadomicilio(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_parroquiadomicilio() IS 'Validad relación persona - parroquiadomicilio';


--
-- Name: trg_valida_persona_parroquianacimiento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_parroquianacimiento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if NEW.parroquianacimiento_id is null then
			return NEW;
		else
		begin
			if not exists (select parroquia_id from academico.parroquia where parroquia_id = NEW.parroquianacimiento_id and activo = 'S') then
			begin
				raise exception 'No se puede asociar una Persona a una Parroquia inexistente'; 
				return null;
			end;
			else
				return NEW;
			end if;
		end;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_parroquianacimiento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_parroquianacimiento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_parroquianacimiento() IS 'Validad relación persona - parroquianacimiento';


--
-- Name: trg_valida_persona_provinciadomicilio(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_provinciadomicilio() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if NEW.provinciadomicilio_id is null then
			return NEW;
		else
		begin
			if not exists (select provincia_id from academico.provincia where provincia_id = NEW.provinciadomicilio_id and activo = 'S') then
			begin
				raise exception 'No se puede asociar una Persona a una Provincia inexistente'; 
				return null;
			end;
			else
				return NEW;
			end if;
		end;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_provinciadomicilio() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_provinciadomicilio(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_provinciadomicilio() IS 'Validad relación persona - provinciadomicilio';


--
-- Name: trg_valida_persona_provincianacimiento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_provincianacimiento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if NEW.provincianacimiento_id is null then
			return NEW;
		else
		begin
			if not exists (select provincia_id from academico.provincia where provincia_id = NEW.provincianacimiento_id and activo = 'S') then
			begin
				raise exception 'No se puede asociar una Persona a una Provincia inexistente'; 
				return null;
			end;
			else
				return NEW;
			end if;
		end;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_provincianacimiento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_provincianacimiento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_provincianacimiento() IS 'Validad relación persona - provincianacimiento';


--
-- Name: trg_valida_persona_sexo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_sexo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select sexo_id from academico.sexo where sexo_id = NEW.sexo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Persona a un Sexo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_sexo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_sexo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_sexo() IS 'Validad relación persona - sexo';


--
-- Name: trg_valida_persona_tipodiscapacidad(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_tipodiscapacidad() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if NEW.tipodiscapacidad_id is null then
			return NEW;
		else
		begin
			if not exists (select tipodiscapacidad_id from academico.tipodiscapacidad where tipodiscapacidad_id = NEW.tipodiscapacidad_id and activo = 'S') then
			begin
				raise exception 'No se puede asociar una Persona a un Tipo Discapacidad inexistente'; 
				return null;
			end;
			else
				return NEW;
			end if;
		end;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_tipodiscapacidad() OWNER TO attinae_user;

--
-- Name: trg_valida_persona_tipodocumento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_persona_tipodocumento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select tipodocumento_id from academico.tipodocumento where tipodocumento_id = NEW.tipodocumento_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Persona a un Tipo Documento inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_persona_tipodocumento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_tipodocumento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_persona_tipodocumento() IS 'Validad relación persona - tipodocumento';


--
-- Name: trg_valida_prerequisitoelemento_elementoeducativo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_prerequisitoelemento_elementoeducativo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select elementoeducativo_id from academico.elementoeducativo where elementoeducativo_id = NEW.elementoeducativo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Prerequisito a un Elemento Educativo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_prerequisitoelemento_elementoeducativo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_prerequisitoelemento_elementoeducativo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_prerequisitoelemento_elementoeducativo() IS 'Validad relación prerequisitoelemento - elementoeducativo';


--
-- Name: trg_valida_prerequisitoelemento_mallaelemento(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_prerequisitoelemento_mallaelemento() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select mallaelemento_id from academico.mallaelemento where mallaelemento_id = NEW.mallaelemento_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Prerequisito a una Malla Elemento inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_prerequisitoelemento_mallaelemento() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_prerequisitoelemento_mallaelemento(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_prerequisitoelemento_mallaelemento() IS 'Validad relación prerequisitoelemento - mallaelemento';


--
-- Name: trg_valida_provincia_ciudad(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_provincia_ciudad() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select provincia_id from academico.ciudad where provincia_id = NEW.provincia_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Provincia que tengan Ciudad asociada';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_provincia_ciudad() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_provincia_ciudad(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_provincia_ciudad() IS 'Validad relación provincia - ciudad';


--
-- Name: trg_valida_provincia_pais(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_provincia_pais() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select pais_id from academico.pais where pais_id = NEW.pais_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Provincia a un País inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_provincia_pais() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_provincia_pais(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_provincia_pais() IS 'Validad relación provincia - pais';


--
-- Name: trg_valida_provinciadomicilio_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_provinciadomicilio_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select provinciadomicilio_id from academico.persona where provinciadomicilio_id = NEW.provincia_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Provincia que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_provinciadomicilio_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_provinciadomicilio_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_provinciadomicilio_persona() IS 'Validad relación provinciadomicilio - persona';


--
-- Name: trg_valida_provincianacimiento_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_provincianacimiento_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select provincianacimiento_id from academico.persona where provincianacimiento_id = NEW.provincia_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Provincia que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_provincianacimiento_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_provincianacimiento_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_provincianacimiento_persona() IS 'Validad relación provincianacimiento - persona';


--
-- Name: trg_valida_registronivelacion_aspirante(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_registronivelacion_aspirante() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select persona_id from academico.aspirante where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Registro Nivelacion a un Aspirante inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_registronivelacion_aspirante() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_registronivelacion_aspirante(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_registronivelacion_aspirante() IS 'Validad relación registronivelacion - aspirante';


--
-- Name: trg_valida_registronivelacion_cursonivelacion(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_registronivelacion_cursonivelacion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select cursonivelacion_id from academico.cursonivelacion where cursonivelacion_id = NEW.cursonivelacion_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Registro Nivelacion a un Curso Nivelación inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_registronivelacion_cursonivelacion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_registronivelacion_cursonivelacion(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_registronivelacion_cursonivelacion() IS 'Validad relación registronivelacion - cursonivelacion';


--
-- Name: trg_valida_registronivelacion_cursonivelacionjornada(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_registronivelacion_cursonivelacionjornada() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select cursonivelacionjornada_id from academico.cursonivelacionjornada where cursonivelacionjornada_id = NEW.cursonivelacionjornada_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Registro Nivelacion a un Curso Nivelación Jornada inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_registronivelacion_cursonivelacionjornada() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_registronivelacion_cursonivelacionjornada(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_registronivelacion_cursonivelacionjornada() IS 'Validad relación registronivelacion - cursonivelacionjornada';


--
-- Name: trg_valida_registronivelacion_ordenpago(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_registronivelacion_ordenpago() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select registronivelacion_id from academico.ordenpago where registronivelacion_id = NEW.registronivelacion_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Registro Nivelación que tengan Órdenes de Pago asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_registronivelacion_ordenpago() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_registronivelacion_ordenpago(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_registronivelacion_ordenpago() IS 'Validad relación registronivelacion - ordenpago';


--
-- Name: trg_valida_registrorequisitoaspirante_aspirante(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_registrorequisitoaspirante_aspirante() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select persona_id from academico.aspirante where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un registro a un Aspirante inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_registrorequisitoaspirante_aspirante() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_registrorequisitoaspirante_aspirante(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_registrorequisitoaspirante_aspirante() IS 'Validad relación registrorequisitoaspirante - aspirante';


--
-- Name: trg_valida_registrorequisitoaspirante_requisito(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_registrorequisitoaspirante_requisito() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select requisito_id from academico.requisito where requisito_id = NEW.requisito_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un registro a un Requisito inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_registrorequisitoaspirante_requisito() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_registrorequisitoaspirante_requisito(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_registrorequisitoaspirante_requisito() IS 'Validad relación registrorequisitoaspirante - requisito';


--
-- Name: trg_valida_registrorequisitoaspirante_requisitoaspiranteperiodo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_registrorequisitoaspirante_requisitoaspiranteperiodo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select requisitoaspiranteperiodo_id from academico.requisitoaspiranteperiodo where requisitoaspiranteperiodo_id = NEW.requisitoaspiranteperiodo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un registro a un Requisito Aspirante inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_registrorequisitoaspirante_requisitoaspiranteperiodo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_registrorequisitoaspirante_requisitoaspiranteperiodo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_registrorequisitoaspirante_requisitoaspiranteperiodo() IS 'Validad relación registrorequisitoaspirante - requisitoaspiranteperiodo';


--
-- Name: trg_valida_requisito_registrorequisitoaspirante(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_requisito_registrorequisitoaspirante() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select requisito_id from academico.registrorequisitoaspirante where requisito_id = NEW.requisito_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Requisito que tengan registro asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_requisito_registrorequisitoaspirante() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_requisito_registrorequisitoaspirante(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_requisito_registrorequisitoaspirante() IS 'Validad relación requisito - registrorequisitoaspirante';


--
-- Name: trg_valida_requisito_requisitoaspiranteperiodo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_requisito_requisitoaspiranteperiodo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select requisito_id from academico.requisitoaspiranteperiodo where requisito_id = NEW.requisito_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Requisito que tengan registro asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_requisito_requisitoaspiranteperiodo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_requisito_requisitoaspiranteperiodo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_requisito_requisitoaspiranteperiodo() IS 'Validad relación requisito - requisitoaspiranteperiodo';


--
-- Name: trg_valida_requisitoaspiranteperiodo_periodo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_requisitoaspiranteperiodo_periodo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select periodo_id from academico.periodo where periodo_id = NEW.periodo_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un Requisito a un Periodo inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_requisitoaspiranteperiodo_periodo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_requisitoaspiranteperiodo_periodo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_requisitoaspiranteperiodo_periodo() IS 'Validad relación requisitoaspiranteperiodo - periodo';


--
-- Name: trg_valida_requisitoaspiranteperiodo_registrorequisitoaspirante(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_requisitoaspiranteperiodo_registrorequisitoaspirante() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select requisitoaspiranteperiodo_id from academico.registrorequisitoaspirante where requisitoaspiranteperiodo_id = NEW.requisitoaspiranteperiodo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Requisito Aspirante que tengan registro asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_requisitoaspiranteperiodo_registrorequisitoaspirante() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_requisitoaspiranteperiodo_registrorequisitoaspirante(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_requisitoaspiranteperiodo_registrorequisitoaspirante() IS 'Validad relación requisitoaspiranteperiodo - registrorequisitoaspirante';


--
-- Name: trg_valida_requisitoaspiranteperiodo_requisito(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_requisitoaspiranteperiodo_requisito() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select requisito_id from academico.requisito where requisito_id = NEW.requisito_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar un registro a un Requisito inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_requisitoaspiranteperiodo_requisito() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_requisitoaspiranteperiodo_requisito(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_requisitoaspiranteperiodo_requisito() IS 'Validad relación requisitoaspiranteperiodo - requisito';


--
-- Name: trg_valida_sexo_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_sexo_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select sexo_id from academico.persona where sexo_id = NEW.sexo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Sexo que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_sexo_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_sexo_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_sexo_persona() IS 'Validad relación sexo - persona';


--
-- Name: trg_valida_tipodiscapacidad_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_tipodiscapacidad_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select tipodiscapacidad_id from academico.persona where tipodiscapacidad_id = NEW.tipodiscapacidad_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Tipo Discapacidad que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_tipodiscapacidad_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_tipodiscapacidad_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_tipodiscapacidad_persona() IS 'Validad relación tipodiscapacidad - persona';


--
-- Name: trg_valida_tipodocumento_persona(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_tipodocumento_persona() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select tipodocumento_id from academico.persona where tipodocumento_id = NEW.tipodocumento_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Tipo Documento que tengan Personas asociadas';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_tipodocumento_persona() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_tipodocumento_persona(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_tipodocumento_persona() IS 'Validad relación tipodocumento - persona';


--
-- Name: trg_valida_tipounidadeducativa_unidadeducativa(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_tipounidadeducativa_unidadeducativa() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select tipounidadeducativa_id from academico.unidadeducativa where tipounidadeducativa_id = NEW.tipounidadeducativa_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Tipo Unidad Educativa que tengan Unidad Educativa asociada';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_tipounidadeducativa_unidadeducativa() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_tipounidadeducativa_unidadeducativa(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_tipounidadeducativa_unidadeducativa() IS 'Validad relación tipounidadeducativa - unidadeducativa';


--
-- Name: trg_valida_titulo_docente(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_titulo_docente() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select titulo_id from academico.docente where titulo_id = NEW.titulo_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar un Título que tengan Docentes asociados';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;
$$;


ALTER FUNCTION academico.trg_valida_titulo_docente() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_titulo_docente(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_titulo_docente() IS 'Validad relación titulo - docente';


--
-- Name: trg_valida_unidadeducativa_aspirante(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_unidadeducativa_aspirante() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select unidadeducativa_id from academico.aspirante where unidadeducativa_id = NEW.unidadeducativa_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Unidad Educativa que tengan Aspirante asociado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_unidadeducativa_aspirante() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_unidadeducativa_aspirante(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_unidadeducativa_aspirante() IS 'Validad relación unidadeducativa - aspirante';


--
-- Name: trg_valida_unidadeducativa_ciudad(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_unidadeducativa_ciudad() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select ciudad_id from academico.ciudad where ciudad_id = NEW.ciudad_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Unidad Educativa a una Ciudad inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_unidadeducativa_ciudad() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_unidadeducativa_ciudad(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_unidadeducativa_ciudad() IS 'Validad relación unidadeducativa - ciudad';


--
-- Name: trg_valida_unidadeducativa_pais(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_unidadeducativa_pais() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select pais_id from academico.pais where pais_id = NEW.pais_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Unidad Educativa a un País inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_unidadeducativa_pais() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_unidadeducativa_pais(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_unidadeducativa_pais() IS 'Validad relación unidadeducativa - pais';


--
-- Name: trg_valida_unidadeducativa_tipounidadeducativa(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_unidadeducativa_tipounidadeducativa() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') then
	begin
		if not exists (select tipounidadeducativa_id from academico.tipounidadeducativa where tipounidadeducativa_id = NEW.tipounidadeducativa_id and activo = 'S') then
		begin
			raise exception 'No se puede asociar una Unidad Educativa a un Tipo Unidad Eduvativa inexistente'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_unidadeducativa_tipounidadeducativa() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_unidadeducativa_tipounidadeducativa(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_unidadeducativa_tipounidadeducativa() IS 'Validad relación unidadeducativa - tipounidadeducativa';


--
-- Name: trg_valida_unidadformacion_mallaciclo(); Type: FUNCTION; Schema: academico; Owner: attinae_user
--

CREATE FUNCTION academico.trg_valida_unidadformacion_mallaciclo() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE

  BEGIN
	if (NEW.activo = 'N' and TG_OP = 'UPDATE') then
	begin
		if exists (select unidadformacion_id from academico.mallaciclo where unidadformacion_id = NEW.unidadformacion_id and activo = 'S') then
		begin
			raise exception 'No se puede eliminar Unidades de Formación que tengan Mallas Ciclos asociados'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION academico.trg_valida_unidadformacion_mallaciclo() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_unidadformacion_mallaciclo(); Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON FUNCTION academico.trg_valida_unidadformacion_mallaciclo() IS 'Validad relación tipociclo - ciclo';


--
-- Name: mant_rubros(integer, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: finanzas; Owner: attinae_user
--

CREATE FUNCTION finanzas.mant_rubros(integer, character varying, integer, integer, character, character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $_$

DECLARE
par_rubro_id ALIAS FOR $1;
par_descripcion ALIAS FOR $2;
par_estado_id ALIAS FOR $3;
par_usuario_id ALIAS FOR $4;
par_accion ALIAS FOR $5;
par_ip ALIAS FOR $3;

var_tabla character varying;
var_fechaevento timestamp;

var_rubro_id_base INTEGER;
var_descripcion_base VARCHAR;
var_estado_id_base INTEGER;

reg_mensaje public.typ_mensajefuncion%rowtype;

	BEGIN
		LOCK TABLE finanzas.rubro IN EXCLUSIVE MODE;
		LOCK TABLE seguridad.log IN EXCLUSIVE MODE;

		BEGIN 
			var_tabla := 'rubro';
			var_fechaevento := (select current_timestamp);
					if par_accion = 'I' then

								INSERT INTO
									  finanzas.rubro(
									  descripcion,
									  estado_id,
									  creadopor,
									  creado)
									VALUES(
									  par_descripcion,
									  par_estado_id,
									  par_usuario_id,
									  var_fechaevento)
									  returning rubro_id into par_rubro_id;

								insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
											values ('I', var_tabla, 'descripcion', par_rubro_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
											
								insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
											values ('I', var_tabla, 'estado_id', par_rubro_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);

											

					elsif par_accion = 'U' then

								SELECT 
								  finanzas.rubro.descripcion,
								  finanzas.rubro.estado_id
								  INTO 
									var_descripcion_base,
									var_estado_id_base									
								FROM
								  finanzas.rubro
								  where
								    finanzas.rubro.rubro_id = par_rubro_id;

								UPDATE 
								  finanzas.rubro
								SET
								  descripcion = par_descripcion,
								  estado_id = par_estado_id,
								  actualizadopor = par_usuario_id,
								  actualizado = var_fechaevento
								WHERE
								  finanzas.rubro.rubro_id = par_rubro_id;
								    

						if var_descripcion_base <> par_descripcion then
								INSERT INTO
									  seguridad.log(
									  evento,
									  tabla,
									  columna,
									  registro_id,
									  valor_anterior,
									  valor_nuevo,
									  usuario_id,
									  fecha_evento,
									  ip)
									VALUES(
									  'U',
									  var_tabla,
									  'descripcion',
									  par_rubro_id,
									  var_descripcion_base,
									  par_descripcion,
									  par_usuario_id,
									  var_fechaevento,
									  par_ip);
						end if;
						
						if var_estado_id_base <> par_estado_id then
								INSERT INTO
									  seguridad.log(
									  evento,
									  tabla,
									  columna,
									  registro_id,
									  valor_anterior,
									  valor_nuevo,
									  usuario_id,
									  fecha_evento,
									  ip)
									VALUES(
									  'U',
									  var_tabla,
									  'estado_id',
									  par_rubro_id,
									  var_estado_id_base,
									  par_descripcion,
									  par_usuario_id,
									  var_fechaevento,
									  par_ip);
						end if;
				
					ELSIF par_accion = 'D' then			

							UPDATE 
							  finanzas.rubro
							SET
							  activo = 'N'
							WHERE
							  finanzas.rubro.rubro_id = par_rubro_id;

							INSERT INTO
								  seguridad.log(
								  evento,
								  tabla,
								  registro_id,
								  usuario_id,
								  fecha_evento,
								  ip)
								VALUES(
								  'D',
								  var_tabla,
								  par_rubro_id,
								  par_usuario_id,
								  var_fechaevento,
								  par_ip);
						

					END IF;

						reg_mensaje.error := 0;
						reg_mensaje.mensaje := 'Operación realizada con éxito'; 
						reg_mensaje.id := par_rubro_id;
						EXCEPTION WHEN OTHERS THEN
						reg_mensaje.error := 1;
						reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
						reg_mensaje.id := par_rubro_id;
						END;
				        RETURN next reg_mensaje;
						
		END;

$_$;


ALTER FUNCTION finanzas.mant_rubros(integer, character varying, integer, integer, character, character varying) OWNER TO attinae_user;

--
-- Name: mant_rubros(integer, character varying, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: finanzas; Owner: attinae_user
--

CREATE FUNCTION finanzas.mant_rubros(integer, character varying, integer, integer, integer, character, character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $_$
DECLARE
par_rubro_id ALIAS FOR $1;
par_descripcion ALIAS FOR $2;
par_entidad_educativa ALIAS FOR $3;
par_estado_id ALIAS FOR $4;
par_usuario_id ALIAS FOR $5;
par_accion ALIAS FOR $6;
par_ip ALIAS FOR $7;

var_tabla character varying;
var_fechaevento timestamp;

var_rubro_id_base INTEGER;
var_descripcion_base VARCHAR;
var_entidad_educativa_base INTEGER;
var_estado_id_base INTEGER;

reg_mensaje public.typ_mensajefuncion%rowtype;

	BEGIN
		LOCK TABLE finanzas.rubro IN EXCLUSIVE MODE;
		LOCK TABLE seguridad.log IN EXCLUSIVE MODE;

		BEGIN 
			var_tabla := 'rubro';
			var_fechaevento := (select current_timestamp);
					if par_accion = 'I' then

								INSERT INTO
									  finanzas.rubro(
									  descripcion,
									  entidad_educativa,
									  estado_id,
									  creadopor,
									  creado)
									VALUES(
									  par_descripcion,
									  par_entidad_educativa,
									  par_estado_id,
									  par_usuario_id,
									  var_fechaevento)
									  returning rubro_id into par_rubro_id;

								insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
											values ('I', var_tabla, 'descripcion', par_rubro_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);

								insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
											values ('I', var_tabla, 'entidad_educativa', par_rubro_id, par_entidad_educativa, par_usuario_id, var_fechaevento, par_ip);
											
								insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
											values ('I', var_tabla, 'estado_id', par_rubro_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);

											

					elsif par_accion = 'U' then

								SELECT 
								  finanzas.rubro.descripcion,
								  finanzas.rubro.entidad_educativa,
								  finanzas.rubro.estado_id
								  INTO 
									var_descripcion_base,
									var_entidad_educativa_base,
									var_estado_id_base									
								FROM
								  finanzas.rubro
								  where
								    finanzas.rubro.rubro_id = par_rubro_id
									AND
								   finanzas.rubro.entidad_educativa = par_entidad_educativa;

								UPDATE 
								  finanzas.rubro
								SET
								  descripcion = par_descripcion,
								  estado_id = par_estado_id,
								  actualizadopor = par_usuario_id,
								  actualizado = var_fechaevento
								WHERE
								  finanzas.rubro.rubro_id = par_rubro_id AND 
								  finanzas.rubro.entidad_educativa = par_entidad_educativa;
								    

						if var_descripcion_base <> par_descripcion then
								INSERT INTO
									  seguridad.log(
									  evento,
									  tabla,
									  columna,
									  registro_id,
									  valor_anterior,
									  valor_nuevo,
									  usuario_id,
									  fecha_evento,
									  ip)
									VALUES(
									  'U',
									  var_tabla,
									  'descripcion',
									  par_rubro_id,
									  var_descripcion_base,
									  par_descripcion,
									  par_usuario_id,
									  var_fechaevento,
									  par_ip);
						end if;


						if var_entidad_educativa_base <> par_entidad_educativa then
								INSERT INTO
									  seguridad.log(
									  evento,
									  tabla,
									  columna,
									  registro_id,
									  valor_anterior,
									  valor_nuevo,
									  usuario_id,
									  fecha_evento,
									  ip)
									VALUES(
									  'U',
									  var_tabla,
									  'entidad_educativa',
									  par_rubro_id,
									  var_entidad_educativa_base,
									  par_entidad_educativa,
									  par_usuario_id,
									  var_fechaevento,
									  par_ip);
						end if;
						
						if var_estado_id_base <> par_estado_id then
								INSERT INTO
									  seguridad.log(
									  evento,
									  tabla,
									  columna,
									  registro_id,
									  valor_anterior,
									  valor_nuevo,
									  usuario_id,
									  fecha_evento,
									  ip)
									VALUES(
									  'U',
									  var_tabla,
									  'estado_id',
									  par_rubro_id,
									  var_estado_id_base,
									  par_descripcion,
									  par_usuario_id,
									  var_fechaevento,
									  par_ip);
						end if;
				
					ELSIF par_accion = 'D' then			

							UPDATE 
							  finanzas.rubro
							SET
							  activo = 'N'
							WHERE
							  finanzas.rubro.rubro_id = par_rubro_id
							  AND
							    finanzas.rubro.entidad_educativa = par_entidad_educativa;

							INSERT INTO
								  seguridad.log(
								  evento,
								  tabla,
								  registro_id,
								  usuario_id,
								  fecha_evento,
								  ip)
								VALUES(
								  'D',
								  var_tabla,
								  par_rubro_id,
								  par_usuario_id,
								  var_fechaevento,
								  par_ip);
						

					END IF;

						reg_mensaje.error := 0;
						reg_mensaje.mensaje := 'Operación realizada con éxito'; 
						reg_mensaje.id := par_rubro_id;
						EXCEPTION WHEN OTHERS THEN
						reg_mensaje.error := 1;
						reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
						reg_mensaje.id := par_rubro_id;
						END;
				        RETURN next reg_mensaje;
						
		END;
$_$;


ALTER FUNCTION finanzas.mant_rubros(integer, character varying, integer, integer, integer, character, character varying) OWNER TO attinae_user;

--
-- Name: pga_exception_trigger(); Type: FUNCTION; Schema: pgagent; Owner: attinae_user
--

CREATE FUNCTION pgagent.pga_exception_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE

    v_jobid int4 := 0;

BEGIN

     IF TG_OP = 'DELETE' THEN

        SELECT INTO v_jobid jscjobid FROM pgagent.pga_schedule WHERE jscid = OLD.jexscid;

        -- update pga_job from remaining schedules
        -- the actual calculation of jobnextrun will be performed in the trigger
        UPDATE pgagent.pga_job
           SET jobnextrun = NULL
         WHERE jobenabled AND jobid = v_jobid;
        RETURN OLD;
    ELSE

        SELECT INTO v_jobid jscjobid FROM pgagent.pga_schedule WHERE jscid = NEW.jexscid;

        UPDATE pgagent.pga_job
           SET jobnextrun = NULL
         WHERE jobenabled AND jobid = v_jobid;
        RETURN NEW;
    END IF;
END;
$$;


ALTER FUNCTION pgagent.pga_exception_trigger() OWNER TO attinae_user;

--
-- Name: FUNCTION pga_exception_trigger(); Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON FUNCTION pgagent.pga_exception_trigger() IS 'Update the job''s next run time whenever an exception changes';


--
-- Name: pga_is_leap_year(smallint); Type: FUNCTION; Schema: pgagent; Owner: attinae_user
--

CREATE FUNCTION pgagent.pga_is_leap_year(smallint) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
BEGIN
    IF $1 % 4 != 0 THEN
        RETURN FALSE;
    END IF;

    IF $1 % 100 != 0 THEN
        RETURN TRUE;
    END IF;

    RETURN $1 % 400 = 0;
END;
$_$;


ALTER FUNCTION pgagent.pga_is_leap_year(smallint) OWNER TO attinae_user;

--
-- Name: FUNCTION pga_is_leap_year(smallint); Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON FUNCTION pgagent.pga_is_leap_year(smallint) IS 'Returns TRUE if $1 is a leap year';


--
-- Name: pga_job_trigger(); Type: FUNCTION; Schema: pgagent; Owner: attinae_user
--

CREATE FUNCTION pgagent.pga_job_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF NEW.jobenabled THEN
        IF NEW.jobnextrun IS NULL THEN
             SELECT INTO NEW.jobnextrun
                    MIN(pgagent.pga_next_schedule(jscid, jscstart, jscend, jscminutes, jschours, jscweekdays, jscmonthdays, jscmonths))
               FROM pgagent.pga_schedule
              WHERE jscenabled AND jscjobid=OLD.jobid;
        END IF;
    ELSE
        NEW.jobnextrun := NULL;
    END IF;
    RETURN NEW;
END;
$$;


ALTER FUNCTION pgagent.pga_job_trigger() OWNER TO attinae_user;

--
-- Name: FUNCTION pga_job_trigger(); Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON FUNCTION pgagent.pga_job_trigger() IS 'Update the job''s next run time.';


--
-- Name: pga_next_schedule(integer, timestamp with time zone, timestamp with time zone, boolean[], boolean[], boolean[], boolean[], boolean[]); Type: FUNCTION; Schema: pgagent; Owner: attinae_user
--

CREATE FUNCTION pgagent.pga_next_schedule(integer, timestamp with time zone, timestamp with time zone, boolean[], boolean[], boolean[], boolean[], boolean[]) RETURNS timestamp with time zone
    LANGUAGE plpgsql
    AS $_$
DECLARE
    jscid           ALIAS FOR $1;
    jscstart        ALIAS FOR $2;
    jscend          ALIAS FOR $3;
    jscminutes      ALIAS FOR $4;
    jschours        ALIAS FOR $5;
    jscweekdays     ALIAS FOR $6;
    jscmonthdays    ALIAS FOR $7;
    jscmonths       ALIAS FOR $8;

    nextrun         timestamp := '1970-01-01 00:00:00-00';
    runafter        timestamp := '1970-01-01 00:00:00-00';

    bingo            bool := FALSE;
    gotit            bool := FALSE;
    foundval        bool := FALSE;
    daytweak        bool := FALSE;
    minutetweak        bool := FALSE;

    i                int2 := 0;
    d                int2 := 0;

    nextminute        int2 := 0;
    nexthour        int2 := 0;
    nextday            int2 := 0;
    nextmonth       int2 := 0;
    nextyear        int2 := 0;


BEGIN
    -- No valid start date has been specified
    IF jscstart IS NULL THEN RETURN NULL; END IF;

    -- The schedule is past its end date
    IF jscend IS NOT NULL AND jscend < now() THEN RETURN NULL; END IF;

    -- Get the time to find the next run after. It will just be the later of
    -- now() + 1m and the start date for the time being, however, we might want to
    -- do more complex things using this value in the future.
    IF date_trunc('MINUTE', jscstart) > date_trunc('MINUTE', (now() + '1 Minute'::interval)) THEN
        runafter := date_trunc('MINUTE', jscstart);
    ELSE
        runafter := date_trunc('MINUTE', (now() + '1 Minute'::interval));
    END IF;

    --
    -- Enter a loop, generating next run timestamps until we find one
    -- that falls on the required weekday, and is not matched by an exception
    --

    WHILE bingo = FALSE LOOP

        --
        -- Get the next run year
        --
        nextyear := date_part('YEAR', runafter);

        --
        -- Get the next run month
        --
        nextmonth := date_part('MONTH', runafter);
        gotit := FALSE;
        FOR i IN (nextmonth) .. 12 LOOP
            IF jscmonths[i] = TRUE THEN
                nextmonth := i;
                gotit := TRUE;
                foundval := TRUE;
                EXIT;
            END IF;
        END LOOP;
        IF gotit = FALSE THEN
            FOR i IN 1 .. (nextmonth - 1) LOOP
                IF jscmonths[i] = TRUE THEN
                    nextmonth := i;

                    -- Wrap into next year
                    nextyear := nextyear + 1;
                    gotit := TRUE;
                    foundval := TRUE;
                    EXIT;
                END IF;
           END LOOP;
        END IF;

        --
        -- Get the next run day
        --
        -- If the year, or month have incremented, get the lowest day,
        -- otherwise look for the next day matching or after today.
        IF (nextyear > date_part('YEAR', runafter) OR nextmonth > date_part('MONTH', runafter)) THEN
            nextday := 1;
            FOR i IN 1 .. 32 LOOP
                IF jscmonthdays[i] = TRUE THEN
                    nextday := i;
                    foundval := TRUE;
                    EXIT;
                END IF;
            END LOOP;
        ELSE
            nextday := date_part('DAY', runafter);
            gotit := FALSE;
            FOR i IN nextday .. 32 LOOP
                IF jscmonthdays[i] = TRUE THEN
                    nextday := i;
                    gotit := TRUE;
                    foundval := TRUE;
                    EXIT;
                END IF;
            END LOOP;
            IF gotit = FALSE THEN
                FOR i IN 1 .. (nextday - 1) LOOP
                    IF jscmonthdays[i] = TRUE THEN
                        nextday := i;

                        -- Wrap into next month
                        IF nextmonth = 12 THEN
                            nextyear := nextyear + 1;
                            nextmonth := 1;
                        ELSE
                            nextmonth := nextmonth + 1;
                        END IF;
                        gotit := TRUE;
                        foundval := TRUE;
                        EXIT;
                    END IF;
                END LOOP;
            END IF;
        END IF;

        -- Was the last day flag selected?
        IF nextday = 32 THEN
            IF nextmonth = 1 THEN
                nextday := 31;
            ELSIF nextmonth = 2 THEN
                IF pgagent.pga_is_leap_year(nextyear) = TRUE THEN
                    nextday := 29;
                ELSE
                    nextday := 28;
                END IF;
            ELSIF nextmonth = 3 THEN
                nextday := 31;
            ELSIF nextmonth = 4 THEN
                nextday := 30;
            ELSIF nextmonth = 5 THEN
                nextday := 31;
            ELSIF nextmonth = 6 THEN
                nextday := 30;
            ELSIF nextmonth = 7 THEN
                nextday := 31;
            ELSIF nextmonth = 8 THEN
                nextday := 31;
            ELSIF nextmonth = 9 THEN
                nextday := 30;
            ELSIF nextmonth = 10 THEN
                nextday := 31;
            ELSIF nextmonth = 11 THEN
                nextday := 30;
            ELSIF nextmonth = 12 THEN
                nextday := 31;
            END IF;
        END IF;

        --
        -- Get the next run hour
        --
        -- If the year, month or day have incremented, get the lowest hour,
        -- otherwise look for the next hour matching or after the current one.
        IF (nextyear > date_part('YEAR', runafter) OR nextmonth > date_part('MONTH', runafter) OR nextday > date_part('DAY', runafter) OR daytweak = TRUE) THEN
            nexthour := 0;
            FOR i IN 1 .. 24 LOOP
                IF jschours[i] = TRUE THEN
                    nexthour := i - 1;
                    foundval := TRUE;
                    EXIT;
                END IF;
            END LOOP;
        ELSE
            nexthour := date_part('HOUR', runafter);
            gotit := FALSE;
            FOR i IN (nexthour + 1) .. 24 LOOP
                IF jschours[i] = TRUE THEN
                    nexthour := i - 1;
                    gotit := TRUE;
                    foundval := TRUE;
                    EXIT;
                END IF;
            END LOOP;
            IF gotit = FALSE THEN
                FOR i IN 1 .. nexthour LOOP
                    IF jschours[i] = TRUE THEN
                        nexthour := i - 1;

                        -- Wrap into next month
                        IF (nextmonth = 1 OR nextmonth = 3 OR nextmonth = 5 OR nextmonth = 7 OR nextmonth = 8 OR nextmonth = 10 OR nextmonth = 12) THEN
                            d = 31;
                        ELSIF (nextmonth = 4 OR nextmonth = 6 OR nextmonth = 9 OR nextmonth = 11) THEN
                            d = 30;
                        ELSE
                            IF pgagent.pga_is_leap_year(nextyear) = TRUE THEN
                                d := 29;
                            ELSE
                                d := 28;
                            END IF;
                        END IF;

                        IF nextday = d THEN
                            nextday := 1;
                            IF nextmonth = 12 THEN
                                nextyear := nextyear + 1;
                                nextmonth := 1;
                            ELSE
                                nextmonth := nextmonth + 1;
                            END IF;
                        ELSE
                            nextday := nextday + 1;
                        END IF;

                        gotit := TRUE;
                        foundval := TRUE;
                        EXIT;
                    END IF;
                END LOOP;
            END IF;
        END IF;

        --
        -- Get the next run minute
        --
        -- If the year, month day or hour have incremented, get the lowest minute,
        -- otherwise look for the next minute matching or after the current one.
        IF (nextyear > date_part('YEAR', runafter) OR nextmonth > date_part('MONTH', runafter) OR nextday > date_part('DAY', runafter) OR nexthour > date_part('HOUR', runafter) OR daytweak = TRUE) THEN
            nextminute := 0;
            IF minutetweak = TRUE THEN
        d := 1;
            ELSE
        d := date_part('YEAR', runafter)::int2;
            END IF;
            FOR i IN d .. 60 LOOP
                IF jscminutes[i] = TRUE THEN
                    nextminute := i - 1;
                    foundval := TRUE;
                    EXIT;
                END IF;
            END LOOP;
        ELSE
            nextminute := date_part('MINUTE', runafter);
            gotit := FALSE;
            FOR i IN (nextminute + 1) .. 60 LOOP
                IF jscminutes[i] = TRUE THEN
                    nextminute := i - 1;
                    gotit := TRUE;
                    foundval := TRUE;
                    EXIT;
                END IF;
            END LOOP;
            IF gotit = FALSE THEN
                FOR i IN 1 .. nextminute LOOP
                    IF jscminutes[i] = TRUE THEN
                        nextminute := i - 1;

                        -- Wrap into next hour
                        IF (nextmonth = 1 OR nextmonth = 3 OR nextmonth = 5 OR nextmonth = 7 OR nextmonth = 8 OR nextmonth = 10 OR nextmonth = 12) THEN
                            d = 31;
                        ELSIF (nextmonth = 4 OR nextmonth = 6 OR nextmonth = 9 OR nextmonth = 11) THEN
                            d = 30;
                        ELSE
                            IF pgagent.pga_is_leap_year(nextyear) = TRUE THEN
                                d := 29;
                            ELSE
                                d := 28;
                            END IF;
                        END IF;

                        IF nexthour = 23 THEN
                            nexthour = 0;
                            IF nextday = d THEN
                                nextday := 1;
                                IF nextmonth = 12 THEN
                                    nextyear := nextyear + 1;
                                    nextmonth := 1;
                                ELSE
                                    nextmonth := nextmonth + 1;
                                END IF;
                            ELSE
                                nextday := nextday + 1;
                            END IF;
                        ELSE
                            nexthour := nexthour + 1;
                        END IF;

                        gotit := TRUE;
                        foundval := TRUE;
                        EXIT;
                    END IF;
                END LOOP;
            END IF;
        END IF;

        -- Build the result, and check it is not the same as runafter - this may
        -- happen if all array entries are set to false. In this case, add a minute.

        nextrun := (nextyear::varchar || '-'::varchar || nextmonth::varchar || '-' || nextday::varchar || ' ' || nexthour::varchar || ':' || nextminute::varchar)::timestamptz;

        IF nextrun = runafter AND foundval = FALSE THEN
                nextrun := nextrun + INTERVAL '1 Minute';
        END IF;

        -- If the result is past the end date, exit.
        IF nextrun > jscend THEN
            RETURN NULL;
        END IF;

        -- Check to ensure that the nextrun time is actually still valid. Its
        -- possible that wrapped values may have carried the nextrun onto an
        -- invalid time or date.
        IF ((jscminutes = '{f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f}' OR jscminutes[date_part('MINUTE', nextrun) + 1] = TRUE) AND
            (jschours = '{f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f}' OR jschours[date_part('HOUR', nextrun) + 1] = TRUE) AND
            (jscmonthdays = '{f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f}' OR jscmonthdays[date_part('DAY', nextrun)] = TRUE OR
            (jscmonthdays = '{f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,t}' AND
             ((date_part('MONTH', nextrun) IN (1,3,5,7,8,10,12) AND date_part('DAY', nextrun) = 31) OR
              (date_part('MONTH', nextrun) IN (4,6,9,11) AND date_part('DAY', nextrun) = 30) OR
              (date_part('MONTH', nextrun) = 2 AND ((pgagent.pga_is_leap_year(date_part('DAY', nextrun)::int2) AND date_part('DAY', nextrun) = 29) OR date_part('DAY', nextrun) = 28))))) AND
            (jscmonths = '{f,f,f,f,f,f,f,f,f,f,f,f}' OR jscmonths[date_part('MONTH', nextrun)] = TRUE)) THEN


            -- Now, check to see if the nextrun time found is a) on an acceptable
            -- weekday, and b) not matched by an exception. If not, set
            -- runafter = nextrun and try again.

            -- Check for a wildcard weekday
            gotit := FALSE;
            FOR i IN 1 .. 7 LOOP
                IF jscweekdays[i] = TRUE THEN
                    gotit := TRUE;
                    EXIT;
                END IF;
            END LOOP;

            -- OK, is the correct weekday selected, or a wildcard?
            IF (jscweekdays[date_part('DOW', nextrun) + 1] = TRUE OR gotit = FALSE) THEN

                -- Check for exceptions
                SELECT INTO d jexid FROM pgagent.pga_exception WHERE jexscid = jscid AND ((jexdate = nextrun::date AND jextime = nextrun::time) OR (jexdate = nextrun::date AND jextime IS NULL) OR (jexdate IS NULL AND jextime = nextrun::time));
                IF FOUND THEN
                    -- Nuts - found an exception. Increment the time and try again
                    runafter := nextrun + INTERVAL '1 Minute';
                    bingo := FALSE;
                    minutetweak := TRUE;
            daytweak := FALSE;
                ELSE
                    bingo := TRUE;
                END IF;
            ELSE
                -- We're on the wrong week day - increment a day and try again.
                runafter := nextrun + INTERVAL '1 Day';
                bingo := FALSE;
                minutetweak := FALSE;
                daytweak := TRUE;
            END IF;

        ELSE
            runafter := nextrun + INTERVAL '1 Minute';
            bingo := FALSE;
            minutetweak := TRUE;
        daytweak := FALSE;
        END IF;

    END LOOP;

    RETURN nextrun;
END;
$_$;


ALTER FUNCTION pgagent.pga_next_schedule(integer, timestamp with time zone, timestamp with time zone, boolean[], boolean[], boolean[], boolean[], boolean[]) OWNER TO attinae_user;

--
-- Name: FUNCTION pga_next_schedule(integer, timestamp with time zone, timestamp with time zone, boolean[], boolean[], boolean[], boolean[], boolean[]); Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON FUNCTION pgagent.pga_next_schedule(integer, timestamp with time zone, timestamp with time zone, boolean[], boolean[], boolean[], boolean[], boolean[]) IS 'Calculates the next runtime for a given schedule';


--
-- Name: pga_schedule_trigger(); Type: FUNCTION; Schema: pgagent; Owner: attinae_user
--

CREATE FUNCTION pgagent.pga_schedule_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF TG_OP = 'DELETE' THEN
        -- update pga_job from remaining schedules
        -- the actual calculation of jobnextrun will be performed in the trigger
        UPDATE pgagent.pga_job
           SET jobnextrun = NULL
         WHERE jobenabled AND jobid=OLD.jscjobid;
        RETURN OLD;
    ELSE
        UPDATE pgagent.pga_job
           SET jobnextrun = NULL
         WHERE jobenabled AND jobid=NEW.jscjobid;
        RETURN NEW;
    END IF;
END;
$$;


ALTER FUNCTION pgagent.pga_schedule_trigger() OWNER TO attinae_user;

--
-- Name: FUNCTION pga_schedule_trigger(); Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON FUNCTION pgagent.pga_schedule_trigger() IS 'Update the job''s next run time whenever a schedule changes';


--
-- Name: pgagent_schema_version(); Type: FUNCTION; Schema: pgagent; Owner: attinae_user
--

CREATE FUNCTION pgagent.pgagent_schema_version() RETURNS smallint
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- RETURNS PGAGENT MAJOR VERSION
    -- WE WILL CHANGE THE MAJOR VERSION, ONLY IF THERE IS A SCHEMA CHANGE
    RETURN 3;
END;
$$;


ALTER FUNCTION pgagent.pgagent_schema_version() OWNER TO attinae_user;

--
-- Name: func_asignardocentes2q(); Type: FUNCTION; Schema: public; Owner: attinae_user
--

CREATE FUNCTION public.func_asignardocentes2q() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	cur_tabla refcursor;
	rec_registro record;
	rec_paralelo record;
	var_paralelo_id integer;
BEGIN
	open cur_tabla for select * from academico.paralelodocente as pd 
					   where (select periodo_id from academico.paralelo where paralelo_id = pd.paralelo_id and activo = 'S') = 2 
					   		and paralelo_id in (select paralelo_id from academico.paralelo where carrera_id = 3 and periodo_id = 2 and activo = 'S');
	loop
		fetch cur_tabla into rec_registro;
		exit when not found;
		
		select * into rec_paralelo from academico.paralelo where paralelo_id = rec_registro.paralelo_id;
		
		select paralelo_id into var_paralelo_id from academico.paralelo where anio_lectivo_id = rec_paralelo.anio_lectivo_id 
													and periodo_id = 3 and carrera_id = rec_paralelo.carrera_id 
													and malla_id = rec_paralelo.malla_id and ciclo_id = rec_paralelo.ciclo_id 
													and elementoeducativo_id = rec_paralelo.elementoeducativo_id and paralelo = rec_paralelo.paralelo 
													and activo = 'S';
		raise notice '%', var_paralelo_id;
		if (var_paralelo_id is not null) then
			insert into academico.paralelodocente (paralelo_id, persona_id, estado_id, creadopor, creado, activo) 
				values (var_paralelo_id, rec_registro.persona_id, rec_registro.estado_id, rec_registro.creadopor, rec_registro.creado, rec_registro.activo);
		end if;			
		
	end loop;

END;
$$;


ALTER FUNCTION public.func_asignardocentes2q() OWNER TO attinae_user;

--
-- Name: func_asignarestudiantes2q(); Type: FUNCTION; Schema: public; Owner: attinae_user
--

CREATE FUNCTION public.func_asignarestudiantes2q() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
	cur_tabla refcursor;
	rec_registro record;
	rec_paralelo record;
	var_paralelo_id integer;
BEGIN
	open cur_tabla for select * from academico.paraleloestudiante as pd 
					   where (select periodo_id from academico.paralelo where paralelo_id = pd.paralelo_id and activo = 'S') = 2
					   and paralelo_id in (select paralelo_id from academico.paralelo where periodo_id = 2 and carrera_id = 3 and activo = 'S')
					   and activo = 'S';
	loop
		fetch cur_tabla into rec_registro;
		exit when not found;
		
		select * into rec_paralelo from academico.paralelo where paralelo_id = rec_registro.paralelo_id;
		
		select paralelo_id into var_paralelo_id from academico.paralelo where anio_lectivo_id = rec_paralelo.anio_lectivo_id
													and periodo_id = 3 and carrera_id = rec_paralelo.carrera_id 
													and malla_id = rec_paralelo.malla_id and ciclo_id = rec_paralelo.ciclo_id 
													and elementoeducativo_id = rec_paralelo.elementoeducativo_id 
													and paralelo = rec_paralelo.paralelo and activo = 'S';
		raise notice '%', var_paralelo_id;
		if (var_paralelo_id is not null) then
			insert into academico.paraleloestudiante (paralelo_id, persona_id, estado_id, creadopor, creado, activo) 
				values (var_paralelo_id, rec_registro.persona_id, rec_registro.estado_id, rec_registro.creadopor, rec_registro.creado, rec_registro.activo);
		end if;			
		
	end loop;

END;
$$;


ALTER FUNCTION public.func_asignarestudiantes2q() OWNER TO attinae_user;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: archivo; Type: TABLE; Schema: seguridad; Owner: attinae_user
--

CREATE TABLE seguridad.archivo (
    archivo_id integer NOT NULL,
    nombre character varying(100) NOT NULL,
    tabla character varying(60) NOT NULL,
    registro_id integer NOT NULL,
    tipo_archivo character(1) NOT NULL,
    ruta_relativa text NOT NULL,
    ruta_completa text NOT NULL,
    extension character varying(5) NOT NULL,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE seguridad.archivo OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON archivo; Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON seguridad.archivo IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: cons_archivo_persona(character varying, character varying); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.cons_archivo_persona(par_identificacion character varying, par_tabla character varying) RETURNS SETOF seguridad.archivo
    LANGUAGE plpgsql
    AS $$
DECLARE
    sqlCommand text;
BEGIN    

    sqlCommand = 'SELECT arc.*
    FROM seguridad.archivo as arc ';
    if (par_tabla = 'registronivelacion') then
	sqlCommand = sqlCommand || 'JOIN academico.registronivelacion as rni ON rni.registroevaluacion_id = arc.registro_id ';
    end if;
    sqlCommand = sqlCommand || 'JOIN academico.persona as per ON rni.persona_id = per.persona_id
	WHERE per.documentoidentificacion = ''' || par_identificacion || ''' and arc.activo = ''S''';

    RETURN QUERY EXECUTE sqlCommand;
 END;
$$;


ALTER FUNCTION seguridad.cons_archivo_persona(par_identificacion character varying, par_tabla character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION cons_archivo_persona(par_identificacion character varying, par_tabla character varying); Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON FUNCTION seguridad.cons_archivo_persona(par_identificacion character varying, par_tabla character varying) IS 'Realiza consulta de registros activos de la tabla archivos ';


--
-- Name: func_guardar_log(character, character varying, character varying, integer, text, text, integer, timestamp without time zone, character varying); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.func_guardar_log(character, character varying, character varying, integer, text, text, integer, timestamp without time zone, character varying) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE 
      -- inEvento es un char que me indica si es Update Insert o Delete 
      inEvento ALIAS FOR $1;
      
      --inTabla es un varchar que indica el nombre de la tabla que fue alterada
      inTabla ALIAS FOR $2;
		
      --inColumna es un varchar es la columna que va a ser modificado su valor
	  inColumna ALIAS FOR $3;
      
      --inRegistroId es el id de la tabla que fue modificada su pk
      inRegistroId ALIAS FOR $4;
    	
	  --Es el valor anterior que se va a ingresar en la tabla
      inValorAnterior ALIAS FOR $5;	      
      
      --Es el valor nuevo que se va a ingresar en la tabla
      inValorNuevo ALIAS FOR $6;
      
      --Es el valor del usuario que ha modificado el usuarioId
      inUsuarioId ALIAS FOR $7;
      
      --Es la fecha que se aplica el cambio
      inFechaEvento ALIAS FOR $8;
     
      --Es la ip del equipo en el cual se ha efectuado el cambio
      inIp ALIAS FOR $9;
		      
      outSeIngreso BOOLEAN;
      
  BEGIN
  			IF  inEvento='I' THEN 
            	INSERT INTO
                          seguridad.log(
                          evento,
                          tabla,
                          columna,
                          registro_id,
                          valor_nuevo,
                          usuario_id,
                          fecha_evento,
                          ip)
                        VALUES(
                          'I',
                          inTabla,
                          inColumna,
                          inRegistroId,
                          inValorNuevo,
                          inUsuarioId,
                          inFechaEvento,
                          inIp);

            
            ELSIF inEvento='U' THEN
            
            			INSERT INTO
                              seguridad.log(
                              evento,
                              tabla,
                              columna,
                              registro_id,
                              valor_anterior,
                              valor_nuevo,
                              usuario_id,
                              fecha_evento,
                              ip)
                            VALUES(
                              'U',
                              inTabla,
                              inColumna,
                              inRegistroId,
                              inValorAnterior,
                              inValorNuevo,
                              inUsuarioId,
                          	  inFechaEvento,
                          	  inIp);
            
            ELSIF inEvento='D' THEN 
  					  INSERT INTO
                              seguridad.log(
                              evento,
                              tabla,
                              registro_id,
                              usuario_id,
                              fecha_evento,
                              ip)
                            VALUES(
                              'D',
                              inTabla,
                              inRegistroId,
                              inUsuarioId,
                          	  inFechaEvento,
                          	  inIp);
  
  END IF;    
      	
END;
$_$;


ALTER FUNCTION seguridad.func_guardar_log(character, character varying, character varying, integer, text, text, integer, timestamp without time zone, character varying) OWNER TO attinae_user;

--
-- Name: func_obtener_opciones(integer); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.func_obtener_opciones(integer) RETURNS SETOF seguridad.opcion_existe
    LANGUAGE plpgsql
    AS $_$
DECLARE
  inRolId 		ALIAS FOR $1;
  outOpcionExiste seguridad.opcion_existe;
BEGIN
  FOR outOpcionExiste IN
	    SELECT
	      (CASE WHEN(select seguridad.rolopcion.estado_id FROM seguridad.rolopcion where  seguridad.opcion.opcion_id=seguridad.rolopcion.opcion_id AND  seguridad.rolopcion.rol_id = inRolId) =1 THEN True ELSE False END) AS existe,
	  --(CASE WHEN(select exists(Select 1 FROM seguridad.rolopcion where  seguridad.opcion.opcion_id=seguridad.rolopcion.opcion_id AND  seguridad.rolopcion.rol_id = inRolId)) THEN True ELSE False END) AS existe,
	      seguridad.opcion.*
	   FROM
	      seguridad.opcion order by orden
  LOOP
  		RETURN NEXT outOpcionExiste;
  END LOOP;	
END;
$_$;


ALTER FUNCTION seguridad.func_obtener_opciones(integer) OWNER TO attinae_user;

--
-- Name: func_sumar_dias_habiles(date, numeric); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.func_sumar_dias_habiles(fecha_inicio date, dias_habiles numeric) RETURNS date
    LANGUAGE plpgsql
    AS $$
declare
  dia         numeric;
  dia_habil   numeric;
  hoy         date;
  fecha_fin   date;
begin
     dia := 0;
     dia_habil := dias_habiles; -- variable numdias
     while dia < dia_habil loop
         hoy := (fecha_inicio + (dia || ' days')::interval);

	 --raise notice '%', to_char(hoy,'DY');
	 
         if  (to_char(hoy,'DY') = 'SAT' or to_char(hoy,'DY') = 'SUN' or
             to_char(hoy,'DY') = 'SÁB' or to_char(hoy,'DY') = 'DOM') then
	    
	    -- Es sábado o domingo
            dia_habil := dia_habil + 1;

         end if;
         dia := dia + 1;
     end loop;

     fecha_fin = (fecha_inicio + (dia_habil || ' days')::interval);
     

     return fecha_fin;
end; 
$$;


ALTER FUNCTION seguridad.func_sumar_dias_habiles(fecha_inicio date, dias_habiles numeric) OWNER TO attinae_user;

--
-- Name: mant_archivo(integer, character varying, character varying, integer, character, text, text, character varying, integer, character, character varying); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.mant_archivo(par_archivo_id integer, par_nombre character varying, par_tabla character varying, par_registro_id integer, par_tipo_archivo character, par_ruta_relativa text, par_ruta_completa text, par_extension character varying, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;	
	var_fechaevento timestamp;
	var_nombre_base character varying;
	var_tabla_base character varying;
	var_registro_id_base integer;
	var_tipo_archivo_base character;
	var_ruta_relativa_base text;
	var_ruta_completa_base text;
	var_extension_base character varying;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE seguridad.archivo IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'archivo';
		var_fechaevento := (select current_timestamp);
		
		IF EXISTS(SELECT 1 FROM  seguridad.archivo WHERE seguridad.archivo.tabla=par_tabla  AND  seguridad.archivo.registro_id=par_registro_id  AND  seguridad.archivo.activo='S') THEN
      	   par_accion:='U';
      	  SELECT seguridad.archivo.archivo_id INTO par_archivo_id  FROM  seguridad.archivo WHERE seguridad.archivo.tabla=par_tabla  AND  seguridad.archivo.registro_id=par_registro_id AND   seguridad.archivo.activo='S';
        ELSE
           par_accion:='I';
        END IF;
		
		if par_accion = 'I' then
			insert into seguridad.archivo (nombre, tabla, registro_id, tipo_archivo, ruta_relativa, ruta_completa, extension, creadopor, creado) 
				values (par_nombre, par_tabla, par_registro_id, par_tipo_archivo, par_ruta_relativa, par_ruta_completa, par_extension, par_usuario_id, var_fechaevento)
			  	returning archivo_id into par_archivo_id;
            
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nombre', (select last_value from seguridad.pk_archivo_id_seq), par_nombre, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'tabla', (select last_value from seguridad.pk_archivo_id_seq), par_tabla, par_usuario_id, var_fechaevento, par_ip);												
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'registro_id', (select last_value from seguridad.pk_archivo_id_seq), par_registro_id, par_usuario_id, var_fechaevento, par_ip);												
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'tipo_archivo', (select last_value from seguridad.pk_archivo_id_seq), par_tipo_archivo, par_usuario_id, var_fechaevento, par_ip);												
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'ruta_relativa', (select last_value from seguridad.pk_archivo_id_seq), par_ruta_relativa, par_usuario_id, var_fechaevento, par_ip);												
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'ruta_completa', (select last_value from seguridad.pk_archivo_id_seq), par_ruta_completa, par_usuario_id, var_fechaevento, par_ip);												
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'extension', (select last_value from seguridad.pk_archivo_id_seq), par_extension, par_usuario_id, var_fechaevento, par_ip);
						
		elsif par_accion = 'U' then
			select nombre, tabla, registro_id, tipo_archivo, ruta_relativa, ruta_completa, extension into var_nombre_base, var_tabla_base, var_registro_id_base, var_tipo_archivo_base, var_ruta_relativa_base,
															var_ruta_completa_base, var_extension_base
					from seguridad.archivo where archivo_id = par_archivo_id;
			update seguridad.archivo set nombre = par_nombre, tabla = par_tabla, registro_id = par_registro_id, tipo_archivo = par_tipo_archivo, ruta_relativa = par_ruta_relativa, ruta_completa = par_ruta_completa,
							extension = par_extension, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where archivo_id = par_archivo_id;
			if var_nombre_base <> par_nombre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre', par_archivo_id, var_nombre_base, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_tabla_base <> par_tabla then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'tabla', par_archivo_id, var_tabla_base, par_tabla, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_nombre_base <> par_nombre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'registro_id', par_archivo_id, var_registro_id_base, par_registro_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_tipo_archivo_base <> par_tipo_archivo then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'tipo_archivo', par_archivo_id, var_tipo_archivo_base, par_tipo_archivo, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_ruta_relativa_base <> par_ruta_relativa then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'ruta_relativa', par_archivo_id, var_ruta_relativa_base, par_ruta_relativa, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_ruta_completa_base <> par_ruta_completa then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'ruta_completa', par_archivo_id, var_ruta_completa_base, par_ruta_completa, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_extension_base <> par_extension then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'extension', par_archivo_id, var_extension_base, par_extension, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update seguridad.archivo set activo = 'N' where archivo_id = par_archivo_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_registro_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id:=par_archivo_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id:=par_archivo_id;
    END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION seguridad.mant_archivo(par_archivo_id integer, par_nombre character varying, par_tabla character varying, par_registro_id integer, par_tipo_archivo character, par_ruta_relativa text, par_ruta_completa text, par_extension character varying, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_archivo(par_archivo_id integer, par_nombre character varying, par_tabla character varying, par_registro_id integer, par_tipo_archivo character, par_ruta_relativa text, par_ruta_completa text, par_extension character varying, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON FUNCTION seguridad.mant_archivo(par_archivo_id integer, par_nombre character varying, par_tabla character varying, par_registro_id integer, par_tipo_archivo character, par_ruta_relativa text, par_ruta_completa text, par_extension character varying, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla archivo';


--
-- Name: mant_elementojsf(integer, integer, character varying, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.mant_elementojsf(par_elementojsf_id integer, par_paginajsf_id integer, par_jsf_id_ingreso character varying, par_jsf_id_revision character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_paginajsf_id_base integer;	
	var_jsf_id_ingreso_base character varying;
	var_jsf_id_revision_base character varying;	
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE seguridad.elementojsf IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'elementojsf';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into seguridad.elementojsf (paginajsf_id, jsf_id_ingreso, jsf_id_revision, estado_id, creadopor, creado) values (par_paginajsf_id, par_jsf_id_ingreso, par_jsf_id_revision, par_estado_id, par_usuario_id, var_fechaevento)
					returning elementojsf_id into par_elementojsf_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'paginajsf_id', par_elementojsf_id, par_paginajsf_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'jsf_id_ingreso', par_elementojsf_id, par_jsf_id_ingreso, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'jsf_id_revision', par_elementojsf_id, par_jsf_id_revision, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_elementojsf_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select paginajsf_id, jsf_id_ingreso, jsf_id_revision, estado_id into var_paginajsf_id_base, var_jsf_id_ingreso_base, var_jsf_id_revision_base, var_estado_id_base from seguridad.elementojsf where elementojsf_id = par_elementojsf_id;
			update seguridad.elementojsf set paginajsf_id = par_paginajsf_id, jsf_id_ingreso = par_jsf_id_ingreso, jsf_id_revison = par_jsf_id_revision, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where elementojsf_id = par_elementojsf_id;
			if var_paginajsf_id_base <> par_paginajsf_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'elementojsf_id', par_elementojsf_id, var_paginajsf_id_base, par_paginajsf_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_jsf_id_ingreso_base <> par_jsf_id_ingreso then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'jsf_id_ingreso', par_elementojsf_id, var_jsf_id_ingreso_base, par_jsf_id_ingreso, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_jsf_id_revison_base <> par_jsf_id_revision then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'jsf_id_revision', par_elementojsf_id, var_jsf_id_revision_base, par_jsf_id_revision, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_elementojsf_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update seguridad.elementojsf set activo = 'N' where elementojsf_id = par_elementojsf_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_elementojsf_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_elementojsf_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_elementojsf_id;	
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION seguridad.mant_elementojsf(par_elementojsf_id integer, par_paginajsf_id integer, par_jsf_id_ingreso character varying, par_jsf_id_revision character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_elementojsf(par_elementojsf_id integer, par_paginajsf_id integer, par_jsf_id_ingreso character varying, par_jsf_id_revision character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON FUNCTION seguridad.mant_elementojsf(par_elementojsf_id integer, par_paginajsf_id integer, par_jsf_id_ingreso character varying, par_jsf_id_revision character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla elementojsf';


--
-- Name: mant_opcion(integer, integer, character varying, character varying, smallint, boolean, character varying, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.mant_opcion(par_opcion_id integer, par_opcionpadre_id integer, par_nombre character varying, par_url character varying DEFAULT ''::character varying, par_orden smallint DEFAULT 0, par_dashboard boolean DEFAULT false, par_titulodashboard character varying DEFAULT ''::character varying, par_imagendashboard character varying DEFAULT ''::character varying, par_estado_id integer DEFAULT 1, par_usuario_id integer DEFAULT 0, par_accion character DEFAULT ''::bpchar, par_ip character varying DEFAULT ''::character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_opcionpadre_id_base integer;
	var_nombre_base character varying;
	var_url_base character varying;	
	var_orden_base smallint;
	var_dashboard_base boolean;	
	var_titulodashboard_base character varying;
	var_imagendashboard_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE seguridad.opcion IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'opcion';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into seguridad.opcion (opcionpadre_id, nombre, url, orden, dashboard, titulodashboard, imagendashboard, estado_id, creadopor, creado) values (par_opcionpadre_id, par_nombre, par_url, par_orden, par_dashboard, par_titulodashboard, par_imagendashboard, par_estado_id, par_usuario_id, var_fechaevento)
					returning opcion_id into par_opcion_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'opcionpadre_id', par_opcion_id, par_opcionpadre_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nombre', par_opcion_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'url', par_opcion_id, par_url, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'orden', par_opcion_id, par_orden, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'dashboard', par_opcion_id, par_dashboard, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'titulodashboard', par_opcion_id, par_titulodashboard, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'imagendashboard', par_opcion_id, par_imagendashboard, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_opcion_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select opcionpadre_id, nombre, url, orden, dashboard, titulodashboard, imagendashboard, estado_id 
				into var_opcionpadre_id_base, var_nombre_base, var_url_base, var_orden_base, var_dashboard_base, var_titulodashboard_base, var_imagendashboard_base, var_estado_id_base 
				from seguridad.opcion where opcion_id = par_opcion_id;
			update seguridad.opcion set opcionpadre_id = par_opcionpadre_id, nombre = par_nombre, url = par_url, orden = par_orden, dashboard = par_dashboard, titulodashboard = par_titulodashboard, imagendashboard = par_imagendashboard, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where opcion_id = par_opcion_id;
			if var_opcionpadre_id_base <> par_opcionpadre_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'opcionpadre_id', par_opcion_id, var_opcionpadre_id_base, par_opcionpadre_id, par_usuario_id, var_fechaevento, par_ip);
			end if;				
			if var_nombre_base <> par_nombre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre', par_opcion_id, var_nombre_base, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_url_base <> par_url then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'url', par_opcion_id, var_url_base, par_url, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_orden_base <> par_orden then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'orden', par_opcion_id, var_orden_base, par_orden, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_dashboard_base <> par_dashboard then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'dashboard', par_opcion_id, var_dashboard_base, par_dashboard, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_titulodashboard_base <> par_titulodashboard then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'titulodashboard', par_opcion_id, var_titulodashboard_base, par_titulodashboard, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_imagendashboard_base <> par_imagendashboard then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'imagendashboard', par_opcion_id, var_imagendashboard_base, par_imagendashboard, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_opcion_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update seguridad.opcion set activo = 'N' where opcion_id = par_opcion_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_opcion_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_opcion_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_opcion_id;	
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION seguridad.mant_opcion(par_opcion_id integer, par_opcionpadre_id integer, par_nombre character varying, par_url character varying, par_orden smallint, par_dashboard boolean, par_titulodashboard character varying, par_imagendashboard character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_opcion(par_opcion_id integer, par_opcionpadre_id integer, par_nombre character varying, par_url character varying, par_orden smallint, par_dashboard boolean, par_titulodashboard character varying, par_imagendashboard character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON FUNCTION seguridad.mant_opcion(par_opcion_id integer, par_opcionpadre_id integer, par_nombre character varying, par_url character varying, par_orden smallint, par_dashboard boolean, par_titulodashboard character varying, par_imagendashboard character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla opcion';


--
-- Name: mant_paginajsf(integer, character varying, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.mant_paginajsf(par_paginajsf_id integer, par_nombre character varying, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_nombre_base character varying;
	var_descripcion_base character varying;	
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE seguridad.paginajsf IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'paginajsf';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into seguridad.paginajsf (nombre, descripcion, estado_id, creadopor, creado) values (par_nombre, par_descripcion, par_estado_id, par_usuario_id, var_fechaevento)
					returning paginajsf_id into par_paginajsf_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'nombre', par_paginajsf_id, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'descripcion', par_paginajsf_id, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_paginajsf_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select nombre, descripcion, estado_id into var_nombre_base, var_descripcion_base, var_estado_id_base from seguridad.paginajsf where paginajsf_id = par_paginajsf_id;
			update seguridad.paginajsf set nombre = par_nombre, descripcion = par_descripcion, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where paginajsf_id = par_paginajsf_id;
			if var_nombre_base <> par_nombre then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'nombre', par_paginajsf_id, var_nombre_base, par_nombre, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_paginajsf_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_paginajsf_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update seguridad.paginajsf set activo = 'N' where paginajsf_id = par_paginajsf_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_paginajsf_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_paginajsf_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_paginajsf_id;	
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION seguridad.mant_paginajsf(par_paginajsf_id integer, par_nombre character varying, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_paginajsf(par_paginajsf_id integer, par_nombre character varying, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON FUNCTION seguridad.mant_paginajsf(par_paginajsf_id integer, par_nombre character varying, par_descripcion character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla paginajsf';


--
-- Name: mant_parametro(integer, character varying, character varying, integer, character, character varying); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.mant_parametro(par_parametro_id integer, par_descripcion character varying, par_valor character varying, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;	
	var_fechaevento timestamp;
	var_descripcion_base character varying;
	var_valor_base character varying;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE seguridad.parametro IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'parametro';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'U' then						
			select descripcion, valor into var_descripcion_base, var_valor_base
					from seguridad.parametro where parametro_id = par_parametro_id;
			update seguridad.parametro set descripcion = par_descripcion, valor = par_valor
							where parametro_id = par_parametro_id;
			if var_descripcion_base <> par_descripcion then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'descripcion', par_parametro_id, var_descripcion_base, par_descripcion, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_valor_base <> par_valor then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'valor', par_parametro_id, var_valor_base, par_valor, par_usuario_id, var_fechaevento, par_ip);
			end if;
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id:=par_parametro_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id:=par_paramtro_id;
    END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION seguridad.mant_parametro(par_parametro_id integer, par_descripcion character varying, par_valor character varying, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_parametro(par_parametro_id integer, par_descripcion character varying, par_valor character varying, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON FUNCTION seguridad.mant_parametro(par_parametro_id integer, par_descripcion character varying, par_valor character varying, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Update de la tabla parametro';


--
-- Name: mant_rol_usuario(integer[], integer, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.mant_rol_usuario(integer[], integer, integer, integer, integer, character, character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $_$

DECLARE
	x int;
	y int;

	par_usuario_selected_id ALIAS FOR $2;
	par_estado_id ALIAS FOR $3;
	par_entidad_educativa ALIAS FOR $4;

	par_usuario_id ALIAS FOR $5;
	par_accion ALIAS FOR $6;
	par_ip ALIAS FOR $7;

	var_tabla character varying;
	var_fechaevento timestamp;
	var_col_ids integer[];
	var_col_n integer[];
	var_col_insert integer[];
	var_col_update integer[];

	--Para el log


	reg_mensaje public.typ_mensajefuncion%rowtype;

BEGIN

	DROP TABLE IF EXISTS actuales_table;
		CREATE TEMP TABLE actuales_table (
				rol_id integer
				);
	

	DROP TABLE IF EXISTS source_table;
		CREATE TEMP TABLE source_table (
				rol_id integer				
				);

	DROP TABLE IF EXISTS target_table;
		CREATE TEMP TABLE target_table (
				rol_id integer
				);	

		
	LOCK TABLE seguridad.rolusuario IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;	
    
    var_tabla := 'rolusuario';
	var_fechaevento := (select current_timestamp);
    
    insert into actuales_table(rol_id)
					SELECT 
								  seguridad.rolusuario.rol_id
								FROM
								  seguridad.rol
								  INNER JOIN seguridad.rolusuario ON (seguridad.rol.rol_id = seguridad.rolusuario.rol_id)
								WHERE
								  seguridad.rolusuario.usuario_id = par_usuario_selected_id
								  AND
								    seguridad.rol.entidadeducativa_id=par_entidad_educativa;					  

IF array_length($1, 1) > 0 THEN		
				


				insert into target_table(rol_id)
					Select z
						FROM    unnest($1) z;						  

			-- Estos son los que debo de colocar el estado N
			var_col_n := ARRAY(
									SELECT A.rol_id from actuales_table A LEFT JOIN  target_table B ON  A.rol_id=B.rol_id WHERE B.rol_id IS NULL
							  );

			--Estos son los que debo de insertar en la tabla seguridad.rolusuario	
			var_col_insert := 	ARRAY(
								SELECT B.rol_id from actuales_table A RIGHT JOIN  target_table B ON  A.rol_id=B.rol_id WHERE A.rol_id IS NULL
								);

			var_col_update := 	ARRAY(
				select * from actuales_table  intersect select * from target_table
				);

					/*Ejemplo
						INSERT INTO user_subservices(user_id, subservice_id) 
						SELECT 1 id, x
						FROM    unnest(ARRAY[1,2,3,4,5,6,7,8,22,33]) x
						*/


				INSERT INTO
						  seguridad.rolusuario(
						  rol_id,
						  usuario_id,
						  estado_id,
						  creadopor,
						  creado
						  )
						Select z,par_usuario_selected_id,par_estado_id,par_usuario_id,var_fechaevento
						FROM    unnest(var_col_insert) z;

				
				update seguridad.rolusuario
				 SET 
				 	activo='S',
				 	actualizadopor=par_usuario_id,
				 	actualizado=var_fechaevento
				 WHERE
				 seguridad.rolusuario.usuario_id=par_usuario_selected_id
				 AND
				seguridad.rolusuario.rol_id  = ANY(var_col_update);


				update seguridad.rolusuario
				 SET 
				 	activo='N',
				 	actualizadopor=par_usuario_id,
				 	actualizado=var_fechaevento
				 WHERE
				 seguridad.rolusuario.usuario_id=par_usuario_selected_id
				 AND
				seguridad.rolusuario.rol_id  = ANY(var_col_n);


--Cuando inserto agrego en el log


				insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						Select 'I',var_tabla,'rol_id',
														(SELECT 
														  seguridad.rolusuario.rolusuario_id
														FROM
														  seguridad.rolusuario
														WHERE
														 seguridad.rolusuario.usuario_id=par_usuario_selected_id
														AND
														  seguridad.rolusuario.rol_id = z),
													  z,
													  par_usuario_id, 
													  var_fechaevento,
													  par_ip	
							FROM    unnest(var_col_insert) z;

						--values ('I', var_tabla, 'rol_id', rolusuario_id, rol_id, par_usuario_id, var_fechaevento, par_ip);


				insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						Select 'I',var_tabla,'usuario_id',
														(SELECT 
														  seguridad.rolusuario.rolusuario_id
														FROM
														  seguridad.rolusuario
														WHERE
														 seguridad.rolusuario.usuario_id=par_usuario_selected_id
														AND
														  seguridad.rolusuario.rol_id = z),
													  par_usuario_selected_id,
													  par_usuario_id, 
													  var_fechaevento,
													  par_ip	
							FROM    unnest(var_col_insert) z;


				insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						Select 'I',var_tabla,'estado_id',
														(SELECT 
														  seguridad.rolusuario.rolusuario_id
														FROM
														  seguridad.rolusuario
														WHERE
														 seguridad.rolusuario.usuario_id=par_usuario_selected_id
														AND
														  seguridad.rolusuario.rol_id = z),
													  par_estado_id,
													  par_usuario_id, 
													  var_fechaevento,
													  par_ip	
							FROM    unnest(var_col_insert) z;

				
				

--Cuando actualizo a S
		insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
					Select 'U',var_tabla,'activo',
														(SELECT 
														  seguridad.rolusuario.rolusuario_id
														FROM
														  seguridad.rolusuario
														WHERE
														 seguridad.rolusuario.usuario_id=par_usuario_selected_id
														AND
														  seguridad.rolusuario.rol_id = z),
													  'N',
													  'S',
													  par_usuario_id, 
													  var_fechaevento,
													  par_ip	
							FROM    unnest(var_col_update) z;
	

--Cuando elimino
	insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
						Select 'D',var_tabla,'activo',
														(SELECT 
														  seguridad.rolusuario.rolusuario_id
														FROM
														  seguridad.rolusuario
														WHERE
														 seguridad.rolusuario.usuario_id=par_usuario_selected_id
														AND
														  seguridad.rolusuario.rol_id = z),
													  'S',
													  'N',
													  par_usuario_id, 
													  var_fechaevento,
													  par_ip	
							FROM    unnest(var_col_n) z;

--FIN DEL LOG


ELSE

-- Estos son los que debo de colocar el estado N
			
      var_col_n := ARRAY(
									 SELECT 
		    								seguridad.rolusuario.rol_id
										FROM
										  seguridad.rolusuario
										  where
										  seguridad.rolusuario.usuario_id=par_usuario_selected_id
							  );

	
update seguridad.rolusuario
				 SET 
				 	activo='N',
				 	actualizadopor=par_usuario_id,
				 	actualizado=var_fechaevento
				 WHERE
				 seguridad.rolusuario.usuario_id=par_usuario_selected_id
				 AND				 
				seguridad.rolusuario.rol_id  = ANY(var_col_n);
                 				 

--Cuando elimino
	insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
						Select 'D',var_tabla,'activo',
														(SELECT 
														  seguridad.rolusuario.rolusuario_id
														FROM
														  seguridad.rolusuario
														WHERE
														 seguridad.rolusuario.usuario_id=par_usuario_selected_id
														AND
														  seguridad.rolusuario.rol_id = z),
													  'S',
													  'N',
													  par_usuario_id, 
													  var_fechaevento,
													  par_ip	
							FROM    unnest(var_col_n) z;	


END IF;

	IF array_length($1, 1) > 0 THEN
		BEGIN
				var_col_ids := ARRAY(
									SELECT 
		    								seguridad.rolusuario.rolusuario_id
										FROM
										  seguridad.rolusuario
										  where
										  seguridad.rolusuario.rol_id= ANY($1) AND
										  seguridad.rolusuario.usuario_id=par_usuario_selected_id AND
										  seguridad.rolusuario.estado_id=par_estado_id
									);


				   FOREACH y IN ARRAY var_col_ids 
				   LOOP
				      	--RAISE NOTICE 'row = %', x;

				      	reg_mensaje.error := 0;
						reg_mensaje.mensaje := 'Operación realizada con éxito'; 
						reg_mensaje.id := y;

						RETURN next reg_mensaje;

				  END LOOP;


				  EXCEPTION WHEN OTHERS THEN
						reg_mensaje.error := 1;
						reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
						reg_mensaje.id := y;
				   RETURN next reg_mensaje;
		END;
	ELSE
    	BEGIN	
    		FOREACH y IN ARRAY var_col_n
				  		LOOP

				      	--RAISE NOTICE 'row = %', x;

				      	reg_mensaje.error := 0;
						reg_mensaje.mensaje := 'Operación realizada con éxito'; 
						reg_mensaje.id := y;



						RETURN next reg_mensaje;

				  END LOOP;

				  	EXCEPTION WHEN OTHERS THEN
						reg_mensaje.error := 1;
						reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
						reg_mensaje.id := y;
					RETURN next reg_mensaje;
    		END;
    
    		  	
	END IF;					
  	

	DROP TABLE IF EXISTS source_table;
	DROP TABLE IF EXISTS target_table;
	DROP TABLE IF EXISTS actuales_table;
	
END;
$_$;


ALTER FUNCTION seguridad.mant_rol_usuario(integer[], integer, integer, integer, integer, character, character varying) OWNER TO attinae_user;

--
-- Name: mant_roles(integer, character varying, text, integer, integer, integer, character, character varying); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.mant_roles(integer, character varying, text, integer, integer, integer, character, character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $_$
DECLARE
	par_rol_id ALIAS FOR $1;
	par_nombre ALIAS FOR $2;
	par_descripcion ALIAS FOR $3;
	par_entidad_educativa ALIAS FOR $4;
	par_estado_id ALIAS FOR $5;

	par_usuario_id ALIAS FOR $6;
	par_accion ALIAS FOR $7;
	par_ip ALIAS FOR $8;

    var_tabla character varying;
    var_fechaevento timestamp;

    var_items_requisito_id_base INTEGER;
    var_rol_id_base INTEGER ;
    var_entidad_educativa_base INTEGER;
    var_nombre_base VARCHAR;
    var_descripcion_base TEXT;
    var_estado_id_base INTEGER;

reg_mensaje public.typ_mensajefuncion%rowtype;

	BEGIN
		LOCK TABLE academico.items_requisitos IN EXCLUSIVE MODE;
		LOCK TABLE seguridad.log IN EXCLUSIVE MODE;

		IF par_rol_id=0 THEN
			par_accion:='I';
		END IF;
		

		BEGIN 
			var_tabla := 'rol';
			var_fechaevento := (select current_timestamp);
					if par_accion = 'I' then

								INSERT INTO
								  seguridad.rol(
								  nombre,
								  descripcion,
								  entidadeducativa_id,
								  estado_id,
								  creadopor,
								  creado)
								VALUES(
								  par_nombre,
								  par_descripcion,
								  par_entidad_educativa,
								  par_estado_id,
								  par_usuario_id,
								  var_fechaevento)
								returning rol_id into par_rol_id;


							perform seguridad.func_guardar_log(par_accion,var_tabla,'nombre',par_rol_id,null::text,par_nombre::text,par_usuario_id,var_fechaevento,par_ip);
							perform seguridad.func_guardar_log(par_accion,var_tabla,'descripcion',par_rol_id,null::text,par_descripcion::text,par_usuario_id,var_fechaevento,par_ip);
							perform seguridad.func_guardar_log(par_accion,var_tabla,'entidadeducativa_id',par_rol_id,null::text,par_entidad_educativa::text,par_usuario_id,var_fechaevento,par_ip);
							perform seguridad.func_guardar_log(par_accion,var_tabla,'estado_id',par_rol_id,null::text,par_estado_id::text,par_usuario_id,var_fechaevento,par_ip);	


								
											

					elsif par_accion = 'U' then

								SELECT 								  
								  seguridad.rol.nombre,
								  seguridad.rol.descripcion,								  
								  seguridad.rol.estado_id
								  INTO
									var_nombre_base,
									var_descripcion_base,																	
									var_estado_id_base
								FROM
								  seguridad.rol
								WHERE
								  seguridad.rol.rol_id = par_rol_id AND 
								  seguridad.rol.entidadeducativa_id = par_entidad_educativa;

								  
								UPDATE 
									  seguridad.rol
									SET
									  nombre = par_nombre,
									  descripcion = par_descripcion,
									  estado_id = par_estado_id
								WHERE
								  seguridad.rol.rol_id = par_rol_id AND 
								  seguridad.rol.entidadeducativa_id = par_entidad_educativa;


								if var_nombre_base<>par_nombre then 
    								perform seguridad.func_guardar_log(par_accion,var_tabla,'nombre',par_rol_id,var_nombre_base::text,par_nombre::text,par_usuario_id,var_fechaevento,par_ip);	
								end if;


								if var_descripcion_base<>par_descripcion then 
    								perform seguridad.func_guardar_log(par_accion,var_tabla,'descripcion',par_rol_id,var_descripcion_base::text,par_descripcion::text,par_usuario_id,var_fechaevento,par_ip);	
								end if;


								
								if var_estado_id_base<>par_estado_id then 
    								perform seguridad.func_guardar_log(par_accion,var_tabla,'estado_id',par_rol_id,var_estado_id_base::text,par_estado_id::text,par_usuario_id,var_fechaevento,par_ip);	
								end if;
 
							

				
					ELSIF par_accion = 'D' then			

							DELETE 
                            FROM
                              seguridad.rolopcion
                            WHERE
                              seguridad.rolopcion.rol_id = par_rol_id;
                    		
                            
                            DELETE  from seguridad.rol 
                            WHERE
                            seguridad.rol.rol_id = par_rol_id AND 
								  seguridad.rol.entidadeducativa_id = par_entidad_educativa;
                    
                    /*
							UPDATE 
							  seguridad.rol
							SET
							  activo = 'N'
							WHERE
							 	seguridad.rol.rol_id = par_rol_id AND 
								  seguridad.rol.entidadeducativa_id = par_entidad_educativa;
					*/

							INSERT INTO
								  seguridad.log(
								  evento,
								  tabla,
								  registro_id,
								  usuario_id,
								  fecha_evento,
								  ip)
								VALUES(
								  'D',
								  var_tabla,
								  par_rol_id,
								  par_usuario_id,
								  var_fechaevento,
								  par_ip);
						

					END IF;

						reg_mensaje.error := 0;
						reg_mensaje.mensaje := 'Operación realizada con éxito'; 
						reg_mensaje.id := par_rol_id;
						EXCEPTION WHEN OTHERS THEN
						reg_mensaje.error := 1;
						reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
						reg_mensaje.id := par_rol_id;
						END;
				        RETURN next reg_mensaje;
						
		END;
$_$;


ALTER FUNCTION seguridad.mant_roles(integer, character varying, text, integer, integer, integer, character, character varying) OWNER TO attinae_user;

--
-- Name: mant_rolesopcion(integer[], integer, integer, character, character varying); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.mant_rolesopcion(integer[], integer, integer, character, character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $_$
DECLARE
	x int;
	par_rol_id ALIAS FOR $2;

	par_usuario_id ALIAS FOR $3;
	par_accion ALIAS FOR $4;
	par_ip ALIAS FOR $5;

reg_mensaje public.typ_mensajefuncion%rowtype;

BEGIN
		
	LOCK TABLE seguridad.rolopcion IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
		BEGIN 
				UPDATE 
			  	seguridad.rolopcion
				SET
				  estado_id = 2
				WHERE
				  seguridad.rolopcion.rol_id = par_rol_id;

					UPDATE 
				  	seguridad.rolopcion
					SET
					  estado_id = 1
					WHERE
					seguridad.rolopcion.rol_id = par_rol_id
					AND
					  seguridad.rolopcion.opcion_id = ANY($1);

					UPDATE 
				  			seguridad.rolopcion
					SET
						estado_id = 1
					WHERE
						seguridad.rolopcion.rol_id = par_rol_id
						AND
						seguridad.rolopcion.opcion_id in (select opcionpadre_id from seguridad.opcion where opcion_id = ANY($1));

				   FOREACH x IN ARRAY $1
				  		LOOP

						
							
				      	--RAISE NOTICE 'row = %', x;

				      	reg_mensaje.error := 0;
						reg_mensaje.mensaje := 'Operación realizada con éxito'; 
						reg_mensaje.id := x;

						RETURN next reg_mensaje;

				  END LOOP;

				  	EXCEPTION WHEN OTHERS THEN
						reg_mensaje.error := 1;
						reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
						reg_mensaje.id := x;
					RETURN next reg_mensaje;
				  	
						
  		END;

	
	
END;
$_$;


ALTER FUNCTION seguridad.mant_rolesopcion(integer[], integer, integer, character, character varying) OWNER TO attinae_user;

--
-- Name: mant_usuario(integer, character varying, integer, character varying, character varying, character varying, character varying, character varying, character varying, character varying, integer, integer, character, character varying); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.mant_usuario(par_user_id integer, par_login character varying, par_persona_id integer, par_password character varying DEFAULT ''::character varying, par_pregunta_1 character varying DEFAULT ''::character varying, par_respuesta_1 character varying DEFAULT ''::character varying, par_pregunta_2 character varying DEFAULT ''::character varying, par_respuesta_2 character varying DEFAULT ''::character varying, par_pregunta_3 character varying DEFAULT ''::character varying, par_respuesta_3 character varying DEFAULT ''::character varying, par_estado_id integer DEFAULT 1, par_usuario_id integer DEFAULT 0, par_accion character DEFAULT ''::bpchar, par_ip character varying DEFAULT ''::character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_login_base character varying;
	var_persona_id_base integer;
	var_password_base character varying;
	var_pregunta_1_base character varying;
	var_respuesta_1_base character varying;
	var_pregunta_2_base character varying;
	var_respuesta_2_base character varying;
	var_pregunta_3_base character varying;
	var_respuesta_3_base character varying;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE seguridad.usuario IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'usuario';
		var_fechaevento := (select current_timestamp);
		if par_accion = 'I' then
			insert into seguridad.usuario (login, persona_id, password, pregunta_1, respuesta_1, pregunta_2, respuesta_2, pregunta_3, respuesta_3, estado_id, creadopor, creado) 
					values (par_login, par_persona_id, case when par_password = '' then '' else md5(par_password) end, par_pregunta_1, par_respuesta_1, par_pregunta_2, par_respuesta_2, par_pregunta_3, par_respuesta_3, par_estado_id, par_usuario_id, var_fechaevento)
					returning usuario_id into par_user_id;
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'login', par_user_id, par_login, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'persona_id', par_user_id, par_persona_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'password', par_user_id, case when par_password = '' then '' else md5(par_password) end, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'pregunta_1', par_user_id, par_pregunta_1, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'respuesta_1', par_user_id, par_pregunta_1, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'pregunta_2', par_user_id, par_pregunta_1, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'respuesta_2', par_user_id, par_pregunta_1, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'pregunta_3', par_user_id, par_pregunta_1, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'respuesta_3', par_user_id, par_pregunta_1, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', par_user_id, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
		elsif par_accion = 'U' then
			select login, persona_id, password, pregunta_1, respuesta_1, pregunta_2, respuesta_2, pregunta_3, respuesta_3, estado_id 
				into var_login_base, var_persona_id_base, var_password_base, var_pregunta_1_base, var_respuesta_1_base, var_pregunta_2_base, var_respuesta_2_base, var_pregunta_3_base, var_respuesta_3_base, var_estado_id_base 
				from seguridad.usuario where usuario_id = par_user_id;
			update seguridad.usuario set login = par_login, persona_id = par_persona_id, password = case when par_password = '' then '' else md5(par_password) end, pregunta_1 = par_pregunta_1, respuesta_1 = par_respuesta_1,
							pregunta_2 = par_pregunta_2, respuesta_2 = par_respuesta_2, pregunta_3 = par_pregunta_3, respuesta_3 = par_respuesta_3, estado_id = par_estado_id, actualizadopor = par_usuario_id, actualizado = var_fechaevento 
							where usuario_id = par_user_id;
			if var_login_base <> par_login then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'login_id', par_user_id, var_login_base, par_login, par_usuario_id, var_fechaevento, par_ip);
			end if;				
			if var_persona_id_base <> par_persona_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'persona_id', par_user_id, var_persona_id_base, par_persona_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_password_base <> (case when par_password = '' then '' else md5(par_password) end) then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'password', par_user_id, var_password_base, par_password, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_pregunta_1_base <> par_pregunta_1 then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'pregunta_1', par_user_id, var_pregunta_1_base, par_pregunta_1, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_respuesta_1_base <> par_respuesta_1 then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'respuesta_1', par_user_id, var_respuesta_1_base, par_respuesta_1, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_pregunta_2_base <> par_pregunta_2 then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'pregunta_2', par_user_id, var_pregunta_2_base, par_pregunta_2, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_respuesta_2_base <> par_respuesta_2 then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'respuesta_2', par_user_id, var_respuesta_2_base, par_respuesta_2, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_pregunta_3_base <> par_pregunta_3 then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'pregunta_3', par_user_id, var_pregunta_3_base, par_pregunta_3, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_respuesta_3_base <> par_respuesta_3 then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'respuesta_3', par_user_id, var_respuesta_3_base, par_respuesta_3, par_usuario_id, var_fechaevento, par_ip);
			end if;
			if var_estado_id_base <> par_estado_id then
				insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', par_user_id, var_estado_id_base, par_estado_id, par_usuario_id, var_fechaevento, par_ip);
			end if;
		elsif par_accion = 'D' then			
			update seguridad.usuario set activo = 'N' where usuario_id = par_user_id;
			insert into seguridad.log (evento, tabla, registro_id, usuario_id, fecha_evento, ip)
						values ('D', var_tabla, par_user_id, par_usuario_id, var_fechaevento, par_ip);
		end if;
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := par_user_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := par_user_id;	
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION seguridad.mant_usuario(par_user_id integer, par_login character varying, par_persona_id integer, par_password character varying, par_pregunta_1 character varying, par_respuesta_1 character varying, par_pregunta_2 character varying, par_respuesta_2 character varying, par_pregunta_3 character varying, par_respuesta_3 character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION mant_usuario(par_user_id integer, par_login character varying, par_persona_id integer, par_password character varying, par_pregunta_1 character varying, par_respuesta_1 character varying, par_pregunta_2 character varying, par_respuesta_2 character varying, par_pregunta_3 character varying, par_respuesta_3 character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON FUNCTION seguridad.mant_usuario(par_user_id integer, par_login character varying, par_persona_id integer, par_password character varying, par_pregunta_1 character varying, par_respuesta_1 character varying, par_pregunta_2 character varying, par_respuesta_2 character varying, par_pregunta_3 character varying, par_respuesta_3 character varying, par_estado_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla usuario';


--
-- Name: elementojsf; Type: TABLE; Schema: seguridad; Owner: attinae_user
--

CREATE TABLE seguridad.elementojsf (
    elementojsf_id integer NOT NULL,
    paginajsf_id integer NOT NULL,
    jsf_id_ingreso character varying(150) NOT NULL,
    jsf_id_revision character varying(150) NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE seguridad.elementojsf OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON elementojsf; Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON seguridad.elementojsf IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: revisionelementojsf; Type: TABLE; Schema: seguridad; Owner: attinae_user
--

CREATE TABLE seguridad.revisionelementojsf (
    revisionelementojsf_id integer NOT NULL,
    paginajsf_id integer NOT NULL,
    elementojsf_id integer NOT NULL,
    persona_id integer NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE seguridad.revisionelementojsf OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON revisionelementojsf; Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON seguridad.revisionelementojsf IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: vi_estadoelementojsf; Type: VIEW; Schema: seguridad; Owner: attinae_user
--

CREATE VIEW seguridad.vi_estadoelementojsf AS
 SELECT row_number() OVER () AS rnum,
    re.paginajsf_id,
    re.elementojsf_id,
    re.persona_id,
    ( SELECT elementojsf.jsf_id_ingreso
           FROM seguridad.elementojsf
          WHERE ((elementojsf.elementojsf_id = re.elementojsf_id) AND (elementojsf.estado_id = 1))) AS jsf_id_ingreso,
    ( SELECT elementojsf.jsf_id_revision
           FROM seguridad.elementojsf
          WHERE ((elementojsf.elementojsf_id = re.elementojsf_id) AND (elementojsf.estado_id = 1))) AS jsf_id_revision,
        CASE
            WHEN (re.estado_id = 21) THEN false
            ELSE true
        END AS estado
   FROM seguridad.revisionelementojsf re;


ALTER TABLE seguridad.vi_estadoelementojsf OWNER TO attinae_user;

--
-- Name: proc_get_elementos_jsf(integer, character varying); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.proc_get_elementos_jsf(integer, character varying) RETURNS SETOF seguridad.vi_estadoelementojsf
    LANGUAGE plpgsql
    AS $_$
DECLARE
	inPaginajsf ALIAS FOR $1;
	inCedula ALIAS FOR $2;
	varPersonaId INTEGER;
BEGIN


SELECT
  academico.persona.persona_id INTO varPersonaId
FROM
  academico.persona
  where
    academico.persona.documentoidentificacion=inCedula;

    IF NOT FOUND THEN

	RETURN QUERY
	SELECT
	  row_number() OVER() AS rnum,
	  seguridad.elementojsf.paginajsf_id,
	  seguridad.elementojsf.elementojsf_id,
	  -1 as persona_id,
	  seguridad.elementojsf.jsf_id_ingreso,
	  seguridad.elementojsf.jsf_id_revision,
	  false as estado
	FROM
	  seguridad.elementojsf
	WHERE
	  paginajsf_id = inPaginajsf;
    ELSE
	RETURN QUERY
	 SELECT
	  seguridad.vi_estadoelementojsf.rnum,
	  seguridad.vi_estadoelementojsf.paginajsf_id,
	  seguridad.vi_estadoelementojsf.elementojsf_id,
	  seguridad.vi_estadoelementojsf.persona_id,
	  seguridad.vi_estadoelementojsf.jsf_id_ingreso,
	  seguridad.vi_estadoelementojsf.jsf_id_revision,
	  seguridad.vi_estadoelementojsf.estado
	FROM
	  seguridad.vi_estadoelementojsf
	WHERE
	  seguridad.vi_estadoelementojsf.persona_id = varPersonaId
	  AND
	  seguridad.vi_estadoelementojsf.paginajsf_id=inPaginajsf;


    END IF;

END;
$_$;


ALTER FUNCTION seguridad.proc_get_elementos_jsf(integer, character varying) OWNER TO attinae_user;

--
-- Name: proc_revisionelementojsf_ingreso(integer, integer, integer, character, character varying); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.proc_revisionelementojsf_ingreso(par_paginajsf_id integer, par_persona_id integer, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$
DECLARE
	var_tabla character varying;	
	var_fechaevento timestamp;
	var_revisionelementojsf_id integer;
	var_elementojsf_id integer;
	cur_elementojsf refcursor;	
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE seguridad.revisionelementojsf IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'revisionelementojsf';
		var_fechaevento := (select current_timestamp);
		
		open cur_elementojsf for select elementojsf_id from seguridad.elementojsf where paginajsf_id = par_paginajsf_id and estado_id = 1;
		loop
			fetch cur_elementojsf into var_elementojsf_id;
			exit when not found;
			insert into seguridad.revisionelementojsf (paginajsf_id, elementojsf_id, persona_id, estado_id, creadopor, creado)
				values (par_paginajsf_id, var_elementojsf_id, par_persona_id, 21, par_usuario_id, var_fechaevento)
				returning revisionelementojsf_id into var_revisionelementojsf_id;
				
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'paginajsf_id', var_revisionelementojsf_id, par_paginajsf_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'elementojsf_id', var_revisionelementojsf_id, var_elementojsf_id, par_usuario_id, var_fechaevento, par_ip);
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'persona_id', var_revisionelementojsf_id, par_persona_id, par_usuario_id, var_fechaevento, par_ip);												
			insert into seguridad.log (evento, tabla, columna, registro_id, valor_nuevo, usuario_id, fecha_evento, ip) 
						values ('I', var_tabla, 'estado_id', var_revisionelementojsf_id, 21, par_usuario_id, var_fechaevento, par_ip);
		end loop;
		close cur_elementojsf;

		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id:=var_revisionelementojsf_id;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying; 		
	reg_mensaje.id:=var_revisionelementojsf_id;
    END;
    RETURN next reg_mensaje;
END;
$$;


ALTER FUNCTION seguridad.proc_revisionelementojsf_ingreso(par_paginajsf_id integer, par_persona_id integer, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION proc_revisionelementojsf_ingreso(par_paginajsf_id integer, par_persona_id integer, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON FUNCTION seguridad.proc_revisionelementojsf_ingreso(par_paginajsf_id integer, par_persona_id integer, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza Insert, Update, Delete de la tabla revisionelementojsf';


--
-- Name: proc_revisionelementojsf_revision(integer, character varying, integer, boolean, integer, character, character varying); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.proc_revisionelementojsf_revision(par_paginajsf_id integer, par_jsf_id_revision character varying, par_persona_id integer, par_estado boolean, par_usuario_id integer, par_accion character, par_ip character varying) RETURNS SETOF public.typ_mensajefuncion
    LANGUAGE plpgsql
    AS $$

DECLARE
	var_tabla character varying;
	var_fechaevento timestamp;
	var_elementojsf_id_base integer;
	var_revisionelementojsf_id_base integer;
	var_estado_id_base integer;
	reg_mensaje typ_mensajefuncion%rowtype;
BEGIN
	LOCK TABLE seguridad.revisionelementojsf IN EXCLUSIVE MODE;
	LOCK TABLE seguridad.log IN EXCLUSIVE MODE;
	BEGIN
		var_tabla := 'revisionelementojsf';		
		var_fechaevento := (select current_timestamp);

		select elementojsf_id into var_elementojsf_id_base from seguridad.elementojsf where jsf_id_revision = par_jsf_id_revision;
		select revisionelementojsf_id, estado_id into var_revisionelementojsf_id_base, var_estado_id_base from seguridad.revisionelementojsf where paginaisf_id = par_paginajsf_id and elementojsf_id = var_elementojsf_id_base and persona_id = par_persona_id and estado_id  = 21;
		

		update seguridad.revisionelementojsf set estado_id = case when par_estado then 22 else 21 end where revisionelementojsf_id = var_revisionelementojsf_id_base;

		insert into seguridad.log (evento, tabla, columna, registro_id, valor_anterior, valor_nuevo, usuario_id, fecha_evento, ip)
							values ('U', var_tabla, 'estado_id', revisionelementojsf_id, var_estado_id_base, case when par_estado then 22 else 21 end, par_usuario_id, var_fechaevento, par_ip);
		
		reg_mensaje.error := 0;
		reg_mensaje.mensaje := 'Operación realizada con éxito'; 
		reg_mensaje.id := var_revisionelementojsf_id_base;
	EXCEPTION WHEN OTHERS THEN
	reg_mensaje.error := 1;
	reg_mensaje.mensaje := 'Error al realizar operación en la Base de Datos: ' || SQLERRM::character varying || ' - '  || SQLSTATE::character varying;
	reg_mensaje.id := var_revisionelementojsf_id_base;	
	END;
    RETURN next reg_mensaje;
END;

$$;


ALTER FUNCTION seguridad.proc_revisionelementojsf_revision(par_paginajsf_id integer, par_jsf_id_revision character varying, par_persona_id integer, par_estado boolean, par_usuario_id integer, par_accion character, par_ip character varying) OWNER TO attinae_user;

--
-- Name: FUNCTION proc_revisionelementojsf_revision(par_paginajsf_id integer, par_jsf_id_revision character varying, par_persona_id integer, par_estado boolean, par_usuario_id integer, par_accion character, par_ip character varying); Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON FUNCTION seguridad.proc_revisionelementojsf_revision(par_paginajsf_id integer, par_jsf_id_revision character varying, par_persona_id integer, par_estado boolean, par_usuario_id integer, par_accion character, par_ip character varying) IS 'Realiza update del campo estado_id de la tabla revisionelementojsf';


--
-- Name: trg_add_opcion_en_rolopcion(); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.trg_add_opcion_en_rolopcion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	DECLARE mirolId INTEGER;
BEGIN


		IF TG_OP = 'INSERT' THEN
			
			FOR mirolId IN
        		SELECT DISTINCT
						  seguridad.rolopcion.rol_id
						FROM
						  seguridad.rolopcion
		    LOOP
		        INSERT INTO
					  seguridad.rolopcion(
					  rol_id,
					  opcion_id,
					  estado_id,
					  creadopor,
					  creado)
					VALUES(
					  mirolId,	
					  NEW.opcion_id,
					  2,
					  NEW.creadopor,
					  NEW.creado);
		    END LOOP;
		

	   END IF;
		
	 RETURN NEW;
	END;
$$;


ALTER FUNCTION seguridad.trg_add_opcion_en_rolopcion() OWNER TO attinae_user;

--
-- Name: trg_add_permisios_on_roles(); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.trg_add_permisios_on_roles() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN

		IF TG_OP = 'INSERT' THEN

			INSERT INTO
						seguridad.rolopcion(
						  rol_id,
						  opcion_id,
						  estado_id,
						  creadopor,
						  creado)
			SELECT 
			  NEW.rol_id,
			  seguridad.opcion.opcion_id,
			  2,
			  NEW.creadopor,
			  NEW.creado			  
			FROM
			  seguridad.opcion;


		ELSIF TG_OP = 'UPDATE' THEN 







	   ELSIF TG_OP='DELETE' THEN
	   	/*
           	UPDATE 
			  seguridad.rolopcion
			SET
			activo = 'N'
			WHERE
			rol_id = NEW.rol_id;

*/


	   END IF;
		
	 RETURN NEW;
	END;
$$;


ALTER FUNCTION seguridad.trg_add_permisios_on_roles() OWNER TO attinae_user;

--
-- Name: trg_valida_login_usuario(); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.trg_valida_login_usuario() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT') then
	begin
		if exists (select login from seguridad.usuario where login = NEW.login and activo = 'S') then
		begin
			raise exception 'Login o nombre usuario ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	elsif (TG_OP = 'UPDATE') then
	begin
		if exists (select login from seguridad.usuario where login = NEW.login and activo = 'S') and (OLD.login <> NEW.login) then
		begin
			raise exception 'Login o nombre usuario ya existe'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION seguridad.trg_valida_login_usuario() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_login_usuario(); Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON FUNCTION seguridad.trg_valida_login_usuario() IS 'Verifica Usuario repetidos campo login';


--
-- Name: trg_valida_opcion(); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.trg_valida_opcion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  DECLARE
  
  BEGIN
	if (TG_OP = 'UPDATE') then
	begin
		if (NEW.activo = 'N') and exists(select opcion_id from seguridad.opcion where opcionpadre_id = NEW.opcion_id ) then
		begin
			raise exception 'No se puede eliminar opción raíz porque tiene opciones asociadas.'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	end if;
  END;
$$;


ALTER FUNCTION seguridad.trg_valida_opcion() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_opcion(); Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON FUNCTION seguridad.trg_valida_opcion() IS 'Verifica opciones hijas asociadas a opcion raiz';


--
-- Name: trg_valida_persona_usuario(); Type: FUNCTION; Schema: seguridad; Owner: attinae_user
--

CREATE FUNCTION seguridad.trg_valida_persona_usuario() RETURNS trigger
    LANGUAGE plpgsql
    AS $$  DECLARE
  
  BEGIN
	if (TG_OP = 'INSERT') then
	begin
		if exists (select persona_id from seguridad.usuario where persona_id = NEW.persona_id and activo = 'S') then
		begin
			raise exception 'Persona ya tiene usuario asignado';
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	elsif (TG_OP = 'UPDATE') then
	begin
		if exists (select persona_id from seguridad.usuario where persona_id = NEW.persona_id and activo = 'S') and (OLD.persona_id <> NEW.persona_id) then
		begin
			raise exception 'Persona ya tiene usuario asignado'; 
			return null;
		end;
		else
			return NEW;
		end if;
	end;
	else
		return NEW;
	end if;
  END;$$;


ALTER FUNCTION seguridad.trg_valida_persona_usuario() OWNER TO attinae_user;

--
-- Name: FUNCTION trg_valida_persona_usuario(); Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON FUNCTION seguridad.trg_valida_persona_usuario() IS 'Verifica Usuario repetidos campo persona_id';


--
-- Name: anio_lectivo; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.anio_lectivo (
    anio_lectivo_id integer NOT NULL,
    anio character varying(9),
    entidad_educativa integer NOT NULL,
    creadopor integer NOT NULL,
    estado_id integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.anio_lectivo OWNER TO attinae_user;

--
-- Name: COLUMN anio_lectivo.activo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON COLUMN academico.anio_lectivo.activo IS 'Para registro de borrado lógico';


--
-- Name: CONSTRAINT chk_activo ON anio_lectivo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.anio_lectivo IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: aspirante; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.aspirante (
    persona_id integer NOT NULL,
    unidadeducativa_id integer,
    titulobachiller character varying(200),
    fechagraduacion date,
    calificacionsobre smallint,
    calificaciongraduacion numeric(4,2),
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.aspirante OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON aspirante; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.aspirante IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: calificacion; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.calificacion (
    calificacion_id integer NOT NULL,
    descripcion character varying(100) NOT NULL,
    tipocalificacion character(1) NOT NULL,
    permitedecimales character(1),
    valorminimo numeric(9,2),
    valormaximo numeric(9,2),
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar]))),
    CONSTRAINT chk_tipocalificacion CHECK ((tipocalificacion = ANY (ARRAY['N'::bpchar, 'S'::bpchar])))
);


ALTER TABLE academico.calificacion OWNER TO attinae_user;

--
-- Name: calificacionestudiante; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.calificacionestudiante (
    calificacionestudiante_id integer NOT NULL,
    paraleloestudiante_id integer NOT NULL,
    parcial_id integer NOT NULL,
    calificacion_numerica numeric,
    calificacion_equivalencia text,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.calificacionestudiante OWNER TO attinae_user;

--
-- Name: campoformacion; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.campoformacion (
    campoformacion_id integer NOT NULL,
    descripcion character varying(100) NOT NULL,
    color character varying(10),
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.campoformacion OWNER TO attinae_user;

--
-- Name: carrera; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.carrera (
    carrera_id integer NOT NULL,
    facultad_id integer NOT NULL,
    codigo character varying(10) NOT NULL,
    nombre character varying(100) NOT NULL,
    titulo_ofrece character varying(100) NOT NULL,
    entidad_educativa integer NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    cantidad_ciclo smallint NOT NULL,
    creditos smallint,
    precompetencias text,
    competencias text,
    perfilprofesional text,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar]))),
    CONSTRAINT chk_cantidad_ciclo CHECK ((cantidad_ciclo > 0))
);


ALTER TABLE academico.carrera OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON carrera; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.carrera IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: ciclo; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.ciclo (
    ciclo_id integer NOT NULL,
    descripcion character varying(100) NOT NULL,
    orden smallint NOT NULL,
    color character varying(10),
    entidad_educativa integer NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar]))),
    CONSTRAINT chk_orden CHECK ((orden > 0))
);


ALTER TABLE academico.ciclo OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON ciclo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.ciclo IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: ciudad; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.ciudad (
    ciudad_id integer NOT NULL,
    provincia_id integer NOT NULL,
    nombre character varying NOT NULL,
    eslocal boolean DEFAULT false NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.ciudad OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON ciudad; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.ciudad IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: cursocertificacion; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.cursocertificacion (
    cursocertificacion_id integer NOT NULL,
    entidad_educativa integer NOT NULL,
    facultad_id integer NOT NULL,
    codigo character varying(10) NOT NULL,
    nombre character varying(100) NOT NULL,
    nombre_certificado character varying(100) NOT NULL,
    cantidad_ciclo smallint NOT NULL,
    creditos smallint,
    precompetencias text,
    competencias text,
    perfilprofesional text,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.cursocertificacion OWNER TO attinae_user;

--
-- Name: cursonivelacion; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.cursonivelacion (
    cursonivelacion_id integer NOT NULL,
    aniolectivo_id integer NOT NULL,
    periodo_id integer NOT NULL,
    carrera_id integer,
    descripcion character varying(200) NOT NULL,
    entidadeducativa_id integer NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    planificacioncarrera_id integer,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.cursonivelacion OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON cursonivelacion; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.cursonivelacion IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: cursonivelacionjornada; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.cursonivelacionjornada (
    cursonivelacionjornada_id integer NOT NULL,
    cursonivelacion_id integer NOT NULL,
    jornada_id integer NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    paralelo character(1) NOT NULL,
    cupo smallint,
    cantregistrado smallint DEFAULT 0,
    cantprerregistrado smallint DEFAULT 0,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.cursonivelacionjornada OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON cursonivelacionjornada; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.cursonivelacionjornada IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: desglosecalificaciconestudiante; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.desglosecalificaciconestudiante (
    desglosecalificacionestudiante_id integer NOT NULL,
    calificacionestudiante_id integer NOT NULL,
    desgloseevaluacion_id integer NOT NULL,
    calificacion_numerica numeric,
    calificacion_equivalencia text,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.desglosecalificaciconestudiante OWNER TO attinae_user;

--
-- Name: desgloseevaluacion; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.desgloseevaluacion (
    desgloseevaluacion_id integer NOT NULL,
    mallaelemento_id integer NOT NULL,
    detallemodoevaluacion_id integer NOT NULL,
    porcentajecalificacion numeric NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    desdeintegradora boolean DEFAULT false NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar]))),
    CONSTRAINT chk_porcentajecalificacion CHECK ((porcentajecalificacion > (0)::numeric))
);


ALTER TABLE academico.desgloseevaluacion OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON desgloseevaluacion; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.desgloseevaluacion IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: detallecalificacion; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.detallecalificacion (
    detallecalificacion_id integer NOT NULL,
    calificacion_id integer NOT NULL,
    calificacion text NOT NULL,
    valornumerico numeric NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.detallecalificacion OWNER TO attinae_user;

--
-- Name: detallemodoevaluacion; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.detallemodoevaluacion (
    detallemodoevaluacion_id integer NOT NULL,
    modoevaluacion_id integer NOT NULL,
    descripcion character varying(100) NOT NULL,
    porcentajecalificacion numeric NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    desdeintegradora boolean DEFAULT false NOT NULL,
    calificacion_id integer,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar]))),
    CONSTRAINT chk_porcentajecalificacion CHECK ((porcentajecalificacion > (0)::numeric))
);


ALTER TABLE academico.detallemodoevaluacion OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON detallemodoevaluacion; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.detallemodoevaluacion IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: docente; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.docente (
    persona_id integer NOT NULL,
    observacion text,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    titulo_id integer,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.docente OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON docente; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.docente IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: elementoeducativo; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.elementoeducativo (
    elementoeducativo_id integer NOT NULL,
    codigo character varying(10) NOT NULL,
    nombre character varying(100) NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.elementoeducativo OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON elementoeducativo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.elementoeducativo IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: elementointegra; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.elementointegra (
    elementointegra_id integer NOT NULL,
    mallaelemento_id integer NOT NULL,
    elementoeducativo_id integer NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.elementointegra OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON elementointegra; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.elementointegra IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: entidadeducativa; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.entidadeducativa (
    entidadeducativa_id integer NOT NULL,
    codigo character varying(10) NOT NULL,
    nombre character varying(100) NOT NULL,
    descripcion text NOT NULL,
    direccion character varying(500),
    telefonoconvencional character varying(15) NOT NULL,
    telefonocelular character varying(10),
    email character varying(50),
    ruc character varying(15) NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.entidadeducativa OWNER TO attinae_user;

--
-- Name: COLUMN entidadeducativa.activo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON COLUMN academico.entidadeducativa.activo IS 'Para registro de borrado lógico';


--
-- Name: CONSTRAINT chk_activo ON entidadeducativa; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.entidadeducativa IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: estadocivil; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.estadocivil (
    estadocivil_id integer NOT NULL,
    descripcion character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.estadocivil OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON estadocivil; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.estadocivil IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: estudiante; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.estudiante (
    persona_id integer NOT NULL,
    observacion text,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.estudiante OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON estudiante; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.estudiante IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: etnia; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.etnia (
    etnia_id integer NOT NULL,
    descripcion character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.etnia OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON etnia; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.etnia IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: facultad; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.facultad (
    facultad_id integer NOT NULL,
    codigo character varying(10) NOT NULL,
    nombre character varying(100) NOT NULL,
    estado_id integer NOT NULL,
    creadorpor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.facultad OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON facultad; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.facultad IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: formapago; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.formapago (
    formapago_id integer NOT NULL,
    descripcion character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    abreviatura character(2),
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.formapago OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON formapago; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.formapago IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: identidadgenero; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.identidadgenero (
    identidadgenero_id integer NOT NULL,
    descripcion character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.identidadgenero OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON identidadgenero; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.identidadgenero IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: idioma; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.idioma (
    idioma_id integer NOT NULL,
    descripcion character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    eslocal boolean DEFAULT false NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.idioma OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON idioma; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.idioma IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: items_requisitos; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.items_requisitos (
    items_requisito_id integer NOT NULL,
    fk_id integer NOT NULL,
    color character varying(10),
    orden integer,
    descripcion character varying NOT NULL,
    entidad_educativa integer NOT NULL,
    precio numeric(10,2),
    tipo character(1) NOT NULL,
    anio_id integer NOT NULL,
    periodo_id integer,
    semestre_id integer,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar]))),
    CONSTRAINT chk_tipo CHECK ((tipo = ANY (ARRAY['R'::bpchar, 'D'::bpchar])))
);


ALTER TABLE academico.items_requisitos OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_tipo ON items_requisitos; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_tipo ON academico.items_requisitos IS 'Donde R me indica que es un rubro
y D me indica que es un documento';


--
-- Name: jornada; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.jornada (
    jornada_id integer NOT NULL,
    descripcion character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.jornada OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON jornada; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.jornada IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: malla; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.malla (
    malla_id integer NOT NULL,
    carrera_id integer NOT NULL,
    codigo character varying(10) NOT NULL,
    descripcion character varying(100) NOT NULL,
    cantidadciclo smallint NOT NULL,
    fechainicio date NOT NULL,
    fechacaducidad date NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    numeroresolucion character varying(20),
    fechaaprobacioninterna date,
    fechaaprobacionexterna date,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar]))),
    CONSTRAINT chk_cantidadciclo CHECK ((cantidadciclo > 0)),
    CONSTRAINT chk_fechainiciocaducidad CHECK ((fechacaducidad > fechainicio))
);


ALTER TABLE academico.malla OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON malla; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.malla IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: mallaciclo; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.mallaciclo (
    mallaciclo_id integer NOT NULL,
    malla_id integer NOT NULL,
    ciclo_id integer NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    unidadformacion_id integer,
    nucleoproblemico_id integer,
    resultadoaprendizaje text,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.mallaciclo OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON mallaciclo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.mallaciclo IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: mallaelemento; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.mallaelemento (
    mallaelemento_id integer NOT NULL,
    malla_id integer NOT NULL,
    ciclo_id integer NOT NULL,
    elementoeducativo_id integer NOT NULL,
    campoformacion_id integer NOT NULL,
    modoevaluacion_id integer NOT NULL,
    creditos smallint NOT NULL,
    entidad_educativa integer NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    mallaciclo_id integer NOT NULL,
    integradora boolean DEFAULT false NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.mallaelemento OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON mallaelemento; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.mallaelemento IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: modoevaluacion; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.modoevaluacion (
    modoevaluacion_id integer NOT NULL,
    descripcion character varying(100) NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    paraintegrar boolean DEFAULT false NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.modoevaluacion OWNER TO attinae_user;

--
-- Name: nacionalidad; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.nacionalidad (
    nacionalidad_id integer NOT NULL,
    descripcion character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    eslocal boolean DEFAULT false,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.nacionalidad OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON nacionalidad; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.nacionalidad IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: nucleoproblemico; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.nucleoproblemico (
    nucleoproblemico_id integer NOT NULL,
    carrera_id integer NOT NULL,
    descripcion character varying(100) NOT NULL,
    contenido text NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.nucleoproblemico OWNER TO attinae_user;

--
-- Name: operadora; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.operadora (
    operadora_id integer NOT NULL,
    descripcion character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL
);


ALTER TABLE academico.operadora OWNER TO attinae_user;

--
-- Name: ordenpago; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.ordenpago (
    ordenpago_id integer NOT NULL,
    numeroorden character varying(20),
    persona_id integer NOT NULL,
    registronivelacion_id integer,
    registroperiodo_id integer,
    banco character varying(250),
    numerocuenta character varying(250),
    tipocuenta character varying(250),
    fechageneracion timestamp without time zone NOT NULL,
    fechapago timestamp without time zone,
    estado_id integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    fechamaximapago timestamp without time zone NOT NULL,
    creadopor integer,
    concepto character varying(250),
    formapago_id integer,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.ordenpago OWNER TO attinae_user;

--
-- Name: COLUMN ordenpago.registroperiodo_id; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON COLUMN academico.ordenpago.registroperiodo_id IS 'Para el id de registro del estudiante normal en el semestre';


--
-- Name: COLUMN ordenpago.estado_id; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON COLUMN academico.ordenpago.estado_id IS 'ámbito 4';


--
-- Name: COLUMN ordenpago.activo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON COLUMN academico.ordenpago.activo IS 'Para registro de borrado lógico';


--
-- Name: CONSTRAINT chk_activo ON ordenpago; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.ordenpago IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pais; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.pais (
    pais_id integer NOT NULL,
    nombre character varying NOT NULL,
    eslocal boolean DEFAULT false NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.pais OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON pais; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.pais IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: paralelo; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.paralelo (
    paralelo_id integer NOT NULL,
    anio_lectivo_id integer NOT NULL,
    periodo_id integer NOT NULL,
    carrera_id integer NOT NULL,
    malla_id integer NOT NULL,
    ciclo_id integer NOT NULL,
    elementoeducativo_id integer NOT NULL,
    paralelo character(1) NOT NULL,
    cupo smallint NOT NULL,
    disponible smallint NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    jornada_id integer,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.paralelo OWNER TO attinae_user;

--
-- Name: COLUMN paralelo.activo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON COLUMN academico.paralelo.activo IS 'Para registro de borrado lógico';


--
-- Name: CONSTRAINT chk_activo ON paralelo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.paralelo IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: paralelodocente; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.paralelodocente (
    paralelodocente_id integer NOT NULL,
    paralelo_id integer NOT NULL,
    persona_id integer NOT NULL,
    observacion text,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.paralelodocente OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON paralelodocente; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.paralelodocente IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: paraleloestudiante; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.paraleloestudiante (
    paraleloestudiante_id integer NOT NULL,
    paralelo_id integer NOT NULL,
    persona_id integer NOT NULL,
    tipoaprobacionmateria integer,
    observacion text,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    fechamatriculacion date,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.paraleloestudiante OWNER TO attinae_user;

--
-- Name: parcial; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.parcial (
    parcial_id integer NOT NULL,
    periodo_id integer NOT NULL,
    codigo character varying(10) NOT NULL,
    descripcion character varying(60),
    fecha_inicio date NOT NULL,
    fecha_fin date NOT NULL,
    estado_id integer NOT NULL,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    fechaexamen_inicio date,
    fechaexamen_fin date,
    calificacioncondesglose boolean,
    porcentajeponderacion numeric,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar]))),
    CONSTRAINT chk_fecha_fin CHECK ((fecha_fin > fecha_inicio)),
    CONSTRAINT chk_fechaexamen_fin CHECK (((fechaexamen_fin > fechaexamen_inicio) AND ((fechaexamen_fin >= fecha_inicio) AND (fechaexamen_fin <= fecha_fin)))),
    CONSTRAINT chk_fechaexamen_inicio CHECK (((fechaexamen_inicio >= fecha_inicio) AND (fechaexamen_inicio <= fecha_fin)))
);


ALTER TABLE academico.parcial OWNER TO attinae_user;

--
-- Name: parroquia; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.parroquia (
    parroquia_id integer NOT NULL,
    ciudad_id integer NOT NULL,
    nombre character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.parroquia OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON parroquia; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.parroquia IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: periodo; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.periodo (
    periodo_id integer NOT NULL,
    anio_lectivo_id integer,
    codigo character varying(10) NOT NULL,
    descripcion character varying(60),
    fecha_inicio date NOT NULL,
    fecha_fin date NOT NULL,
    nota_minima smallint NOT NULL,
    nota_maxima smallint NOT NULL,
    estado_id integer NOT NULL,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar]))),
    CONSTRAINT chk_fecha_fin CHECK ((fecha_fin > fecha_inicio)),
    CONSTRAINT chk_nota_maxima CHECK (((nota_maxima > 0) AND (nota_maxima > nota_minima))),
    CONSTRAINT chk_nota_minima CHECK ((nota_minima > 0))
);


ALTER TABLE academico.periodo OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON periodo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.periodo IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: persona; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.persona (
    persona_id integer NOT NULL,
    tipopersona character(1),
    documentoidentificacion character varying(15) NOT NULL,
    nombre1 character varying(50) NOT NULL,
    nombre2 character varying(50),
    apellido1 character varying(50) NOT NULL,
    apellido2 character varying(50),
    fechanacimiento date,
    direccion character varying(500),
    telefonoconvencional character varying(10),
    telefonocelular character varying(10),
    operadora_fk integer,
    emailpersonal character varying(50),
    emailinstitucional character varying(50),
    nacionalidad_id integer,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    fechaingreso date,
    estado_id integer NOT NULL,
    tipodocumento_id integer,
    sexo_id integer,
    identidadgenero_id integer,
    estadocivil_id integer,
    tiposangre character varying(5),
    tipodiscapacidad_id integer,
    porcentajediscapacidad smallint,
    descripciondiscapacidad text,
    idioma_id integer,
    etnia_id integer,
    paisnacimiento_id integer,
    provincianacimiento_id integer,
    ciudadnacimiento_id integer,
    parroquianacimiento_id integer,
    personacontacto character varying(200),
    telefonoconctacto character varying(10),
    paisdomicilio_id integer,
    provinciadomicilio_id integer,
    ciudaddomicilio_id integer,
    parroquiadomicilio_id integer,
    barrio character varying(100),
    referenciadireccion text,
    numerocarnetdiscapacidad character varying(15),
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar]))),
    CONSTRAINT chk_tipo_persona CHECK ((tipopersona = ANY (ARRAY['E'::bpchar, 'D'::bpchar, 'A'::bpchar, 'S'::bpchar])))
);


ALTER TABLE academico.persona OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON persona; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.persona IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: CONSTRAINT chk_tipo_persona ON persona; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_tipo_persona ON academico.persona IS 'E = Estudiante
D = Docente
A = Administrativo
S = Aspirante';


--
-- Name: pk_anio_lectivo_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_anio_lectivo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_anio_lectivo_id_seq OWNER TO attinae_user;

--
-- Name: pk_anio_lectivo_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_anio_lectivo_id_seq OWNED BY academico.anio_lectivo.anio_lectivo_id;


--
-- Name: pk_calificacion_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_calificacion_id_seq
        START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_calificacion_id_seq OWNER TO attinae_user;

--
-- Name: pk_calificacion_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_calificacion_id_seq OWNED BY academico.calificacion.calificacion_id;


--
-- Name: pk_calificacionestudiante_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_calificacionestudiante_id_seq
        START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_calificacionestudiante_id_seq OWNER TO attinae_user;

--
-- Name: pk_calificacionestudiante_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_calificacionestudiante_id_seq OWNED BY academico.calificacionestudiante.calificacionestudiante_id;


--
-- Name: pk_campoformacion_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_campoformacion_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_campoformacion_id_seq OWNER TO attinae_user;

--
-- Name: pk_campoformacion_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_campoformacion_id_seq OWNED BY academico.campoformacion.campoformacion_id;


--
-- Name: pk_carrera_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_carrera_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_carrera_id_seq OWNER TO attinae_user;

--
-- Name: pk_carrera_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_carrera_id_seq OWNED BY academico.carrera.carrera_id;


--
-- Name: pk_ciclo_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_ciclo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_ciclo_id_seq OWNER TO attinae_user;

--
-- Name: pk_ciclo_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_ciclo_id_seq OWNED BY academico.ciclo.ciclo_id;


--
-- Name: pk_ciudad_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_ciudad_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_ciudad_id_seq OWNER TO attinae_user;

--
-- Name: pk_ciudad_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_ciudad_id_seq OWNED BY academico.ciudad.ciudad_id;


--
-- Name: pk_cursocertificacion_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_cursocertificacion_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_cursocertificacion_id_seq OWNER TO attinae_user;

--
-- Name: pk_cursocertificacion_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_cursocertificacion_id_seq OWNED BY academico.cursocertificacion.cursocertificacion_id;


--
-- Name: pk_cursonivelacion_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_cursonivelacion_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_cursonivelacion_id_seq OWNER TO attinae_user;

--
-- Name: pk_cursonivelacion_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_cursonivelacion_id_seq OWNED BY academico.cursonivelacion.cursonivelacion_id;


--
-- Name: pk_cursonivelacionjornada_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_cursonivelacionjornada_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_cursonivelacionjornada_id_seq OWNER TO attinae_user;

--
-- Name: pk_cursonivelacionjornada_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_cursonivelacionjornada_id_seq OWNED BY academico.cursonivelacionjornada.cursonivelacionjornada_id;


--
-- Name: pk_desglosecalificacionestudiant_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_desglosecalificacionestudiant_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_desglosecalificacionestudiant_seq OWNER TO attinae_user;

--
-- Name: pk_desglosecalificacionestudiant_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_desglosecalificacionestudiant_seq OWNED BY academico.desglosecalificaciconestudiante.desglosecalificacionestudiante_id;


--
-- Name: pk_desgloseevaluacion_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_desgloseevaluacion_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_desgloseevaluacion_id_seq OWNER TO attinae_user;

--
-- Name: pk_desgloseevaluacion_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_desgloseevaluacion_id_seq OWNED BY academico.desgloseevaluacion.desgloseevaluacion_id;


--
-- Name: pk_detallecalificacion_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_detallecalificacion_id_seq
        START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_detallecalificacion_id_seq OWNER TO attinae_user;

--
-- Name: pk_detallecalificacion_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_detallecalificacion_id_seq OWNED BY academico.detallecalificacion.detallecalificacion_id;


--
-- Name: pk_detallemodoevaluacion_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_detallemodoevaluacion_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_detallemodoevaluacion_id_seq OWNER TO attinae_user;

--
-- Name: pk_detallemodoevaluacion_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_detallemodoevaluacion_id_seq OWNED BY academico.detallemodoevaluacion.detallemodoevaluacion_id;


--
-- Name: pk_elementoeducativo_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_elementoeducativo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_elementoeducativo_id_seq OWNER TO attinae_user;

--
-- Name: pk_elementoeducativo_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_elementoeducativo_id_seq OWNED BY academico.elementoeducativo.elementoeducativo_id;


--
-- Name: pk_elementointegra_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_elementointegra_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_elementointegra_id_seq OWNER TO attinae_user;

--
-- Name: pk_elementointegra_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_elementointegra_id_seq OWNED BY academico.elementointegra.elementointegra_id;


--
-- Name: pk_entidadeducativa_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_entidadeducativa_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_entidadeducativa_id_seq OWNER TO attinae_user;

--
-- Name: pk_entidadeducativa_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_entidadeducativa_id_seq OWNED BY academico.entidadeducativa.entidadeducativa_id;


--
-- Name: pk_estadocivil_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_estadocivil_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_estadocivil_id_seq OWNER TO attinae_user;

--
-- Name: pk_estadocivil_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_estadocivil_id_seq OWNED BY academico.estadocivil.estadocivil_id;


--
-- Name: pk_etnia_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_etnia_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_etnia_id_seq OWNER TO attinae_user;

--
-- Name: pk_etnia_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_etnia_id_seq OWNED BY academico.etnia.etnia_id;


--
-- Name: pk_facultad_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_facultad_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_facultad_id_seq OWNER TO attinae_user;

--
-- Name: pk_facultad_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_facultad_id_seq OWNED BY academico.facultad.facultad_id;


--
-- Name: pk_formapago_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_formapago_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_formapago_id_seq OWNER TO attinae_user;

--
-- Name: pk_formapago_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_formapago_id_seq OWNED BY academico.formapago.formapago_id;


--
-- Name: pk_identidadgenero_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_identidadgenero_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_identidadgenero_id_seq OWNER TO attinae_user;

--
-- Name: pk_identidadgenero_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_identidadgenero_id_seq OWNED BY academico.identidadgenero.identidadgenero_id;


--
-- Name: pk_idioma_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_idioma_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_idioma_id_seq OWNER TO attinae_user;

--
-- Name: pk_idioma_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_idioma_id_seq OWNED BY academico.idioma.idioma_id;


--
-- Name: pk_jornada_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_jornada_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_jornada_id_seq OWNER TO attinae_user;

--
-- Name: pk_jornada_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_jornada_id_seq OWNED BY academico.jornada.jornada_id;


--
-- Name: pk_malla_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_malla_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_malla_id_seq OWNER TO attinae_user;

--
-- Name: pk_malla_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_malla_id_seq OWNED BY academico.malla.malla_id;


--
-- Name: pk_mallaciclo_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_mallaciclo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_mallaciclo_id_seq OWNER TO attinae_user;

--
-- Name: pk_mallaciclo_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_mallaciclo_id_seq OWNED BY academico.mallaciclo.mallaciclo_id;


--
-- Name: pk_mallaelemento_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_mallaelemento_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_mallaelemento_id_seq OWNER TO attinae_user;

--
-- Name: pk_mallaelemento_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_mallaelemento_id_seq OWNED BY academico.mallaelemento.mallaelemento_id;


--
-- Name: pk_modoevaluacion_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_modoevaluacion_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_modoevaluacion_id_seq OWNER TO attinae_user;

--
-- Name: pk_modoevaluacion_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_modoevaluacion_id_seq OWNED BY academico.modoevaluacion.modoevaluacion_id;


--
-- Name: pk_nacionalidad_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_nacionalidad_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_nacionalidad_id_seq OWNER TO attinae_user;

--
-- Name: pk_nacionalidad_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_nacionalidad_id_seq OWNED BY academico.nacionalidad.nacionalidad_id;


--
-- Name: pk_nucleoproblemico_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_nucleoproblemico_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_nucleoproblemico_id_seq OWNER TO attinae_user;

--
-- Name: pk_nucleoproblemico_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_nucleoproblemico_id_seq OWNED BY academico.nucleoproblemico.nucleoproblemico_id;


--
-- Name: pk_operadora_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_operadora_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_operadora_id_seq OWNER TO attinae_user;

--
-- Name: pk_operadora_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_operadora_id_seq OWNED BY academico.operadora.operadora_id;


--
-- Name: pk_ordenpago_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_ordenpago_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_ordenpago_id_seq OWNER TO attinae_user;

--
-- Name: pk_ordenpago_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_ordenpago_id_seq OWNED BY academico.ordenpago.ordenpago_id;


--
-- Name: pk_pais_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_pais_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_pais_id_seq OWNER TO attinae_user;

--
-- Name: pk_pais_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_pais_id_seq OWNED BY academico.pais.pais_id;


--
-- Name: pk_paralelo_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_paralelo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_paralelo_id_seq OWNER TO attinae_user;

--
-- Name: pk_paralelo_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_paralelo_id_seq OWNED BY academico.paralelo.paralelo_id;


--
-- Name: pk_paralelodocente_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_paralelodocente_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_paralelodocente_id_seq OWNER TO attinae_user;

--
-- Name: pk_paralelodocente_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_paralelodocente_id_seq OWNED BY academico.paralelodocente.paralelodocente_id;


--
-- Name: pk_paraleloestudiante_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_paraleloestudiante_id_seq
        START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_paraleloestudiante_id_seq OWNER TO attinae_user;

--
-- Name: pk_paraleloestudiante_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_paraleloestudiante_id_seq OWNED BY academico.paraleloestudiante.paraleloestudiante_id;


--
-- Name: pk_parcial_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_parcial_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_parcial_id_seq OWNER TO attinae_user;

--
-- Name: pk_parcial_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_parcial_id_seq OWNED BY academico.parcial.parcial_id;


--
-- Name: pk_parroquia_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_parroquia_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_parroquia_id_seq OWNER TO attinae_user;

--
-- Name: pk_parroquia_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_parroquia_id_seq OWNED BY academico.parroquia.parroquia_id;


--
-- Name: pk_periodo_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_periodo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_periodo_id_seq OWNER TO attinae_user;

--
-- Name: pk_periodo_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_periodo_id_seq OWNED BY academico.periodo.periodo_id;


--
-- Name: pk_persona_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_persona_id_seq
    START WITH 2
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_persona_id_seq OWNER TO attinae_user;

--
-- Name: pk_persona_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_persona_id_seq OWNED BY academico.persona.persona_id;


--
-- Name: planificacioncarrera; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.planificacioncarrera (
    planificacioncarrera_id integer NOT NULL,
    planificacionregistro_id integer,
    carrera_id integer,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.planificacioncarrera OWNER TO attinae_user;

--
-- Name: COLUMN planificacioncarrera.activo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON COLUMN academico.planificacioncarrera.activo IS 'Para registro de borrado lógico';


--
-- Name: CONSTRAINT chk_activo ON planificacioncarrera; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.planificacioncarrera IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_planificacioncarreracurso_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_planificacioncarreracurso_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_planificacioncarreracurso_id_seq OWNER TO attinae_user;

--
-- Name: pk_planificacioncarreracurso_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_planificacioncarreracurso_id_seq OWNED BY academico.planificacioncarrera.planificacioncarrera_id;


--
-- Name: planificacionregistro; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.planificacionregistro (
    planificacionregistro_id integer NOT NULL,
    ambito character(1) NOT NULL,
    descripcion text,
    aniolectivo_id integer NOT NULL,
    periodo_id integer,
    tienecursonivelacion boolean,
    fechainicio_inscripcion date NOT NULL,
    fechafin_inscripcion date NOT NULL,
    fechainicio_curso date,
    fechafin_curso date,
    fechamaximopago date NOT NULL,
    tienedescuento boolean NOT NULL,
    porcentajedescuento integer,
    fechapagodescuento date,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    entidadeducativa_id integer NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar]))),
    CONSTRAINT chk_ambito CHECK ((ambito = ANY (ARRAY['A'::bpchar, 'M'::bpchar, 'C'::bpchar])))
);


ALTER TABLE academico.planificacionregistro OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON planificacionregistro; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.planificacionregistro IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_planificacionregistro_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_planificacionregistro_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_planificacionregistro_id_seq OWNER TO attinae_user;

--
-- Name: pk_planificacionregistro_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_planificacionregistro_id_seq OWNED BY academico.planificacionregistro.planificacionregistro_id;


--
-- Name: planificacionrequisito; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.planificacionrequisito (
    planificacionrequisito_id integer NOT NULL,
    planificacionregistro_id integer NOT NULL,
    tiporequisito character(1) NOT NULL,
    requisito_id integer,
    rubro_id integer,
    aplicadescuento boolean,
    valor numeric,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar]))),
    CONSTRAINT chk_tiporequisito CHECK ((tiporequisito = ANY (ARRAY['E'::bpchar, 'U'::bpchar])))
);


ALTER TABLE academico.planificacionrequisito OWNER TO attinae_user;

--
-- Name: COLUMN planificacionrequisito.activo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON COLUMN academico.planificacionrequisito.activo IS 'Para registro de borrado lógico';


--
-- Name: CONSTRAINT chk_activo ON planificacionrequisito; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.planificacionrequisito IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_planificacionrequisito_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_planificacionrequisito_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_planificacionrequisito_id_seq OWNER TO attinae_user;

--
-- Name: pk_planificacionrequisito_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_planificacionrequisito_id_seq OWNED BY academico.planificacionrequisito.planificacionrequisito_id;


--
-- Name: prerequisitoelemento; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.prerequisitoelemento (
    prerequisitoelemento_id integer NOT NULL,
    mallaelemento_id integer NOT NULL,
    elementoeducativo_id integer NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    mallaelementopre_id integer NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.prerequisitoelemento OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON prerequisitoelemento; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.prerequisitoelemento IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_prerequisitoelemento_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_prerequisitoelemento_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_prerequisitoelemento_id_seq OWNER TO attinae_user;

--
-- Name: pk_prerequisitoelemento_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_prerequisitoelemento_id_seq OWNED BY academico.prerequisitoelemento.prerequisitoelemento_id;


--
-- Name: provincia; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.provincia (
    provincia_id integer NOT NULL,
    pais_id integer NOT NULL,
    nombre character varying NOT NULL,
    eslocal boolean DEFAULT false NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.provincia OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON provincia; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.provincia IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_provincia_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_provincia_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_provincia_id_seq OWNER TO attinae_user;

--
-- Name: pk_provincia_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_provincia_id_seq OWNED BY academico.provincia.provincia_id;


--
-- Name: registronivelacion; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.registronivelacion (
    registronivelacion_id integer NOT NULL,
    cursonivelacion_id integer,
    cursonivelacionjornada_id integer,
    persona_id integer NOT NULL,
    fecha_registro timestamp without time zone NOT NULL,
    calificacionfinal numeric,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    planificacioncarrera_id integer,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.registronivelacion OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON registronivelacion; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.registronivelacion IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_registronivelacion_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_registronivelacion_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_registronivelacion_id_seq OWNER TO attinae_user;

--
-- Name: pk_registronivelacion_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_registronivelacion_id_seq OWNED BY academico.registronivelacion.registronivelacion_id;


--
-- Name: requisito; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.requisito (
    requisito_id integer NOT NULL,
    descripcion character varying(200),
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.requisito OWNER TO attinae_user;

--
-- Name: COLUMN requisito.activo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON COLUMN academico.requisito.activo IS 'Para registro de borrado lógico';


--
-- Name: CONSTRAINT chk_activo ON requisito; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.requisito IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_requisito_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_requisito_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_requisito_id_seq OWNER TO attinae_user;

--
-- Name: pk_requisito_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_requisito_id_seq OWNED BY academico.requisito.requisito_id;


--
-- Name: pk_requisitos_items_requisito_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_requisitos_items_requisito_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_requisitos_items_requisito_id_seq OWNER TO attinae_user;

--
-- Name: pk_requisitos_items_requisito_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_requisitos_items_requisito_id_seq OWNED BY academico.items_requisitos.items_requisito_id;


--
-- Name: sexo; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.sexo (
    sexo_id integer NOT NULL,
    descripcion character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.sexo OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON sexo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.sexo IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_sexo_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_sexo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_sexo_id_seq OWNER TO attinae_user;

--
-- Name: pk_sexo_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_sexo_id_seq OWNED BY academico.sexo.sexo_id;


--
-- Name: tipodiscapacidad; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.tipodiscapacidad (
    tipodiscapacidad_id integer NOT NULL,
    descripcion character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.tipodiscapacidad OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON tipodiscapacidad; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.tipodiscapacidad IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_tipodiscapacidad_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_tipodiscapacidad_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_tipodiscapacidad_id_seq OWNER TO attinae_user;

--
-- Name: pk_tipodiscapacidad_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_tipodiscapacidad_id_seq OWNED BY academico.tipodiscapacidad.tipodiscapacidad_id;


--
-- Name: tipodocumento; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.tipodocumento (
    tipodocumento_id integer NOT NULL,
    descripcion character varying NOT NULL,
    entidad_educativa integer NOT NULL,
    de_identificacion boolean,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.tipodocumento OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON tipodocumento; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.tipodocumento IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_tipodocumento_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_tipodocumento_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_tipodocumento_id_seq OWNER TO attinae_user;

--
-- Name: pk_tipodocumento_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_tipodocumento_id_seq OWNED BY academico.tipodocumento.tipodocumento_id;


--
-- Name: tipounidadeducativa; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.tipounidadeducativa (
    tipounidadeducativa_id integer NOT NULL,
    descripcion character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.tipounidadeducativa OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON tipounidadeducativa; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.tipounidadeducativa IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_tipounidadeducativa_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_tipounidadeducativa_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_tipounidadeducativa_id_seq OWNER TO attinae_user;

--
-- Name: pk_tipounidadeducativa_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_tipounidadeducativa_id_seq OWNED BY academico.tipounidadeducativa.tipounidadeducativa_id;


--
-- Name: titulo; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.titulo (
    titulo_id integer NOT NULL,
    descripcion character varying NOT NULL,
    abreviatura character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.titulo OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON titulo; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.titulo IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_titulo_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_titulo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_titulo_id_seq OWNER TO attinae_user;

--
-- Name: pk_titulo_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_titulo_id_seq OWNED BY academico.titulo.titulo_id;


--
-- Name: unidadeducativa; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.unidadeducativa (
    unidadeducativa_id integer NOT NULL,
    tipounidadeducativa_id integer NOT NULL,
    nombre character varying(200) NOT NULL,
    pais_id integer NOT NULL,
    ciudad_id integer NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    provincia_id integer,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.unidadeducativa OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON unidadeducativa; Type: COMMENT; Schema: academico; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON academico.unidadeducativa IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_unidadeducativa_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_unidadeducativa_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_unidadeducativa_id_seq OWNER TO attinae_user;

--
-- Name: pk_unidadeducativa_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_unidadeducativa_id_seq OWNED BY academico.unidadeducativa.unidadeducativa_id;


--
-- Name: unidadformacion; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.unidadformacion (
    unidadformacion_id integer NOT NULL,
    descripcion character varying(100) NOT NULL,
    color character varying(10),
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.unidadformacion OWNER TO attinae_user;

--
-- Name: pk_unidadformacion_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.pk_unidadformacion_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.pk_unidadformacion_id_seq OWNER TO attinae_user;

--
-- Name: pk_unidadformacion_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.pk_unidadformacion_id_seq OWNED BY academico.unidadformacion.unidadformacion_id;


--
-- Name: query_calificacionestudiante; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.query_calificacionestudiante AS
 SELECT pa.anio_lectivo_id,
    pa.periodo_id,
    ce.parcial_id,
    pa.carrera_id,
    pa.ciclo_id,
    pa.jornada_id,
    pa.paralelo,
    pe.persona_id,
    pa.elementoeducativo_id,
    ce.calificacion_numerica,
    ce.calificacion_equivalencia
   FROM ((academico.paralelo pa
     JOIN academico.paraleloestudiante pe ON ((pa.paralelo_id = pe.paralelo_id)))
     JOIN academico.calificacionestudiante ce ON ((pe.paraleloestudiante_id = ce.paraleloestudiante_id)))
  WHERE ((pa.activo = 'S'::bpchar) AND (pe.activo = 'S'::bpchar) AND (ce.activo = 'S'::bpchar));


ALTER TABLE academico.query_calificacionestudiante OWNER TO attinae_user;

--
-- Name: tipoaprobacionmateria; Type: TABLE; Schema: academico; Owner: attinae_user
--

CREATE TABLE academico.tipoaprobacionmateria (
    tipoaprobacionmateria_id integer NOT NULL,
    descripcion character varying(100) NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE academico.tipoaprobacionmateria OWNER TO attinae_user;

--
-- Name: tipoaprobacionmateria_tipoaprobacionmateria_id_seq; Type: SEQUENCE; Schema: academico; Owner: attinae_user
--

CREATE SEQUENCE academico.tipoaprobacionmateria_tipoaprobacionmateria_id_seq
        START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE academico.tipoaprobacionmateria_tipoaprobacionmateria_id_seq OWNER TO attinae_user;

--
-- Name: tipoaprobacionmateria_tipoaprobacionmateria_id_seq; Type: SEQUENCE OWNED BY; Schema: academico; Owner: attinae_user
--

ALTER SEQUENCE academico.tipoaprobacionmateria_tipoaprobacionmateria_id_seq OWNED BY academico.tipoaprobacionmateria.tipoaprobacionmateria_id;


--
-- Name: estado; Type: TABLE; Schema: seguridad; Owner: attinae_user
--

CREATE TABLE seguridad.estado (
    estado_id integer NOT NULL,
    descripion character varying(100) NOT NULL,
    ambito smallint NOT NULL
);


ALTER TABLE seguridad.estado OWNER TO attinae_user;

--
-- Name: TABLE estado; Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON TABLE seguridad.estado IS 'Ambito 0 = General (Activo, Inactivo)
Ambito 1 = Año Lectivo-Periodo-Parcial-Carrera (Abierto, Cerrado, Planificado)
Ambito 2 = Malla
Ambito 3 = Registro On Line
Ambito 4 = Orden Pago (Documentos)';


--
-- Name: vi_actacalificacionesparcial; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_actacalificacionesparcial AS
 SELECT DISTINCT ee.codigo,
    ee.nombre AS nombreentidadeducativa,
    ee.direccion AS direccionentidadeducativa,
    ee.telefonoconvencional AS telconvencionalentidadeducativa,
    ee.telefonocelular AS telcelularentidadeducativa,
    ee.email AS mailentidadeducativa,
    ee.ruc AS rucentidadeducativa,
    paes.paraleloestudiante_id,
    paes.persona_id,
    pe.tipopersona,
    pe.tipodocumento_id,
    ( SELECT tipodocumento.descripcion
           FROM academico.tipodocumento
          WHERE (tipodocumento.tipodocumento_id = pe.tipodocumento_id)) AS descripciontipodocumento,
    pe.documentoidentificacion,
    pe.nombre1,
    pe.nombre2,
    pe.apellido1,
    pe.apellido2,
    (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text) AS nombrecompleto,
    pe.paisnacimiento_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisnacimiento_id)) AS nombrepaisnacimiento,
    pe.provincianacimiento_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provincianacimiento_id)) AS nombreprovincianacimiento,
    pe.ciudadnacimiento_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudadnacimiento_id)) AS nombreciudadnacimiento,
    pe.parroquianacimiento_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquianacimiento_id)) AS nombreparroquianacimiento,
    pe.fechanacimiento,
    pe.paisdomicilio_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisdomicilio_id)) AS nombrepaisdomicilio,
    pe.provinciadomicilio_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provinciadomicilio_id)) AS nombreprovinciadomicilio,
    pe.ciudaddomicilio_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudaddomicilio_id)) AS nombreciudaddomicilio,
    pe.parroquiadomicilio_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquiadomicilio_id)) AS nombreparroquiadomicilio,
    pe.barrio,
    pe.direccion,
    pe.referenciadireccion,
    pe.telefonoconvencional,
    pe.telefonocelular,
    pe.operadora_fk,
    ( SELECT operadora.descripcion
           FROM academico.operadora
          WHERE (operadora.operadora_id = pe.operadora_fk)) AS descripcionoperadora,
    pe.emailpersonal,
    pe.emailinstitucional,
    pe.nacionalidad_id,
    ( SELECT nacionalidad.descripcion
           FROM academico.nacionalidad
          WHERE (nacionalidad.nacionalidad_id = pe.nacionalidad_id)) AS descripcionacionalidad,
    pe.sexo_id,
    ( SELECT sexo.descripcion
           FROM academico.sexo
          WHERE (sexo.sexo_id = pe.sexo_id)) AS descripcionsexo,
    pe.identidadgenero_id,
    ( SELECT identidadgenero.descripcion
           FROM academico.identidadgenero
          WHERE (identidadgenero.identidadgenero_id = pe.identidadgenero_id)) AS descripcionidentidadgenero,
    pe.estadocivil_id,
    ( SELECT estadocivil.descripcion
           FROM academico.estadocivil
          WHERE (estadocivil.estadocivil_id = pe.estadocivil_id)) AS descripcionestadocivil,
    pe.tiposangre,
    pe.tipodiscapacidad_id,
    ( SELECT tipodiscapacidad.descripcion
           FROM academico.tipodiscapacidad
          WHERE (tipodiscapacidad.tipodiscapacidad_id = pe.tipodiscapacidad_id)) AS descripciontipodiscapacidad,
    pe.porcentajediscapacidad,
    pe.descripciondiscapacidad,
    pe.numerocarnetdiscapacidad,
    pe.idioma_id,
    ( SELECT idioma.descripcion
           FROM academico.idioma
          WHERE (idioma.idioma_id = pe.idioma_id)) AS descripcionidioma,
    pe.etnia_id,
    ( SELECT etnia.descripcion
           FROM academico.etnia
          WHERE (etnia.etnia_id = pe.etnia_id)) AS descripcionetnia,
    pe.personacontacto,
    pe.telefonoconctacto,
    pe.fechaingreso,
    pe.estado_id AS estadopersona,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = pe.estado_id)) AS descripcionestadopersona,
    paes.fechamatriculacion,
    pa.paralelo_id,
    pa.anio_lectivo_id,
    ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)) AS aniolectivo,
    pa.periodo_id,
    per.descripcion AS descripcionperiodo,
    par.parcial_id,
    par.descripcion AS descripcionparcial,
    par.calificacioncondesglose,
    par.porcentajeponderacion,
    pa.carrera_id,
    car.codigo AS codigocarrera,
    car.nombre AS nombrecarrera,
    pa.ciclo_id,
    ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)) AS descripcionciclo,
    pa.jornada_id,
    ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)) AS descripcionjornada,
    pa.paralelo,
    pa.estado_id AS estadoparalelo,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = pa.estado_id)) AS descripcionestadoparalelo,
    pa.elementoeducativo_id,
    ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = pa.elementoeducativo_id)) AS nombreelementoeducativo,
    mael.campoformacion_id,
    paes.tipoaprobacionmateria,
    ( SELECT mallaelemento.integradora
           FROM academico.mallaelemento
          WHERE ((mallaelemento.malla_id = pa.malla_id) AND (mallaelemento.ciclo_id = pa.ciclo_id) AND (mallaelemento.elementoeducativo_id = pa.elementoeducativo_id))) AS sepromedia,
    ( SELECT academico.query_paralelodocente(pa.paralelo_id) AS query_paralelodocente) AS docentes,
    paes.observacion,
    paes.estado_id AS estadoparaleloestudiante,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = paes.estado_id)) AS descripcionestadoparaleloestudiante,
    round(caes.calificacion_numerica, 0) AS calificacion_numerica,
        CASE
            WHEN (caes.calificacion_equivalencia IS NULL) THEN '--'::text
            ELSE caes.calificacion_equivalencia
        END AS calificacion_equivalencia,
    caes.calificacionestudiante_id,
    dce.desglosecalificacionestudiante_id,
    dmo.descripcion AS descripcion_desglose,
    dce.calificacion_numerica AS calificacion_numerica_desglose,
        CASE
            WHEN (dce.calificacion_equivalencia IS NULL) THEN '--'::text
            ELSE dce.calificacion_equivalencia
        END AS calificacion_equivalencia_desglose
   FROM (((((((((((((academico.paraleloestudiante paes
     JOIN academico.paralelo pa ON ((pa.paralelo_id = paes.paralelo_id)))
     JOIN academico.mallaelemento mael ON (((mael.malla_id = pa.malla_id) AND (mael.elementoeducativo_id = pa.elementoeducativo_id))))
     JOIN academico.carrera car ON ((car.carrera_id = pa.carrera_id)))
     JOIN academico.entidadeducativa ee ON ((ee.entidadeducativa_id = car.entidad_educativa)))
     JOIN academico.persona pe ON ((pe.persona_id = paes.persona_id)))
     JOIN academico.estudiante es ON ((es.persona_id = pe.persona_id)))
     JOIN academico.anio_lectivo al ON ((al.anio_lectivo_id = pa.anio_lectivo_id)))
     JOIN academico.periodo per ON ((per.anio_lectivo_id = al.anio_lectivo_id)))
     LEFT JOIN academico.calificacionestudiante caes ON ((caes.paraleloestudiante_id = paes.paraleloestudiante_id)))
     JOIN academico.parcial par ON (((par.periodo_id = per.periodo_id) AND (par.parcial_id = caes.parcial_id))))
     JOIN academico.desglosecalificaciconestudiante dce ON ((dce.calificacionestudiante_id = caes.calificacionestudiante_id)))
     JOIN academico.desgloseevaluacion dev ON ((dev.desgloseevaluacion_id = dce.desgloseevaluacion_id)))
     JOIN academico.detallemodoevaluacion dmo ON ((dmo.detallemodoevaluacion_id = dev.detallemodoevaluacion_id)))
  WHERE ((al.activo = 'S'::bpchar) AND (paes.activo = 'S'::bpchar) AND (dce.activo = 'S'::bpchar))
  ORDER BY ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)), per.descripcion, par.descripcion, ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)), ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)), pa.paralelo, ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = pa.elementoeducativo_id)), (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text);


ALTER TABLE academico.vi_actacalificacionesparcial OWNER TO attinae_user;

--
-- Name: vi_actacalificacionesperiodo; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_actacalificacionesperiodo AS
 SELECT DISTINCT ee.codigo,
    ee.nombre AS nombreentidadeducativa,
    ee.direccion AS direccionentidadeducativa,
    ee.telefonoconvencional AS telconvencionalentidadeducativa,
    ee.telefonocelular AS telcelularentidadeducativa,
    ee.email AS mailentidadeducativa,
    ee.ruc AS rucentidadeducativa,
    paes.paraleloestudiante_id,
    paes.persona_id,
    pe.tipopersona,
    pe.tipodocumento_id,
    ( SELECT tipodocumento.descripcion
           FROM academico.tipodocumento
          WHERE (tipodocumento.tipodocumento_id = pe.tipodocumento_id)) AS descripciontipodocumento,
    pe.documentoidentificacion,
    pe.nombre1,
    pe.nombre2,
    pe.apellido1,
    pe.apellido2,
    (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text) AS nombrecompleto,
    pe.paisnacimiento_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisnacimiento_id)) AS nombrepaisnacimiento,
    pe.provincianacimiento_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provincianacimiento_id)) AS nombreprovincianacimiento,
    pe.ciudadnacimiento_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudadnacimiento_id)) AS nombreciudadnacimiento,
    pe.parroquianacimiento_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquianacimiento_id)) AS nombreparroquianacimiento,
    pe.fechanacimiento,
    pe.paisdomicilio_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisdomicilio_id)) AS nombrepaisdomicilio,
    pe.provinciadomicilio_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provinciadomicilio_id)) AS nombreprovinciadomicilio,
    pe.ciudaddomicilio_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudaddomicilio_id)) AS nombreciudaddomicilio,
    pe.parroquiadomicilio_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquiadomicilio_id)) AS nombreparroquiadomicilio,
    pe.barrio,
    pe.direccion,
    pe.referenciadireccion,
    pe.telefonoconvencional,
    pe.telefonocelular,
    pe.operadora_fk,
    ( SELECT operadora.descripcion
           FROM academico.operadora
          WHERE (operadora.operadora_id = pe.operadora_fk)) AS descripcionoperadora,
    pe.emailpersonal,
    pe.emailinstitucional,
    pe.nacionalidad_id,
    ( SELECT nacionalidad.descripcion
           FROM academico.nacionalidad
          WHERE (nacionalidad.nacionalidad_id = pe.nacionalidad_id)) AS descripcionacionalidad,
    pe.sexo_id,
    ( SELECT sexo.descripcion
           FROM academico.sexo
          WHERE (sexo.sexo_id = pe.sexo_id)) AS descripcionsexo,
    pe.identidadgenero_id,
    ( SELECT identidadgenero.descripcion
           FROM academico.identidadgenero
          WHERE (identidadgenero.identidadgenero_id = pe.identidadgenero_id)) AS descripcionidentidadgenero,
    pe.estadocivil_id,
    ( SELECT estadocivil.descripcion
           FROM academico.estadocivil
          WHERE (estadocivil.estadocivil_id = pe.estadocivil_id)) AS descripcionestadocivil,
    pe.tiposangre,
    pe.tipodiscapacidad_id,
    ( SELECT tipodiscapacidad.descripcion
           FROM academico.tipodiscapacidad
          WHERE (tipodiscapacidad.tipodiscapacidad_id = pe.tipodiscapacidad_id)) AS descripciontipodiscapacidad,
    pe.porcentajediscapacidad,
    pe.descripciondiscapacidad,
    pe.numerocarnetdiscapacidad,
    pe.idioma_id,
    ( SELECT idioma.descripcion
           FROM academico.idioma
          WHERE (idioma.idioma_id = pe.idioma_id)) AS descripcionidioma,
    pe.etnia_id,
    ( SELECT etnia.descripcion
           FROM academico.etnia
          WHERE (etnia.etnia_id = pe.etnia_id)) AS descripcionetnia,
    pe.personacontacto,
    pe.telefonoconctacto,
    pe.fechaingreso,
    pe.estado_id AS estadopersona,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = pe.estado_id)) AS descripcionestadopersona,
    paes.fechamatriculacion,
    pa.paralelo_id,
    pa.anio_lectivo_id,
    ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)) AS aniolectivo,
    pa.periodo_id,
    per.descripcion AS descripcionperiodo,
    par.parcial_id,
    par.codigo AS descripcionparcial,
    par.calificacioncondesglose,
    par.porcentajeponderacion,
    pa.carrera_id,
    car.codigo AS codigocarrera,
    car.nombre AS nombrecarrera,
    pa.ciclo_id,
    ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)) AS descripcionciclo,
    pa.jornada_id,
    ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)) AS descripcionjornada,
    pa.paralelo,
    pa.estado_id AS estadoparalelo,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = pa.estado_id)) AS descripcionestadoparalelo,
    pa.elementoeducativo_id,
    ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = pa.elementoeducativo_id)) AS nombreelementoeducativo,
    mael.campoformacion_id,
    paes.tipoaprobacionmateria,
    ( SELECT mallaelemento.integradora
           FROM academico.mallaelemento
          WHERE ((mallaelemento.malla_id = pa.malla_id) AND (mallaelemento.ciclo_id = pa.ciclo_id) AND (mallaelemento.elementoeducativo_id = pa.elementoeducativo_id))) AS sepromedia,
    ( SELECT academico.query_paralelodocente(pa.paralelo_id) AS query_paralelodocente) AS docentes,
    paes.observacion,
    paes.estado_id AS estadoparaleloestudiante,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = paes.estado_id)) AS descripcionestadoparaleloestudiante,
    caes.calificacion_numerica,
        CASE
            WHEN (caes.calificacion_equivalencia IS NULL) THEN '--'::text
            ELSE caes.calificacion_equivalencia
        END AS calificacion_equivalencia,
    ( SELECT academico.query_promedioparcial_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedioparcial_periodo) AS promedioperiodo_parciales,
    ( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo) AS promedio_periodo
   FROM ((((((((((academico.paraleloestudiante paes
     JOIN academico.paralelo pa ON ((pa.paralelo_id = paes.paralelo_id)))
     JOIN academico.mallaelemento mael ON (((mael.malla_id = pa.malla_id) AND (mael.elementoeducativo_id = pa.elementoeducativo_id) AND (mael.ciclo_id = pa.ciclo_id))))
     JOIN academico.carrera car ON ((car.carrera_id = pa.carrera_id)))
     JOIN academico.entidadeducativa ee ON ((ee.entidadeducativa_id = car.entidad_educativa)))
     JOIN academico.persona pe ON ((pe.persona_id = paes.persona_id)))
     JOIN academico.estudiante es ON ((es.persona_id = pe.persona_id)))
     JOIN academico.anio_lectivo al ON ((al.anio_lectivo_id = pa.anio_lectivo_id)))
     JOIN academico.periodo per ON (((per.anio_lectivo_id = al.anio_lectivo_id) AND (per.periodo_id = pa.periodo_id))))
     LEFT JOIN academico.calificacionestudiante caes ON ((caes.paraleloestudiante_id = paes.paraleloestudiante_id)))
     JOIN academico.parcial par ON (((par.periodo_id = per.periodo_id) AND (par.parcial_id = caes.parcial_id))))
  WHERE ((al.activo = 'S'::bpchar) AND (paes.activo = 'S'::bpchar) AND (mael.activo = 'S'::bpchar))
  ORDER BY ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)), per.descripcion, ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)), ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)), pa.paralelo, (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text), ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = pa.elementoeducativo_id)), par.parcial_id;


ALTER TABLE academico.vi_actacalificacionesperiodo OWNER TO attinae_user;

--
-- Name: vi_aspirantesregistrados_cn; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_aspirantesregistrados_cn AS
 SELECT (row_number() OVER (ORDER BY cn.aniolectivo_id, cn.periodo_id, cn.carrera_id, rn.cursonivelacion_id, rn.cursonivelacionjornada_id, pe.persona_id))::integer AS id,
    cn.aniolectivo_id,
    ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = cn.aniolectivo_id)) AS anio,
    cn.periodo_id,
    ( SELECT periodo.codigo
           FROM academico.periodo
          WHERE (periodo.periodo_id = cn.periodo_id)) AS periodo,
    cn.carrera_id,
    ( SELECT carrera.nombre
           FROM academico.carrera
          WHERE (carrera.carrera_id = cn.carrera_id)) AS carrera,
    rn.cursonivelacion_id,
    cn.descripcion AS cursonivelacion,
    rn.cursonivelacionjornada_id,
    cj.jornada_id,
    ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = cj.jornada_id)) AS jornada,
    cj.paralelo,
    pe.tipodocumento_id,
    ( SELECT tipodocumento.descripcion
           FROM academico.tipodocumento
          WHERE (tipodocumento.tipodocumento_id = pe.tipodocumento_id)) AS tipodocumento,
    pe.documentoidentificacion,
    pe.apellido1,
    pe.apellido2,
    pe.nombre1,
    pe.nombre2,
    pe.telefonoconvencional,
    pe.telefonocelular,
    pe.emailpersonal,
    rn.estado_id,
    es.descripion AS estado
   FROM ((((academico.registronivelacion rn
     JOIN academico.persona pe ON ((pe.persona_id = rn.persona_id)))
     JOIN academico.cursonivelacionjornada cj ON ((cj.cursonivelacionjornada_id = rn.cursonivelacionjornada_id)))
     JOIN academico.cursonivelacion cn ON ((cn.cursonivelacion_id = rn.cursonivelacion_id)))
     JOIN seguridad.estado es ON ((es.estado_id = rn.estado_id)))
  WHERE (rn.activo = 'S'::bpchar);


ALTER TABLE academico.vi_aspirantesregistrados_cn OWNER TO attinae_user;

--
-- Name: vi_calificaciones_grid; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_calificaciones_grid AS
 SELECT paraleloestudiante.paraleloestudiante_id,
    paraleloestudiante.persona_id,
    desglosecalificaciconestudiante.desglosecalificacionestudiante_id,
    detallemodoevaluacion.detallemodoevaluacion_id,
    detallemodoevaluacion.descripcion,
    detallemodoevaluacion.porcentajecalificacion,
    desglosecalificaciconestudiante.calificacionestudiante_id,
    desglosecalificaciconestudiante.desgloseevaluacion_id,
    desglosecalificaciconestudiante.calificacion_numerica,
    desglosecalificaciconestudiante.calificacion_equivalencia,
    desglosecalificaciconestudiante.estado_id,
    desglosecalificaciconestudiante.creadopor,
    desglosecalificaciconestudiante.creado,
    desglosecalificaciconestudiante.actualizadopor,
    desglosecalificaciconestudiante.actualizado,
    desglosecalificaciconestudiante.activo
   FROM ((((academico.paraleloestudiante
     JOIN academico.calificacionestudiante ON ((paraleloestudiante.paraleloestudiante_id = calificacionestudiante.paraleloestudiante_id)))
     JOIN academico.desglosecalificaciconestudiante ON ((calificacionestudiante.calificacionestudiante_id = desglosecalificaciconestudiante.calificacionestudiante_id)))
     JOIN academico.desgloseevaluacion ON ((desglosecalificaciconestudiante.desgloseevaluacion_id = desgloseevaluacion.desgloseevaluacion_id)))
     JOIN academico.detallemodoevaluacion ON ((desgloseevaluacion.detallemodoevaluacion_id = detallemodoevaluacion.detallemodoevaluacion_id)))
  WHERE (desglosecalificaciconestudiante.activo = 'S'::bpchar);


ALTER TABLE academico.vi_calificaciones_grid OWNER TO attinae_user;

--
-- Name: vi_calificacionesperiodo; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_calificacionesperiodo AS
 SELECT DISTINCT paes.paraleloestudiante_id,
    paes.persona_id,
    pa.paralelo_id,
    pa.anio_lectivo_id,
    pa.periodo_id,
    par.parcial_id,
    par.calificacioncondesglose,
    par.porcentajeponderacion,
    pa.carrera_id,
    pa.ciclo_id,
    pa.jornada_id,
    pa.paralelo,
    pa.estado_id AS estadoparalelo,
    pa.elementoeducativo_id,
    paes.estado_id AS estadoparaleloestudiante,
    caes.calificacion_numerica,
        CASE
            WHEN (caes.calificacion_equivalencia IS NULL) THEN '--'::text
            ELSE caes.calificacion_equivalencia
        END AS calificacion_equivalencia
   FROM ((((((((academico.paraleloestudiante paes
     JOIN academico.paralelo pa ON ((pa.paralelo_id = paes.paralelo_id)))
     JOIN academico.carrera car ON ((car.carrera_id = pa.carrera_id)))
     JOIN academico.persona pe ON ((pe.persona_id = paes.persona_id)))
     JOIN academico.estudiante es ON ((es.persona_id = pe.persona_id)))
     JOIN academico.anio_lectivo al ON ((al.anio_lectivo_id = pa.anio_lectivo_id)))
     JOIN academico.periodo per ON (((per.anio_lectivo_id = al.anio_lectivo_id) AND (per.periodo_id = pa.periodo_id))))
     LEFT JOIN academico.calificacionestudiante caes ON ((caes.paraleloestudiante_id = paes.paraleloestudiante_id)))
     JOIN academico.parcial par ON (((par.periodo_id = per.periodo_id) AND (par.parcial_id = caes.parcial_id))))
  WHERE ((al.activo = 'S'::bpchar) AND (paes.activo = 'S'::bpchar));


ALTER TABLE academico.vi_calificacionesperiodo OWNER TO attinae_user;

--
-- Name: vi_carrera_archivo; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_carrera_archivo AS
 SELECT carrera.carrera_id,
    carrera.facultad_id,
    carrera.codigo,
    carrera.nombre,
    carrera.titulo_ofrece,
    carrera.entidad_educativa,
    carrera.estado_id,
    carrera.creadopor,
    carrera.creado,
    carrera.actualizadopor,
    carrera.actualizado,
    carrera.activo,
    carrera.cantidad_ciclo,
    carrera.creditos,
    carrera.precompetencias,
    carrera.competencias,
    carrera.perfilprofesional,
    archivo.archivo_id,
    archivo.ruta_completa,
    archivo.ruta_relativa,
    archivo.tabla
   FROM (seguridad.archivo
     RIGHT JOIN academico.carrera ON ((archivo.registro_id = carrera.carrera_id)));


ALTER TABLE academico.vi_carrera_archivo OWNER TO attinae_user;

--
-- Name: vi_datosaspirante; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_datosaspirante AS
 SELECT cn.aniolectivo_id,
    al.anio AS aniolectivo,
    cn.periodo_id,
    pl.codigo AS periodo,
    cn.carrera_id,
    ( SELECT carrera.nombre
           FROM academico.carrera
          WHERE (carrera.carrera_id = cn.carrera_id)) AS carrera,
    cj.jornada_id,
    ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = cj.jornada_id)) AS jornada,
    pe.tipodocumento_id,
    ( SELECT tipodocumento.descripcion
           FROM academico.tipodocumento
          WHERE (tipodocumento.tipodocumento_id = pe.tipodocumento_id)) AS tipodocumento,
    pe.documentoidentificacion,
    pe.apellido1,
    pe.apellido2,
    pe.nombre1,
    pe.nombre2,
    pe.sexo_id,
    ( SELECT sexo.descripcion
           FROM academico.sexo
          WHERE (sexo.sexo_id = pe.sexo_id)) AS sexo,
    pe.identidadgenero_id,
    ( SELECT identidadgenero.descripcion
           FROM academico.identidadgenero
          WHERE (identidadgenero.identidadgenero_id = pe.identidadgenero_id)) AS identidadgenero,
    pe.estadocivil_id,
    ( SELECT estadocivil.descripcion
           FROM academico.estadocivil
          WHERE (estadocivil.estadocivil_id = pe.estadocivil_id)) AS estadocivil,
    pe.tiposangre,
    pe.tipodiscapacidad_id,
    ( SELECT tipodiscapacidad.descripcion
           FROM academico.tipodiscapacidad
          WHERE (tipodiscapacidad.tipodiscapacidad_id = pe.tipodiscapacidad_id)) AS tipodiscapacidad,
    pe.porcentajediscapacidad,
    pe.descripciondiscapacidad,
    pe.nacionalidad_id,
    ( SELECT nacionalidad.descripcion
           FROM academico.nacionalidad
          WHERE (nacionalidad.nacionalidad_id = pe.nacionalidad_id)) AS nacionalidad,
    pe.idioma_id,
    ( SELECT idioma.descripcion
           FROM academico.idioma
          WHERE (idioma.idioma_id = pe.idioma_id)) AS idioma,
    pe.etnia_id,
    ( SELECT etnia.descripcion
           FROM academico.etnia
          WHERE (etnia.etnia_id = pe.etnia_id)) AS etnia,
    pe.telefonoconvencional,
    pe.telefonocelular,
    pe.emailpersonal,
    pe.paisdomicilio_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisdomicilio_id)) AS paisdomicilio,
    pe.provinciadomicilio_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provinciadomicilio_id)) AS provinciadomicilio,
    pe.ciudaddomicilio_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudaddomicilio_id)) AS ciudaddomicilio,
    pe.parroquiadomicilio_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquiadomicilio_id)) AS parroquiadomicilio,
    pe.barrio,
    pe.direccion,
    pe.referenciadireccion,
    pe.paisnacimiento_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisnacimiento_id)) AS paisnacimiento,
    pe.provincianacimiento_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provincianacimiento_id)) AS provincianacimiento,
    pe.ciudadnacimiento_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudadnacimiento_id)) AS ciudadnacimiento,
    pe.parroquianacimiento_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquianacimiento_id)) AS parroquianacimiento,
    pe.personacontacto,
    pe.telefonoconctacto,
    ap.unidadeducativa_id,
    ue.nombre AS unidadeducativa,
    ue.pais_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = ue.pais_id)) AS paisunidadeducativa,
    ue.ciudad_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = ue.ciudad_id)) AS ciudadunidadeducativa,
    ap.titulobachiller,
    ap.fechagraduacion,
    ap.calificaciongraduacion
   FROM (((((((academico.registronivelacion rn
     JOIN academico.persona pe ON ((rn.persona_id = pe.persona_id)))
     JOIN academico.aspirante ap ON ((ap.persona_id = pe.persona_id)))
     JOIN academico.unidadeducativa ue ON ((ue.unidadeducativa_id = ap.unidadeducativa_id)))
     JOIN academico.cursonivelacion cn ON ((rn.cursonivelacion_id = cn.cursonivelacion_id)))
     JOIN academico.cursonivelacionjornada cj ON ((rn.cursonivelacionjornada_id = cj.cursonivelacionjornada_id)))
     JOIN academico.anio_lectivo al ON ((cn.aniolectivo_id = al.anio_lectivo_id)))
     JOIN academico.periodo pl ON ((cn.periodo_id = pl.periodo_id)));


ALTER TABLE academico.vi_datosaspirante OWNER TO attinae_user;

--
-- Name: vi_desglose_evaluacion; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_desglose_evaluacion AS
 SELECT desgloseevaluacion.desgloseevaluacion_id,
    desgloseevaluacion.mallaelemento_id,
    desgloseevaluacion.detallemodoevaluacion_id,
    desgloseevaluacion.porcentajecalificacion,
    desgloseevaluacion.estado_id,
    desgloseevaluacion.creadopor,
    desgloseevaluacion.creado,
    desgloseevaluacion.actualizadopor,
    desgloseevaluacion.actualizado,
    desgloseevaluacion.activo,
    desgloseevaluacion.desdeintegradora,
    detallemodoevaluacion.descripcion
   FROM (academico.detallemodoevaluacion
     RIGHT JOIN academico.desgloseevaluacion ON ((detallemodoevaluacion.detallemodoevaluacion_id = desgloseevaluacion.detallemodoevaluacion_id)));


ALTER TABLE academico.vi_desglose_evaluacion OWNER TO attinae_user;

--
-- Name: vi_docente_dialogo; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_docente_dialogo AS
 SELECT docente.persona_id,
    persona.nombre1,
    persona.nombre2,
    persona.apellido1,
    persona.apellido2,
    persona.documentoidentificacion,
    docente.estado_id,
    docente.activo
   FROM (academico.docente
     JOIN academico.persona ON ((docente.persona_id = persona.persona_id)));


ALTER TABLE academico.vi_docente_dialogo OWNER TO attinae_user;

--
-- Name: vi_docentes; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_docentes AS
 SELECT doc.persona_id,
    per.tipopersona,
    per.tipodocumento_id,
    ( SELECT tipodocumento.descripcion
           FROM academico.tipodocumento
          WHERE (tipodocumento.tipodocumento_id = per.tipodocumento_id)) AS tipodocumentodescripcion,
    per.documentoidentificacion,
    doc.titulo_id,
    ( SELECT titulo.descripcion
           FROM academico.titulo
          WHERE (titulo.titulo_id = doc.titulo_id)) AS titutlodescricpion,
    ( SELECT titulo.abreviatura
           FROM academico.titulo
          WHERE (titulo.titulo_id = doc.titulo_id)) AS titutloabreviatura,
    per.nombre1,
    per.nombre2,
    per.apellido1,
    per.apellido2,
    per.sexo_id,
    ( SELECT sexo.descripcion
           FROM academico.sexo
          WHERE (sexo.sexo_id = per.sexo_id)) AS sexodescripcion,
    per.identidadgenero_id,
    ( SELECT identidadgenero.descripcion
           FROM academico.identidadgenero
          WHERE (identidadgenero.identidadgenero_id = per.identidadgenero_id)) AS identidadgenerodescripcion,
    per.fechanacimiento,
    per.paisnacimiento_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = per.paisnacimiento_id)) AS paisnacimientonombre,
    per.provincianacimiento_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = per.provincianacimiento_id)) AS provincianacimientonombre,
    per.ciudadnacimiento_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = per.ciudadnacimiento_id)) AS ciudadnacimientonombre,
    per.parroquianacimiento_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = per.parroquianacimiento_id)) AS parroquianacimientonombre,
    per.direccion,
    per.referenciadireccion,
    per.paisdomicilio_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = per.paisdomicilio_id)) AS paisdomicilionombre,
    per.provinciadomicilio_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = per.provinciadomicilio_id)) AS provinciadomicilionombre,
    per.ciudaddomicilio_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = per.ciudaddomicilio_id)) AS ciudaddomicilionombre,
    per.parroquiadomicilio_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = per.parroquiadomicilio_id)) AS parroquiadomicilionombre,
    per.barrio,
    per.telefonoconvencional,
    per.telefonocelular,
    per.operadora_fk,
    ( SELECT operadora.descripcion
           FROM academico.operadora
          WHERE (operadora.operadora_id = per.operadora_fk)) AS operadoradescripcion,
    per.emailpersonal,
    per.emailinstitucional,
    per.nacionalidad_id,
    ( SELECT nacionalidad.descripcion
           FROM academico.nacionalidad
          WHERE (nacionalidad.nacionalidad_id = per.nacionalidad_id)) AS nacionalidaddescripcion,
    per.estadocivil_id,
    ( SELECT estadocivil.descripcion
           FROM academico.estadocivil
          WHERE (estadocivil.estadocivil_id = per.estadocivil_id)) AS estadocivildescripcion,
    per.tiposangre,
    per.tipodiscapacidad_id,
    ( SELECT tipodiscapacidad.descripcion
           FROM academico.tipodiscapacidad
          WHERE (tipodiscapacidad.tipodiscapacidad_id = per.tipodiscapacidad_id)) AS tipodiscapacidaddescripcion,
    per.porcentajediscapacidad,
    per.descripciondiscapacidad,
    per.numerocarnetdiscapacidad,
    per.idioma_id,
    ( SELECT idioma.descripcion
           FROM academico.idioma
          WHERE (idioma.idioma_id = per.idioma_id)) AS idiomadescripcion,
    per.etnia_id,
    ( SELECT etnia.descripcion
           FROM academico.etnia
          WHERE (etnia.etnia_id = per.etnia_id)) AS etniadescripcion,
    per.personacontacto,
    per.telefonoconctacto,
    per.fechaingreso,
    doc.observacion,
    per.estado_id,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = per.estado_id)) AS estadodescripcion
   FROM (academico.docente doc
     JOIN academico.persona per ON ((per.persona_id = doc.persona_id)))
  WHERE ((per.activo = 'S'::bpchar) AND (doc.activo = 'S'::bpchar));


ALTER TABLE academico.vi_docentes OWNER TO attinae_user;

--
-- Name: vi_docentes_paralelo; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_docentes_paralelo AS
 SELECT paralelodocente.paralelodocente_id,
    paralelodocente.persona_id,
    carrera.nombre AS seccion,
    paralelo.carrera_id,
    paralelo.paralelo,
    paralelodocente.paralelo_id,
    elementoeducativo.nombre AS materia,
    paralelo.elementoeducativo_id,
    paralelo.jornada_id,
    jornada.descripcion AS jornada
   FROM ((((academico.paralelodocente
     JOIN academico.paralelo ON ((paralelodocente.paralelo_id = paralelo.paralelo_id)))
     JOIN academico.carrera ON ((paralelo.carrera_id = carrera.carrera_id)))
     JOIN academico.elementoeducativo ON ((paralelo.elementoeducativo_id = elementoeducativo.elementoeducativo_id)))
     JOIN academico.jornada ON ((paralelo.jornada_id = jornada.jornada_id)));


ALTER TABLE academico.vi_docentes_paralelo OWNER TO attinae_user;

--
-- Name: vi_docentescalificacionesregistradas; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_docentescalificacionesregistradas AS
 SELECT DISTINCT (((pers.documentoidentificacion)::text || '-'::text) || (para.paralelo_id)::text) AS id,
    ened.entidadeducativa_id,
    ened.nombre AS nombreentidadeducativa,
    ened.direccion AS direccionentidadeducativa,
    ened.telefonoconvencional AS telconvencionalentidadeducativa,
    ened.telefonocelular AS telcelularentidadeducativa,
    ened.email AS mailentidadeducativa,
    ened.ruc AS rucentidadeducativa,
    pado.persona_id,
    pers.tipopersona,
    pers.tipodocumento_id,
    ( SELECT tipodocumento.descripcion
           FROM academico.tipodocumento
          WHERE (tipodocumento.tipodocumento_id = pers.tipodocumento_id)) AS descripciontipodocumento,
    pers.documentoidentificacion,
    pers.nombre1,
    pers.nombre2,
    pers.apellido1,
    pers.apellido2,
    (((
        CASE
            WHEN (( SELECT titulo.abreviatura
               FROM academico.titulo
              WHERE (titulo.titulo_id = doce.titulo_id)) IS NULL) THEN ''::text
            ELSE (( SELECT titulo.abreviatura
               FROM academico.titulo
              WHERE (titulo.titulo_id = doce.titulo_id)))::text
        END || ' '::text) || ((((((pers.apellido1)::text || ' '::text) || (pers.apellido2)::text) || ', '::text) || (pers.nombre1)::text) || ' '::text)) || (pers.nombre2)::text) AS nombrecompletodocente,
    pers.telefonoconvencional,
    pers.telefonocelular,
    pers.operadora_fk,
    ( SELECT operadora.descripcion
           FROM academico.operadora
          WHERE (operadora.operadora_id = pers.operadora_fk)) AS descripcionoperadora,
    pers.emailpersonal,
    pers.emailinstitucional,
    para.paralelo_id,
    para.anio_lectivo_id,
    anle.anio,
    para.periodo_id,
    peri.descripcion AS descripcionperiodo,
    parc.parcial_id,
    parc.descripcion AS descricionparcial,
    para.carrera_id,
    carr.codigo AS codigocarrera,
    carr.nombre AS nombrecarrera,
    para.ciclo_id,
    ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = para.ciclo_id)) AS descripcionciclo,
    para.jornada_id,
    ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = para.jornada_id)) AS descripcionjornada,
    para.paralelo,
    para.elementoeducativo_id,
    eled.nombre AS elementoeducativonombre,
    (( SELECT count(*) AS count
           FROM academico.paraleloestudiante
          WHERE ((paraleloestudiante.paralelo_id = para.paralelo_id) AND (paraleloestudiante.estado_id <> 26) AND (paraleloestudiante.activo = 'S'::bpchar))))::numeric AS cantidadestudiantesparalelo,
    (EXISTS ( SELECT calificacionestudiante.calificacionestudiante_id
           FROM academico.calificacionestudiante
          WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = parc.parcial_id) AND (calificacionestudiante.activo = 'S'::bpchar)))) AS calificacionregistrada,
    (( SELECT count(*) AS count
           FROM ((academico.calificacionestudiante caes
             JOIN academico.paraleloestudiante paes1 ON ((paes1.paraleloestudiante_id = caes.paraleloestudiante_id)))
             JOIN academico.paralelo para1 ON ((para1.paralelo_id = paes1.paralelo_id)))
          WHERE ((para1.paralelo_id = para.paralelo_id) AND (caes.parcial_id = parc.parcial_id) AND (caes.activo = 'S'::bpchar) AND (caes.calificacion_equivalencia IS NULL))))::integer AS cantidadcalificacionfaltantes
   FROM (((((((((((academico.paralelodocente pado
     JOIN academico.persona pers ON ((pers.persona_id = pado.persona_id)))
     JOIN academico.docente doce ON ((doce.persona_id = pers.persona_id)))
     JOIN academico.paralelo para ON ((para.paralelo_id = pado.paralelo_id)))
     JOIN academico.malla mall ON ((mall.malla_id = para.malla_id)))
     JOIN academico.periodo peri ON ((peri.periodo_id = para.periodo_id)))
     JOIN academico.parcial parc ON ((parc.periodo_id = peri.periodo_id)))
     JOIN academico.anio_lectivo anle ON ((anle.anio_lectivo_id = para.anio_lectivo_id)))
     JOIN academico.carrera carr ON ((carr.carrera_id = para.carrera_id)))
     JOIN academico.elementoeducativo eled ON ((eled.elementoeducativo_id = para.elementoeducativo_id)))
     JOIN academico.entidadeducativa ened ON ((ened.entidadeducativa_id = carr.entidad_educativa)))
     JOIN academico.paraleloestudiante paes ON ((paes.paralelo_id = para.paralelo_id)))
  WHERE ((para.activo = 'S'::bpchar) AND (pado.activo = 'S'::bpchar) AND (anle.estado_id = ANY (ARRAY[3, 4])) AND (peri.estado_id = ANY (ARRAY[3, 4])) AND (parc.estado_id = ANY (ARRAY[3, 4])))
  ORDER BY ened.nombre, anle.anio, peri.descripcion, carr.nombre, pers.apellido1, pers.apellido2, pers.nombre1, pers.nombre2, para.ciclo_id, para.jornada_id, para.paralelo, eled.nombre;


ALTER TABLE academico.vi_docentescalificacionesregistradas OWNER TO attinae_user;

--
-- Name: vi_estudiantes_matriculados; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_estudiantes_matriculados AS
 SELECT DISTINCT ee.entidadeducativa_id,
    ee.codigo AS entidadeducativa_codigo,
    ee.nombre AS entidadeducativa_nombre,
    ee.direccion AS entidadeducativa_direccion,
    ee.telefonoconvencional AS entidadeducativa_telfconvencional,
    ee.telefonocelular AS entidadeducativa_telfcelular,
    ee.email AS entidadeducativa_email,
    ee.ruc AS entidadeducativa_ruc,
    paes.persona_id,
    pe.tipopersona,
    pe.tipodocumento_id,
    ( SELECT tipodocumento.descripcion
           FROM academico.tipodocumento
          WHERE (tipodocumento.tipodocumento_id = pe.tipodocumento_id)) AS descripciontipodocumento,
    pe.documentoidentificacion,
    pe.nombre1,
    pe.nombre2,
    pe.apellido1,
    pe.apellido2,
    (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text) AS nombrecompleto,
    pe.paisnacimiento_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisnacimiento_id)) AS nombrepaisnacimiento,
    pe.provincianacimiento_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provincianacimiento_id)) AS nombreprovincianacimiento,
    pe.ciudadnacimiento_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudadnacimiento_id)) AS nombreciudadnacimiento,
    pe.parroquianacimiento_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquianacimiento_id)) AS nombreparroquianacimiento,
    pe.fechanacimiento,
    pe.paisdomicilio_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisdomicilio_id)) AS nombrepaisdomicilio,
    pe.provinciadomicilio_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provinciadomicilio_id)) AS nombreprovinciadomicilio,
    pe.ciudaddomicilio_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudaddomicilio_id)) AS nombreciudaddomicilio,
    pe.parroquiadomicilio_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquiadomicilio_id)) AS nombreparroquiadomicilio,
    pe.barrio,
    pe.direccion,
    pe.referenciadireccion,
    pe.telefonoconvencional,
    pe.telefonocelular,
    pe.operadora_fk,
    ( SELECT operadora.descripcion
           FROM academico.operadora
          WHERE (operadora.operadora_id = pe.operadora_fk)) AS descripcionoperadora,
    pe.emailpersonal,
    pe.emailinstitucional,
    pe.nacionalidad_id,
    ( SELECT nacionalidad.descripcion
           FROM academico.nacionalidad
          WHERE (nacionalidad.nacionalidad_id = pe.nacionalidad_id)) AS descripcionacionalidad,
    pe.sexo_id,
    ( SELECT sexo.descripcion
           FROM academico.sexo
          WHERE (sexo.sexo_id = pe.sexo_id)) AS descripcionsexo,
    pe.identidadgenero_id,
    ( SELECT identidadgenero.descripcion
           FROM academico.identidadgenero
          WHERE (identidadgenero.identidadgenero_id = pe.identidadgenero_id)) AS descripcionidentidadgenero,
    pe.estadocivil_id,
    ( SELECT estadocivil.descripcion
           FROM academico.estadocivil
          WHERE (estadocivil.estadocivil_id = pe.estadocivil_id)) AS descripcionestadocivil,
    pe.tiposangre,
    pe.tipodiscapacidad_id,
    ( SELECT tipodiscapacidad.descripcion
           FROM academico.tipodiscapacidad
          WHERE (tipodiscapacidad.tipodiscapacidad_id = pe.tipodiscapacidad_id)) AS descripciontipodiscapacidad,
    pe.porcentajediscapacidad,
    pe.descripciondiscapacidad,
    pe.numerocarnetdiscapacidad,
    pe.idioma_id,
    ( SELECT idioma.descripcion
           FROM academico.idioma
          WHERE (idioma.idioma_id = pe.idioma_id)) AS descripcionidioma,
    pe.etnia_id,
    ( SELECT etnia.descripcion
           FROM academico.etnia
          WHERE (etnia.etnia_id = pe.etnia_id)) AS descripcionetnia,
    pe.personacontacto,
    pe.telefonoconctacto,
    pe.fechaingreso,
    pe.estado_id AS estadopersona,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = pe.estado_id)) AS descripcionestadopersona,
    paes.fechamatriculacion,
    pa.anio_lectivo_id,
    ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)) AS aniolectivo,
    pa.carrera_id,
    ( SELECT carrera.codigo
           FROM academico.carrera
          WHERE (carrera.carrera_id = pa.carrera_id)) AS codigocarrera,
    ( SELECT carrera.nombre
           FROM academico.carrera
          WHERE (carrera.carrera_id = pa.carrera_id)) AS nombrecarrera,
    pa.ciclo_id,
    ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)) AS descripcionciclo,
    pa.jornada_id,
    ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)) AS descripcionjornada,
    pa.paralelo,
    pa.estado_id AS estadoparalelo,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = pa.estado_id)) AS descripcionestadoparalelo,
    paes.tipoaprobacionmateria,
    paes.observacion,
    paes.estado_id AS estadoparaleloestudiante,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = paes.estado_id)) AS descripcionestadoparaleloestudiante
   FROM (((((academico.paraleloestudiante paes
     JOIN academico.paralelo pa ON ((pa.paralelo_id = paes.paralelo_id)))
     JOIN academico.persona pe ON ((pe.persona_id = paes.persona_id)))
     JOIN academico.estudiante es ON ((es.persona_id = pe.persona_id)))
     JOIN academico.anio_lectivo al ON ((al.anio_lectivo_id = pa.anio_lectivo_id)))
     JOIN academico.entidadeducativa ee ON ((ee.entidadeducativa_id = al.entidad_educativa)))
  WHERE ((al.estado_id = 3) AND (al.activo = 'S'::bpchar) AND (paes.activo = 'S'::bpchar));


ALTER TABLE academico.vi_estudiantes_matriculados OWNER TO attinae_user;

--
-- Name: vi_estudiantes_paralelo; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_estudiantes_paralelo AS
 SELECT row_number() OVER (ORDER BY ( SELECT 0)) AS rownum,
    paraleloestudiante.paraleloestudiante_id,
    paraleloestudiante.persona_id AS estudiante_id,
    paraleloestudiante.paralelo_id,
    persona.nombre1,
    persona.nombre2,
    persona.apellido1,
    persona.apellido2,
    (((((((persona.apellido1)::text || ' '::text) || (
        CASE
            WHEN (persona.apellido2 IS NULL) THEN ''::character varying
            ELSE persona.apellido2
        END)::text) || ' '::text) || (persona.nombre1)::text) || ' '::text) || (
        CASE
            WHEN (persona.nombre2 IS NULL) THEN ''::character varying
            ELSE persona.nombre2
        END)::text) AS nombrecompleto,
    estudiante.estado_id AS estado_est,
    paralelo.paralelo,
    jornada.descripcion AS jornada,
    elementoeducativo.nombre AS materia,
    paraleloestudiante.activo,
    paraleloestudiante.estado_id,
    estado.descripion AS estado_descr
   FROM ((((((academico.estudiante
     JOIN academico.persona ON ((estudiante.persona_id = persona.persona_id)))
     JOIN academico.paraleloestudiante ON ((estudiante.persona_id = paraleloestudiante.persona_id)))
     JOIN academico.paralelo ON ((paralelo.paralelo_id = paraleloestudiante.paralelo_id)))
     JOIN academico.jornada ON ((paralelo.jornada_id = jornada.jornada_id)))
     JOIN academico.elementoeducativo ON ((paralelo.elementoeducativo_id = elementoeducativo.elementoeducativo_id)))
     JOIN seguridad.estado ON ((paraleloestudiante.estado_id = estado.estado_id)))
  ORDER BY paraleloestudiante.paralelo_id, (((((((persona.apellido1)::text || ' '::text) || (
        CASE
            WHEN (persona.apellido2 IS NULL) THEN ''::character varying
            ELSE persona.apellido2
        END)::text) || ' '::text) || (persona.nombre1)::text) || ' '::text) || (
        CASE
            WHEN (persona.nombre2 IS NULL) THEN ''::character varying
            ELSE persona.nombre2
        END)::text);


ALTER TABLE academico.vi_estudiantes_paralelo OWNER TO attinae_user;

--
-- Name: vi_integradocicloelementoeducativo; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_integradocicloelementoeducativo AS
 SELECT inte.elementointegra_id,
    inte.mallaelemento_id,
    ea.nombre,
    c.descripcion
   FROM (((academico.elementointegra inte
     JOIN academico.elementoeducativo ea ON ((ea.elementoeducativo_id = inte.elementoeducativo_id)))
     JOIN academico.mallaelemento me ON ((me.elementoeducativo_id = inte.elementoeducativo_id)))
     JOIN academico.ciclo c ON ((c.ciclo_id = me.ciclo_id)))
  WHERE (inte.activo = 'S'::bpchar)
  ORDER BY inte.elementointegra_id;


ALTER TABLE academico.vi_integradocicloelementoeducativo OWNER TO attinae_user;

--
-- Name: vi_libretacalifiacionaesparcial; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_libretacalifiacionaesparcial WITH (security_barrier='false') AS
 SELECT DISTINCT ee.codigo,
    (((((((((split_part((ee.nombre)::text, ' '::text, 1) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 2)) || ' <br> '::text) || split_part((ee.nombre)::text, ' '::text, 3)) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 4)) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 5)) || ' '::text) AS nombreentidadeducativa,
    ee.direccion AS direccionentidadeducativa,
    ee.telefonoconvencional AS telconvencionalentidadeducativa,
    ee.telefonocelular AS telcelularentidadeducativa,
    ee.email AS mailentidadeducativa,
    ee.ruc AS rucentidadeducativa,
    paes.paraleloestudiante_id,
    paes.persona_id,
    pe.tipopersona,
    pe.tipodocumento_id,
    ( SELECT tipodocumento.descripcion
           FROM academico.tipodocumento
          WHERE (tipodocumento.tipodocumento_id = pe.tipodocumento_id)) AS descripciontipodocumento,
    pe.documentoidentificacion,
    pe.nombre1,
    pe.nombre2,
    pe.apellido1,
    pe.apellido2,
    (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text) AS nombrecompleto,
    pe.paisnacimiento_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisnacimiento_id)) AS nombrepaisnacimiento,
    pe.provincianacimiento_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provincianacimiento_id)) AS nombreprovincianacimiento,
    pe.ciudadnacimiento_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudadnacimiento_id)) AS nombreciudadnacimiento,
    pe.parroquianacimiento_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquianacimiento_id)) AS nombreparroquianacimiento,
    pe.fechanacimiento,
    pe.paisdomicilio_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisdomicilio_id)) AS nombrepaisdomicilio,
    pe.provinciadomicilio_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provinciadomicilio_id)) AS nombreprovinciadomicilio,
    pe.ciudaddomicilio_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudaddomicilio_id)) AS nombreciudaddomicilio,
    pe.parroquiadomicilio_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquiadomicilio_id)) AS nombreparroquiadomicilio,
    pe.barrio,
    pe.direccion,
    pe.referenciadireccion,
    pe.telefonoconvencional,
    pe.telefonocelular,
    pe.operadora_fk,
    ( SELECT operadora.descripcion
           FROM academico.operadora
          WHERE (operadora.operadora_id = pe.operadora_fk)) AS descripcionoperadora,
    pe.emailpersonal,
    pe.emailinstitucional,
    pe.nacionalidad_id,
    ( SELECT nacionalidad.descripcion
           FROM academico.nacionalidad
          WHERE (nacionalidad.nacionalidad_id = pe.nacionalidad_id)) AS descripcionacionalidad,
    pe.sexo_id,
    ( SELECT sexo.descripcion
           FROM academico.sexo
          WHERE (sexo.sexo_id = pe.sexo_id)) AS descripcionsexo,
    pe.identidadgenero_id,
    ( SELECT identidadgenero.descripcion
           FROM academico.identidadgenero
          WHERE (identidadgenero.identidadgenero_id = pe.identidadgenero_id)) AS descripcionidentidadgenero,
    pe.estadocivil_id,
    ( SELECT estadocivil.descripcion
           FROM academico.estadocivil
          WHERE (estadocivil.estadocivil_id = pe.estadocivil_id)) AS descripcionestadocivil,
    pe.tiposangre,
    pe.tipodiscapacidad_id,
    ( SELECT tipodiscapacidad.descripcion
           FROM academico.tipodiscapacidad
          WHERE (tipodiscapacidad.tipodiscapacidad_id = pe.tipodiscapacidad_id)) AS descripciontipodiscapacidad,
    pe.porcentajediscapacidad,
    pe.descripciondiscapacidad,
    pe.numerocarnetdiscapacidad,
    pe.idioma_id,
    ( SELECT idioma.descripcion
           FROM academico.idioma
          WHERE (idioma.idioma_id = pe.idioma_id)) AS descripcionidioma,
    pe.etnia_id,
    ( SELECT etnia.descripcion
           FROM academico.etnia
          WHERE (etnia.etnia_id = pe.etnia_id)) AS descripcionetnia,
    pe.personacontacto,
    pe.telefonoconctacto,
    pe.fechaingreso,
    pe.estado_id AS estadopersona,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = pe.estado_id)) AS descripcionestadopersona,
    paes.fechamatriculacion,
    pa.paralelo_id,
    pa.anio_lectivo_id,
    ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)) AS aniolectivo,
    pa.periodo_id,
    per.descripcion AS descripcionperiodo,
    par.parcial_id,
    par.descripcion AS descripcionparcial,
    par.calificacioncondesglose,
    par.porcentajeponderacion,
    pa.carrera_id,
    car.codigo AS codigocarrera,
    car.nombre AS nombrecarrera,
    pa.ciclo_id,
    ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)) AS descripcionciclo,
    pa.jornada_id,
    ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)) AS descripcionjornada,
    pa.paralelo,
    pa.estado_id AS estadoparalelo,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = pa.estado_id)) AS descripcionestadoparalelo,
    pa.elementoeducativo_id,
    ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = pa.elementoeducativo_id)) AS nombreelementoeducativo,
    mael.campoformacion_id,
    paes.tipoaprobacionmateria,
    ( SELECT mallaelemento.integradora
           FROM academico.mallaelemento
          WHERE ((mallaelemento.malla_id = pa.malla_id) AND (mallaelemento.ciclo_id = pa.ciclo_id) AND (mallaelemento.elementoeducativo_id = pa.elementoeducativo_id))) AS sepromedia,
    paes.observacion,
    paes.estado_id AS estadoparaleloestudiante,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = paes.estado_id)) AS descripcionestadoparaleloestudiante,
    round(caes.calificacion_numerica, 2) AS calificacion_numerica,
        CASE
            WHEN ((mael.modoevaluacion_id = 11) AND (caes.calificacion_numerica = (0)::numeric)) THEN ' '::text
            ELSE caes.calificacion_equivalencia
        END AS calificacion_equivalencia
   FROM ((((((((((academico.paraleloestudiante paes
     JOIN academico.paralelo pa ON ((pa.paralelo_id = paes.paralelo_id)))
     JOIN academico.mallaelemento mael ON (((mael.malla_id = pa.malla_id) AND (mael.elementoeducativo_id = pa.elementoeducativo_id) AND (mael.ciclo_id = pa.ciclo_id))))
     JOIN academico.carrera car ON ((car.carrera_id = pa.carrera_id)))
     JOIN academico.entidadeducativa ee ON ((ee.entidadeducativa_id = car.entidad_educativa)))
     JOIN academico.persona pe ON ((pe.persona_id = paes.persona_id)))
     JOIN academico.estudiante es ON ((es.persona_id = pe.persona_id)))
     JOIN academico.anio_lectivo al ON ((al.anio_lectivo_id = pa.anio_lectivo_id)))
     JOIN academico.periodo per ON ((per.anio_lectivo_id = al.anio_lectivo_id)))
     JOIN academico.parcial par ON ((par.periodo_id = per.periodo_id)))
     LEFT JOIN academico.calificacionestudiante caes ON (((caes.paraleloestudiante_id = paes.paraleloestudiante_id) AND (caes.parcial_id = par.parcial_id))))
  WHERE ((al.activo = 'S'::bpchar) AND (paes.activo = 'S'::bpchar) AND ((caes.activo = 'S'::bpchar) OR (caes.activo IS NULL)) AND (pa.elementoeducativo_id <> 38) AND (pa.periodo_id = per.periodo_id))
  ORDER BY ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)), per.descripcion, par.descripcion, ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)), ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)), pa.paralelo, ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = pa.elementoeducativo_id)), (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text);


ALTER TABLE academico.vi_libretacalifiacionaesparcial OWNER TO attinae_user;

--
-- Name: vi_libretacalificacionesanual; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_libretacalificacionesanual AS
 SELECT DISTINCT ee.codigo,
    (((((((((split_part((ee.nombre)::text, ' '::text, 1) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 2)) || ' <br> '::text) || split_part((ee.nombre)::text, ' '::text, 3)) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 4)) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 5)) || ' '::text) AS nombreentidadeducativa,
    ee.direccion AS direccionentidadeducativa,
    ee.telefonoconvencional AS telconvencionalentidadeducativa,
    ee.telefonocelular AS telcelularentidadeducativa,
    ee.email AS mailentidadeducativa,
    ee.ruc AS rucentidadeducativa,
    paes.persona_id,
    pe.tipopersona,
    pe.tipodocumento_id,
    ( SELECT tipodocumento.descripcion
           FROM academico.tipodocumento
          WHERE (tipodocumento.tipodocumento_id = pe.tipodocumento_id)) AS descripciontipodocumento,
    pe.documentoidentificacion,
    pe.nombre1,
    pe.nombre2,
    pe.apellido1,
    pe.apellido2,
    (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text) AS nombrecompleto,
    pe.paisnacimiento_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisnacimiento_id)) AS nombrepaisnacimiento,
    pe.provincianacimiento_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provincianacimiento_id)) AS nombreprovincianacimiento,
    pe.ciudadnacimiento_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudadnacimiento_id)) AS nombreciudadnacimiento,
    pe.parroquianacimiento_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquianacimiento_id)) AS nombreparroquianacimiento,
    pe.fechanacimiento,
    pe.paisdomicilio_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisdomicilio_id)) AS nombrepaisdomicilio,
    pe.provinciadomicilio_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provinciadomicilio_id)) AS nombreprovinciadomicilio,
    pe.ciudaddomicilio_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudaddomicilio_id)) AS nombreciudaddomicilio,
    pe.parroquiadomicilio_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquiadomicilio_id)) AS nombreparroquiadomicilio,
    pe.barrio,
    pe.direccion,
    pe.referenciadireccion,
    pe.telefonoconvencional,
    pe.telefonocelular,
    pe.operadora_fk,
    ( SELECT operadora.descripcion
           FROM academico.operadora
          WHERE (operadora.operadora_id = pe.operadora_fk)) AS descripcionoperadora,
    pe.emailpersonal,
    pe.emailinstitucional,
    pe.nacionalidad_id,
    ( SELECT nacionalidad.descripcion
           FROM academico.nacionalidad
          WHERE (nacionalidad.nacionalidad_id = pe.nacionalidad_id)) AS descripcionacionalidad,
    pe.sexo_id,
    ( SELECT sexo.descripcion
           FROM academico.sexo
          WHERE (sexo.sexo_id = pe.sexo_id)) AS descripcionsexo,
    pe.identidadgenero_id,
    ( SELECT identidadgenero.descripcion
           FROM academico.identidadgenero
          WHERE (identidadgenero.identidadgenero_id = pe.identidadgenero_id)) AS descripcionidentidadgenero,
    pe.estadocivil_id,
    ( SELECT estadocivil.descripcion
           FROM academico.estadocivil
          WHERE (estadocivil.estadocivil_id = pe.estadocivil_id)) AS descripcionestadocivil,
    pe.tiposangre,
    pe.tipodiscapacidad_id,
    ( SELECT tipodiscapacidad.descripcion
           FROM academico.tipodiscapacidad
          WHERE (tipodiscapacidad.tipodiscapacidad_id = pe.tipodiscapacidad_id)) AS descripciontipodiscapacidad,
    pe.porcentajediscapacidad,
    pe.descripciondiscapacidad,
    pe.numerocarnetdiscapacidad,
    pe.idioma_id,
    ( SELECT idioma.descripcion
           FROM academico.idioma
          WHERE (idioma.idioma_id = pe.idioma_id)) AS descripcionidioma,
    pe.etnia_id,
    ( SELECT etnia.descripcion
           FROM academico.etnia
          WHERE (etnia.etnia_id = pe.etnia_id)) AS descripcionetnia,
    pe.personacontacto,
    pe.telefonoconctacto,
    pe.fechaingreso,
    pe.estado_id AS estadopersona,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = pe.estado_id)) AS descripcionestadopersona,
    paes.fechamatriculacion,
    pa.anio_lectivo_id,
    ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)) AS aniolectivo,
    pa.carrera_id,
    car.codigo AS codigocarrera,
    car.nombre AS nombrecarrera,
    pa.ciclo_id,
    ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)) AS descripcionciclo,
    pa.jornada_id,
    ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)) AS descripcionjornada,
    pa.paralelo,
    pa.elementoeducativo_id,
    ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = pa.elementoeducativo_id)) AS nombreelementoeducativo,
    mael.campoformacion_id,
    paes.tipoaprobacionmateria,
    ( SELECT mallaelemento.integradora
           FROM academico.mallaelemento
          WHERE ((mallaelemento.malla_id = pa.malla_id) AND (mallaelemento.ciclo_id = pa.ciclo_id) AND (mallaelemento.elementoeducativo_id = pa.elementoeducativo_id))) AS sepromedia,
    paes.estado_id AS estadoparaleloestudiante,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = paes.estado_id)) AS descripcionestadoparaleloestudiante,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 1) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q1p1_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 1) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 1) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 1) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q1p1_calificacion_equivalencia,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 2) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q1p2_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 2) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 2) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 2) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q1p2_calificacion_equivalencia,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 3) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q1p3_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 3) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 3) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 3) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q1p3_calificacion_equivalencia,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 4) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q1ex_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 4) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 4) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 4) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q1ex_calificacion_equivalencia,
    ( SELECT academico.query_promedioparcial_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedioparcial_periodo) AS q1_query_promedioparcial_periodo,
    ( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo) AS q1_query_promedio_periodo,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 5) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q2p1_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 5) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 5) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 5) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q2p1_calificacion_equivalencia,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 6) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q2p2_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 6) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 6) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 6) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q2p2_calificacion_equivalencia,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 7) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q2p3_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 7) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 7) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 7) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q2p3_calificacion_equivalencia,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 8) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q2ex_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 8) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 8) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 8) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q2ex_calificacion_equivalencia,
    ( SELECT academico.query_promedioparcial_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedioparcial_periodo) AS q2_query_promedioparcial_periodo,
    ( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo) AS q2_query_promedio_periodo,
    ((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) AS suma,
    round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) AS pf,
        CASE
            WHEN (( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 8) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) IS NULL) THEN '--'::text
            ELSE
            CASE
                WHEN ((round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) >= (9)::numeric) AND (round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) <= (10)::numeric)) THEN 'DAR'::text
                WHEN ((round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) >= (7)::numeric) AND (round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) <= 8.99)) THEN 'AAR'::text
                WHEN ((round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) >= 4.001) AND (round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) <= 6.99)) THEN 'PAAR'::text
                WHEN (round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) <= (4)::numeric) THEN 'NAAR'::text
                ELSE '-'::text
            END
        END AS obs
   FROM ((((((((academico.paraleloestudiante paes
     JOIN academico.paralelo pa ON ((pa.paralelo_id = paes.paralelo_id)))
     JOIN academico.mallaelemento mael ON (((mael.malla_id = pa.malla_id) AND (mael.elementoeducativo_id = pa.elementoeducativo_id) AND (mael.ciclo_id = pa.ciclo_id))))
     JOIN academico.carrera car ON ((car.carrera_id = pa.carrera_id)))
     JOIN academico.entidadeducativa ee ON ((ee.entidadeducativa_id = car.entidad_educativa)))
     JOIN academico.persona pe ON ((pe.persona_id = paes.persona_id)))
     JOIN academico.estudiante es ON ((es.persona_id = pe.persona_id)))
     JOIN academico.anio_lectivo al ON ((al.anio_lectivo_id = pa.anio_lectivo_id)))
     JOIN academico.periodo per ON ((per.anio_lectivo_id = al.anio_lectivo_id)))
  WHERE ((al.activo = 'S'::bpchar) AND (paes.activo = 'S'::bpchar) AND (pa.elementoeducativo_id <> 38) AND (mael.activo = 'S'::bpchar) AND (pa.periodo_id = per.periodo_id) AND (pa.periodo_id = 1))
  ORDER BY ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)), ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)), ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)), ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = pa.elementoeducativo_id)), (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text);


ALTER TABLE academico.vi_libretacalificacionesanual OWNER TO attinae_user;

--
-- Name: vi_libretacalificacionesperiodo; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_libretacalificacionesperiodo AS
 SELECT DISTINCT ee.codigo,
    (((((((((split_part((ee.nombre)::text, ' '::text, 1) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 2)) || ' <br> '::text) || split_part((ee.nombre)::text, ' '::text, 3)) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 4)) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 5)) || ' '::text) AS nombreentidadeducativa,
    ee.direccion AS direccionentidadeducativa,
    ee.telefonoconvencional AS telconvencionalentidadeducativa,
    ee.telefonocelular AS telcelularentidadeducativa,
    ee.email AS mailentidadeducativa,
    ee.ruc AS rucentidadeducativa,
    paes.paraleloestudiante_id,
    paes.persona_id,
    pe.tipopersona,
    pe.tipodocumento_id,
    ( SELECT tipodocumento.descripcion
           FROM academico.tipodocumento
          WHERE (tipodocumento.tipodocumento_id = pe.tipodocumento_id)) AS descripciontipodocumento,
    pe.documentoidentificacion,
    pe.nombre1,
    pe.nombre2,
    pe.apellido1,
    pe.apellido2,
    (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text) AS nombrecompleto,
    pe.paisnacimiento_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisnacimiento_id)) AS nombrepaisnacimiento,
    pe.provincianacimiento_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provincianacimiento_id)) AS nombreprovincianacimiento,
    pe.ciudadnacimiento_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudadnacimiento_id)) AS nombreciudadnacimiento,
    pe.parroquianacimiento_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquianacimiento_id)) AS nombreparroquianacimiento,
    pe.fechanacimiento,
    pe.paisdomicilio_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisdomicilio_id)) AS nombrepaisdomicilio,
    pe.provinciadomicilio_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provinciadomicilio_id)) AS nombreprovinciadomicilio,
    pe.ciudaddomicilio_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudaddomicilio_id)) AS nombreciudaddomicilio,
    pe.parroquiadomicilio_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquiadomicilio_id)) AS nombreparroquiadomicilio,
    pe.barrio,
    pe.direccion,
    pe.referenciadireccion,
    pe.telefonoconvencional,
    pe.telefonocelular,
    pe.operadora_fk,
    ( SELECT operadora.descripcion
           FROM academico.operadora
          WHERE (operadora.operadora_id = pe.operadora_fk)) AS descripcionoperadora,
    pe.emailpersonal,
    pe.emailinstitucional,
    pe.nacionalidad_id,
    ( SELECT nacionalidad.descripcion
           FROM academico.nacionalidad
          WHERE (nacionalidad.nacionalidad_id = pe.nacionalidad_id)) AS descripcionacionalidad,
    pe.sexo_id,
    ( SELECT sexo.descripcion
           FROM academico.sexo
          WHERE (sexo.sexo_id = pe.sexo_id)) AS descripcionsexo,
    pe.identidadgenero_id,
    ( SELECT identidadgenero.descripcion
           FROM academico.identidadgenero
          WHERE (identidadgenero.identidadgenero_id = pe.identidadgenero_id)) AS descripcionidentidadgenero,
    pe.estadocivil_id,
    ( SELECT estadocivil.descripcion
           FROM academico.estadocivil
          WHERE (estadocivil.estadocivil_id = pe.estadocivil_id)) AS descripcionestadocivil,
    pe.tiposangre,
    pe.tipodiscapacidad_id,
    ( SELECT tipodiscapacidad.descripcion
           FROM academico.tipodiscapacidad
          WHERE (tipodiscapacidad.tipodiscapacidad_id = pe.tipodiscapacidad_id)) AS descripciontipodiscapacidad,
    pe.porcentajediscapacidad,
    pe.descripciondiscapacidad,
    pe.numerocarnetdiscapacidad,
    pe.idioma_id,
    ( SELECT idioma.descripcion
           FROM academico.idioma
          WHERE (idioma.idioma_id = pe.idioma_id)) AS descripcionidioma,
    pe.etnia_id,
    ( SELECT etnia.descripcion
           FROM academico.etnia
          WHERE (etnia.etnia_id = pe.etnia_id)) AS descripcionetnia,
    pe.personacontacto,
    pe.telefonoconctacto,
    pe.fechaingreso,
    pe.estado_id AS estadopersona,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = pe.estado_id)) AS descripcionestadopersona,
    paes.fechamatriculacion,
    pa.paralelo_id,
    pa.anio_lectivo_id,
    ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)) AS aniolectivo,
    per.periodo_id,
    per.descripcion AS descripcionperiodo,
    pa.carrera_id,
    car.codigo AS codigocarrera,
    car.nombre AS nombrecarrera,
    pa.ciclo_id,
    ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)) AS descripcionciclo,
    pa.jornada_id,
    ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)) AS descripcionjornada,
    pa.paralelo,
    pa.estado_id AS estadoparalelo,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = pa.estado_id)) AS descripcionestadoparalelo,
    pa.elementoeducativo_id,
    ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = pa.elementoeducativo_id)) AS nombreelementoeducativo,
    mael.campoformacion_id,
    paes.tipoaprobacionmateria,
    ( SELECT mallaelemento.integradora
           FROM academico.mallaelemento
          WHERE ((mallaelemento.malla_id = pa.malla_id) AND (mallaelemento.ciclo_id = pa.ciclo_id) AND (mallaelemento.elementoeducativo_id = pa.elementoeducativo_id))) AS sepromedia,
    paes.observacion,
    paes.estado_id AS estadoparaleloestudiante,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = paes.estado_id)) AS descripcionestadoparaleloestudiante,
    ( SELECT round(calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.calificacionestudiante
          WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 1))) AS p1_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 1))) = (0)::numeric) THEN '--'::text
            ELSE ( SELECT calificacionestudiante.calificacion_equivalencia
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 1)))
        END AS p1_calificacion_equivalencia,
    ( SELECT round(calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.calificacionestudiante
          WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 2))) AS p2_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 2))) = (0)::numeric) THEN '--'::text
            ELSE ( SELECT calificacionestudiante.calificacion_equivalencia
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 2)))
        END AS p2_calificacion_equivalencia,
    ( SELECT round(calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.calificacionestudiante
          WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 3))) AS p3_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 3))) = (0)::numeric) THEN '--'::text
            ELSE ( SELECT calificacionestudiante.calificacion_equivalencia
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 3)))
        END AS p3_calificacion_equivalencia,
    ( SELECT round(calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.calificacionestudiante
          WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 4))) AS ex_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 4))) = (0)::numeric) THEN '--'::text
            ELSE ( SELECT calificacionestudiante.calificacion_equivalencia
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 4)))
        END AS ex_calificacion_equivalencia,
    ( SELECT academico.query_promedioparcial_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedioparcial_periodo) AS promedioperiodo_parciales,
    ( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo) AS promedio_periodo,
        CASE
            WHEN (( SELECT round(calificacionestudiante.calificacion_numerica, 2) AS round
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 4))) IS NULL) THEN '--'::text
            ELSE
            CASE
                WHEN (((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric >= (9)::numeric) AND ((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric <= (10)::numeric)) THEN 'DAR'::text
                WHEN (((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric >= (7)::numeric) AND ((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric <= 8.99)) THEN 'AAR'::text
                WHEN (((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric >= 4.001) AND ((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric <= 6.99)) THEN 'PAAR'::text
                WHEN ((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric <= (4)::numeric) THEN 'NAAR'::text
                ELSE NULL::text
            END
        END AS obs
   FROM ((((((((academico.paraleloestudiante paes
     JOIN academico.paralelo pa ON ((pa.paralelo_id = paes.paralelo_id)))
     JOIN academico.mallaelemento mael ON (((mael.malla_id = pa.malla_id) AND (mael.elementoeducativo_id = pa.elementoeducativo_id) AND (mael.ciclo_id = pa.ciclo_id))))
     JOIN academico.carrera car ON ((car.carrera_id = pa.carrera_id)))
     JOIN academico.entidadeducativa ee ON ((ee.entidadeducativa_id = car.entidad_educativa)))
     JOIN academico.persona pe ON ((pe.persona_id = paes.persona_id)))
     JOIN academico.estudiante es ON ((es.persona_id = pe.persona_id)))
     JOIN academico.anio_lectivo al ON ((al.anio_lectivo_id = pa.anio_lectivo_id)))
     JOIN academico.periodo per ON ((per.anio_lectivo_id = al.anio_lectivo_id)))
  WHERE ((al.activo = 'S'::bpchar) AND (paes.activo = 'S'::bpchar) AND (pa.elementoeducativo_id <> 38) AND (mael.activo = 'S'::bpchar) AND (pa.periodo_id = per.periodo_id))
  ORDER BY ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)), per.descripcion, ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)), ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)), pa.paralelo, ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = pa.elementoeducativo_id)), (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text);


ALTER TABLE academico.vi_libretacalificacionesperiodo OWNER TO attinae_user;

--
-- Name: vi_libretacalificacionessupletorio; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_libretacalificacionessupletorio AS
 SELECT DISTINCT ee.codigo,
    (((((((((split_part((ee.nombre)::text, ' '::text, 1) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 2)) || ' <br> '::text) || split_part((ee.nombre)::text, ' '::text, 3)) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 4)) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 5)) || ' '::text) AS nombreentidadeducativa,
    ee.direccion AS direccionentidadeducativa,
    ee.telefonoconvencional AS telconvencionalentidadeducativa,
    ee.telefonocelular AS telcelularentidadeducativa,
    ee.email AS mailentidadeducativa,
    ee.ruc AS rucentidadeducativa,
    paes.persona_id,
    pe.tipopersona,
    pe.tipodocumento_id,
    ( SELECT tipodocumento.descripcion
           FROM academico.tipodocumento
          WHERE (tipodocumento.tipodocumento_id = pe.tipodocumento_id)) AS descripciontipodocumento,
    pe.documentoidentificacion,
    pe.nombre1,
    pe.nombre2,
    pe.apellido1,
    pe.apellido2,
    (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text) AS nombrecompleto,
    pe.paisnacimiento_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisnacimiento_id)) AS nombrepaisnacimiento,
    pe.provincianacimiento_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provincianacimiento_id)) AS nombreprovincianacimiento,
    pe.ciudadnacimiento_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudadnacimiento_id)) AS nombreciudadnacimiento,
    pe.parroquianacimiento_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquianacimiento_id)) AS nombreparroquianacimiento,
    pe.fechanacimiento,
    pe.paisdomicilio_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisdomicilio_id)) AS nombrepaisdomicilio,
    pe.provinciadomicilio_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provinciadomicilio_id)) AS nombreprovinciadomicilio,
    pe.ciudaddomicilio_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudaddomicilio_id)) AS nombreciudaddomicilio,
    pe.parroquiadomicilio_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquiadomicilio_id)) AS nombreparroquiadomicilio,
    pe.barrio,
    pe.direccion,
    pe.referenciadireccion,
    pe.telefonoconvencional,
    pe.telefonocelular,
    pe.operadora_fk,
    ( SELECT operadora.descripcion
           FROM academico.operadora
          WHERE (operadora.operadora_id = pe.operadora_fk)) AS descripcionoperadora,
    pe.emailpersonal,
    pe.emailinstitucional,
    pe.nacionalidad_id,
    ( SELECT nacionalidad.descripcion
           FROM academico.nacionalidad
          WHERE (nacionalidad.nacionalidad_id = pe.nacionalidad_id)) AS descripcionacionalidad,
    pe.sexo_id,
    ( SELECT sexo.descripcion
           FROM academico.sexo
          WHERE (sexo.sexo_id = pe.sexo_id)) AS descripcionsexo,
    pe.identidadgenero_id,
    ( SELECT identidadgenero.descripcion
           FROM academico.identidadgenero
          WHERE (identidadgenero.identidadgenero_id = pe.identidadgenero_id)) AS descripcionidentidadgenero,
    pe.estadocivil_id,
    ( SELECT estadocivil.descripcion
           FROM academico.estadocivil
          WHERE (estadocivil.estadocivil_id = pe.estadocivil_id)) AS descripcionestadocivil,
    pe.tiposangre,
    pe.tipodiscapacidad_id,
    ( SELECT tipodiscapacidad.descripcion
           FROM academico.tipodiscapacidad
          WHERE (tipodiscapacidad.tipodiscapacidad_id = pe.tipodiscapacidad_id)) AS descripciontipodiscapacidad,
    pe.porcentajediscapacidad,
    pe.descripciondiscapacidad,
    pe.numerocarnetdiscapacidad,
    pe.idioma_id,
    ( SELECT idioma.descripcion
           FROM academico.idioma
          WHERE (idioma.idioma_id = pe.idioma_id)) AS descripcionidioma,
    pe.etnia_id,
    ( SELECT etnia.descripcion
           FROM academico.etnia
          WHERE (etnia.etnia_id = pe.etnia_id)) AS descripcionetnia,
    pe.personacontacto,
    pe.telefonoconctacto,
    pe.fechaingreso,
    pe.estado_id AS estadopersona,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = pe.estado_id)) AS descripcionestadopersona,
    paes.fechamatriculacion,
    pa.anio_lectivo_id,
    ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)) AS aniolectivo,
    pa.carrera_id,
    car.codigo AS codigocarrera,
    car.nombre AS nombrecarrera,
    pa.ciclo_id,
    ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)) AS descripcionciclo,
    pa.jornada_id,
    ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)) AS descripcionjornada,
    pa.paralelo,
    pa.elementoeducativo_id,
    ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = pa.elementoeducativo_id)) AS nombreelementoeducativo,
    mael.campoformacion_id,
    paes.tipoaprobacionmateria,
    ( SELECT mallaelemento.integradora
           FROM academico.mallaelemento
          WHERE ((mallaelemento.malla_id = pa.malla_id) AND (mallaelemento.ciclo_id = pa.ciclo_id) AND (mallaelemento.elementoeducativo_id = pa.elementoeducativo_id))) AS sepromedia,
    paes.estado_id AS estadoparaleloestudiante,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = paes.estado_id)) AS descripcionestadoparaleloestudiante,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 1) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q1p1_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 1) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 1) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 1) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q1p1_calificacion_equivalencia,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 2) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q1p2_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 2) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 2) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 2) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q1p2_calificacion_equivalencia,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 3) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q1p3_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 3) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 3) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 3) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q1p3_calificacion_equivalencia,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 4) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q1ex_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 4) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 4) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 1) AND (query_calificacionestudiante.parcial_id = 4) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q1ex_calificacion_equivalencia,
    ( SELECT academico.query_promedioparcial_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedioparcial_periodo) AS q1_query_promedioparcial_periodo,
    ( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo) AS q1_query_promedio_periodo,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 5) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q2p1_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 5) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 5) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 5) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q2p1_calificacion_equivalencia,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 6) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q2p2_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 6) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 6) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 6) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q2p2_calificacion_equivalencia,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 7) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q2p3_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 7) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 7) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 7) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q2p3_calificacion_equivalencia,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 8) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS q2ex_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 8) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 8) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 8) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS q2ex_calificacion_equivalencia,
    ( SELECT academico.query_promedioparcial_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedioparcial_periodo) AS q2_query_promedioparcial_periodo,
    ( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo) AS q2_query_promedio_periodo,
    ((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) AS suma,
    round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) AS pf,
        CASE
            WHEN (( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 2) AND (query_calificacionestudiante.parcial_id = 8) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) IS NULL) THEN '--'::text
            ELSE
            CASE
                WHEN ((round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) >= (9)::numeric) AND (round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) <= (10)::numeric)) THEN 'DAR'::text
                WHEN ((round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) >= (7)::numeric) AND (round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) <= 8.99)) THEN 'AAR'::text
                WHEN ((round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) >= 4.001) AND (round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) <= 6.99)) THEN 'PAAR'::text
                WHEN (round((((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 1, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric + (( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, 2, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric) / (2)::numeric), 2) <= (4)::numeric) THEN 'NAAR'::text
                ELSE '-'::text
            END
        END AS obs,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 3) AND (query_calificacionestudiante.parcial_id = 9) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS sup1_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 3) AND (query_calificacionestudiante.parcial_id = 9) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 3) AND (query_calificacionestudiante.parcial_id = 9) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 3) AND (query_calificacionestudiante.parcial_id = 9) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS sup1_calificacion_equivalencia,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 3) AND (query_calificacionestudiante.parcial_id = 10) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS sup2_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 3) AND (query_calificacionestudiante.parcial_id = 10) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 3) AND (query_calificacionestudiante.parcial_id = 10) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 3) AND (query_calificacionestudiante.parcial_id = 10) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS sup2_calificacion_equivalencia,
    ( SELECT round(query_calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.query_calificacionestudiante
          WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 3) AND (query_calificacionestudiante.parcial_id = 11) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) AS sup3_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 3) AND (query_calificacionestudiante.parcial_id = 11) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))) = (0)::numeric) THEN '--'::text
            WHEN (NOT (EXISTS ( SELECT
                    CASE
                        WHEN (query_calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(query_calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 3) AND (query_calificacionestudiante.parcial_id = 11) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id))))) THEN '--'::text
            ELSE ( SELECT query_calificacionestudiante.calificacion_equivalencia
               FROM academico.query_calificacionestudiante
              WHERE ((query_calificacionestudiante.anio_lectivo_id = pa.anio_lectivo_id) AND (query_calificacionestudiante.periodo_id = 3) AND (query_calificacionestudiante.parcial_id = 11) AND (query_calificacionestudiante.carrera_id = pa.carrera_id) AND (query_calificacionestudiante.ciclo_id = pa.ciclo_id) AND (query_calificacionestudiante.jornada_id = pa.jornada_id) AND (query_calificacionestudiante.paralelo = pa.paralelo) AND (query_calificacionestudiante.persona_id = pe.persona_id) AND (query_calificacionestudiante.elementoeducativo_id = pa.elementoeducativo_id)))
        END AS sup3_calificacion_equivalencia
   FROM ((((((((academico.paraleloestudiante paes
     JOIN academico.paralelo pa ON ((pa.paralelo_id = paes.paralelo_id)))
     JOIN academico.mallaelemento mael ON (((mael.malla_id = pa.malla_id) AND (mael.elementoeducativo_id = pa.elementoeducativo_id) AND (mael.ciclo_id = pa.ciclo_id))))
     JOIN academico.carrera car ON ((car.carrera_id = pa.carrera_id)))
     JOIN academico.entidadeducativa ee ON ((ee.entidadeducativa_id = car.entidad_educativa)))
     JOIN academico.persona pe ON ((pe.persona_id = paes.persona_id)))
     JOIN academico.estudiante es ON ((es.persona_id = pe.persona_id)))
     JOIN academico.anio_lectivo al ON ((al.anio_lectivo_id = pa.anio_lectivo_id)))
     JOIN academico.periodo per ON ((per.anio_lectivo_id = al.anio_lectivo_id)))
  WHERE ((al.activo = 'S'::bpchar) AND (paes.activo = 'S'::bpchar) AND (pa.elementoeducativo_id <> 38) AND (mael.activo = 'S'::bpchar) AND (pa.periodo_id = per.periodo_id) AND (pa.periodo_id = 1))
  ORDER BY ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)), ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)), ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)), ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = pa.elementoeducativo_id)), (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text);


ALTER TABLE academico.vi_libretacalificacionessupletorio OWNER TO attinae_user;

--
-- Name: vi_mallaacademica; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_mallaacademica AS
 SELECT ca.codigo AS codigocarrera,
    ca.nombre AS nombrecarrera,
    ca.titulo_ofrece,
    ca.creditos,
    ca.precompetencias,
    ca.competencias,
    ca.perfilprofesional,
    ma.codigo AS codigomalla,
    ma.fechainicio,
    ma.fechacaducidad,
    ma.fechaaprobacioninterna,
    ma.fechaaprobacionexterna,
    ma.numeroresolucion,
    mc.malla_id,
    mc.ciclo_id,
    ci.descripcion AS nombreciclo,
    ci.color AS colorciclo,
    ci.orden,
    ( SELECT nucleoproblemico.contenido
           FROM academico.nucleoproblemico
          WHERE ((nucleoproblemico.nucleoproblemico_id = mc.nucleoproblemico_id) AND (nucleoproblemico.activo = 'S'::bpchar))) AS nucleoproblemico,
    ( SELECT unidadformacion.descripcion
           FROM academico.unidadformacion
          WHERE ((unidadformacion.unidadformacion_id = mc.unidadformacion_id) AND (unidadformacion.activo = 'S'::bpchar))) AS unidadformacion,
    ( SELECT unidadformacion.color
           FROM academico.unidadformacion
          WHERE ((unidadformacion.unidadformacion_id = mc.unidadformacion_id) AND (unidadformacion.activo = 'S'::bpchar))) AS colorunidadformacion,
    me.elementoeducativo_id,
    ee.codigo AS codigoelemenetoeducativo,
    ee.nombre AS nombreelementoeducativo,
    me.creditos AS creditoelemento,
        CASE
            WHEN (EXISTS ( SELECT elementointegra.elementointegra_id
               FROM academico.elementointegra
              WHERE ((elementointegra.mallaelemento_id = me.mallaelemento_id) AND (elementointegra.activo = 'S'::bpchar)))) THEN 'Integrada'::text
            WHEN (me.integradora = true) THEN 'Integradora'::text
            ELSE NULL::text
        END AS catedraintegra,
    ( SELECT func_obtenerprerequisito.func_obtenerprerequisito
           FROM academico.func_obtenerprerequisito(me.mallaelemento_id) func_obtenerprerequisito(func_obtenerprerequisito)) AS prerequisito,
    me.campoformacion_id,
    ( SELECT campoformacion.descripcion
           FROM academico.campoformacion
          WHERE ((campoformacion.campoformacion_id = me.campoformacion_id) AND (campoformacion.activo = 'S'::bpchar))) AS campoformacion,
    ( SELECT campoformacion.color
           FROM academico.campoformacion
          WHERE ((campoformacion.campoformacion_id = me.campoformacion_id) AND (campoformacion.activo = 'S'::bpchar))) AS colorcampoformacion,
    mc.resultadoaprendizaje
   FROM (((((academico.mallaciclo mc
     JOIN academico.malla ma ON ((ma.malla_id = mc.malla_id)))
     JOIN academico.carrera ca ON ((ma.carrera_id = ca.carrera_id)))
     JOIN academico.ciclo ci ON ((mc.ciclo_id = ci.ciclo_id)))
     JOIN academico.mallaelemento me ON ((mc.mallaciclo_id = me.mallaciclo_id)))
     JOIN academico.elementoeducativo ee ON ((me.elementoeducativo_id = ee.elementoeducativo_id)))
  WHERE (mc.activo = 'S'::bpchar)
  ORDER BY ci.orden, me.campoformacion_id;


ALTER TABLE academico.vi_mallaacademica OWNER TO attinae_user;

--
-- Name: vi_mallacicloelementoeducativo; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_mallacicloelementoeducativo AS
 SELECT rank() OVER (ORDER BY c.orden, ( SELECT elementoeducativo.codigo
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = me.elementoeducativo_id))) AS id,
    mc.mallaciclo_id,
    mc.malla_id,
    m.codigo,
    m.descripcion AS descripcionmalla,
    m.carrera_id,
    mc.ciclo_id,
    c.descripcion AS descripcionciclo,
    me.elementoeducativo_id,
    ( SELECT elementoeducativo.codigo
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = me.elementoeducativo_id)) AS codigoelementoeducativo,
    ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = me.elementoeducativo_id)) AS nombreelementoeducativo,
    me.campoformacion_id,
    ( SELECT campoformacion.descripcion
           FROM academico.campoformacion
          WHERE (campoformacion.campoformacion_id = me.campoformacion_id)) AS descripcioncampoformacion,
    me.modoevaluacion_id,
    ( SELECT modoevaluacion.descripcion
           FROM academico.modoevaluacion
          WHERE (modoevaluacion.modoevaluacion_id = me.modoevaluacion_id)) AS descripcionmodoevaluacion,
    c.orden
   FROM (((academico.mallaciclo mc
     JOIN academico.ciclo c ON ((mc.ciclo_id = c.ciclo_id)))
     JOIN academico.malla m ON ((mc.malla_id = m.malla_id)))
     LEFT JOIN academico.mallaelemento me ON (((mc.mallaciclo_id = me.mallaciclo_id) AND (me.estado_id = 1) AND (me.activo = 'S'::bpchar))))
  WHERE (mc.activo = 'S'::bpchar)
  ORDER BY c.orden, ( SELECT elementoeducativo.codigo
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = me.elementoeducativo_id));


ALTER TABLE academico.vi_mallacicloelementoeducativo OWNER TO attinae_user;

--
-- Name: vi_mallacicloelementoeducativointegrado; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_mallacicloelementoeducativointegrado AS
 SELECT rank() OVER (ORDER BY c.orden, ( SELECT elementoeducativo.codigo
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = me.elementoeducativo_id))) AS id,
    mc.mallaciclo_id,
    mc.malla_id,
    m.codigo,
    m.descripcion AS descripcionmalla,
    m.carrera_id,
    mc.ciclo_id,
    c.descripcion AS descripcionciclo,
    me.elementoeducativo_id,
    ( SELECT elementoeducativo.codigo
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = me.elementoeducativo_id)) AS codigoelementoeducativo,
    ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = me.elementoeducativo_id)) AS nombreelementoeducativo,
    me.campoformacion_id,
    ( SELECT campoformacion.descripcion
           FROM academico.campoformacion
          WHERE (campoformacion.campoformacion_id = me.campoformacion_id)) AS descripcioncampoformacion,
    me.modoevaluacion_id,
    ( SELECT modoevaluacion.descripcion
           FROM academico.modoevaluacion
          WHERE (modoevaluacion.modoevaluacion_id = me.modoevaluacion_id)) AS descripcionmodoevaluacion,
    c.orden
   FROM (((academico.mallaciclo mc
     JOIN academico.ciclo c ON ((mc.ciclo_id = c.ciclo_id)))
     JOIN academico.malla m ON ((mc.malla_id = m.malla_id)))
     LEFT JOIN academico.mallaelemento me ON (((mc.mallaciclo_id = me.mallaciclo_id) AND (me.estado_id = 1) AND (me.activo = 'S'::bpchar))))
  WHERE ((mc.activo = 'S'::bpchar) AND (( SELECT count(*) AS count
           FROM academico.desgloseevaluacion
          WHERE ((desgloseevaluacion.mallaelemento_id = me.mallaelemento_id) AND (desgloseevaluacion.desdeintegradora = true))) >= 1) AND (( SELECT modoevaluacion.paraintegrar
           FROM academico.modoevaluacion
          WHERE (modoevaluacion.modoevaluacion_id = me.modoevaluacion_id)) = false) AND (NOT (me.elementoeducativo_id IN ( SELECT elementointegra.elementoeducativo_id
           FROM academico.elementointegra
          WHERE (elementointegra.activo = 'S'::bpchar)))))
  ORDER BY c.orden, ( SELECT elementoeducativo.codigo
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = me.elementoeducativo_id));


ALTER TABLE academico.vi_mallacicloelementoeducativointegrado OWNER TO attinae_user;

--
-- Name: vi_ordenpago_16; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_ordenpago_16 AS
 SELECT ordenpago.ordenpago_id,
    ordenpago.numeroorden,
    ordenpago.persona_id,
    ordenpago.registronivelacion_id,
    ordenpago.registroperiodo_id,
    ordenpago.banco,
    ordenpago.numerocuenta,
    ordenpago.tipocuenta,
    ordenpago.fechageneracion,
    ordenpago.fechapago,
    ordenpago.estado_id,
    ordenpago.creado,
    ordenpago.actualizadopor,
    ordenpago.actualizado,
    ordenpago.activo,
    ordenpago.fechamaximapago,
    ordenpago.creadopor,
    ordenpago.concepto,
    (((((((COALESCE(persona.nombre1, ''::character varying))::text || ' '::text) || (COALESCE(persona.nombre2, ''::character varying))::text) || ' '::text) || (COALESCE(persona.apellido1, ''::character varying))::text) || ' '::text) || (COALESCE(persona.apellido2, ''::character varying))::text) AS nombre,
    persona.documentoidentificacion,
    registronivelacion.cursonivelacion_id,
    formapago.descripcion AS forma_pago
   FROM ((((academico.persona
     RIGHT JOIN academico.ordenpago ON ((persona.persona_id = ordenpago.persona_id)))
     JOIN academico.formapago ON ((ordenpago.formapago_id = formapago.formapago_id)))
     JOIN academico.registronivelacion ON ((ordenpago.registronivelacion_id = registronivelacion.registronivelacion_id)))
     JOIN academico.cursonivelacion ON ((registronivelacion.cursonivelacion_id = cursonivelacion.cursonivelacion_id)));


ALTER TABLE academico.vi_ordenpago_16 OWNER TO attinae_user;

--
-- Name: vi_ordenpago_16_old; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_ordenpago_16_old AS
 SELECT ordenpago.ordenpago_id,
    ordenpago.numeroorden,
    ordenpago.persona_id,
    ordenpago.registronivelacion_id,
    ordenpago.registroperiodo_id,
    ordenpago.banco,
    ordenpago.numerocuenta,
    ordenpago.tipocuenta,
    ordenpago.fechageneracion,
    ordenpago.fechapago,
    ordenpago.estado_id,
    ordenpago.creado,
    ordenpago.actualizadopor,
    ordenpago.actualizado,
    ordenpago.activo,
    ordenpago.fechamaximapago,
    ordenpago.creadopor,
    ordenpago.concepto,
    (((((((COALESCE(persona.nombre1, ''::character varying))::text || ' '::text) || (COALESCE(persona.nombre2, ''::character varying))::text) || ' '::text) || (COALESCE(persona.apellido1, ''::character varying))::text) || ' '::text) || (COALESCE(persona.apellido2, ''::character varying))::text) AS nombre,
    persona.documentoidentificacion,
    registronivelacion.cursonivelacion_id
   FROM (((academico.persona
     RIGHT JOIN academico.ordenpago ON ((persona.persona_id = ordenpago.persona_id)))
     JOIN academico.registronivelacion ON ((ordenpago.registronivelacion_id = registronivelacion.registronivelacion_id)))
     JOIN academico.cursonivelacion ON ((registronivelacion.cursonivelacion_id = cursonivelacion.cursonivelacion_id)));


ALTER TABLE academico.vi_ordenpago_16_old OWNER TO attinae_user;

--
-- Name: vi_ordenpagonivelacion; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_ordenpagonivelacion AS
 SELECT op.ordenpago_id AS ordenpagoid,
    op.numeroorden,
    btrim((((
        CASE
            WHEN (pe.apellido1 IS NULL) THEN ''::text
            ELSE ((pe.apellido1)::text || ' '::text)
        END ||
        CASE
            WHEN (pe.apellido2 IS NULL) THEN ''::text
            ELSE ((pe.apellido2)::text || ' '::text)
        END) ||
        CASE
            WHEN (pe.nombre1 IS NULL) THEN ''::text
            ELSE ((pe.nombre1)::text || ' '::text)
        END) || (
        CASE
            WHEN (pe.nombre2 IS NULL) THEN ''::character varying
            ELSE pe.nombre2
        END)::text)) AS nombre,
    ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = ni.aniolectivo_id)) AS aniolectivo,
    ( SELECT periodo.codigo
           FROM academico.periodo
          WHERE (periodo.periodo_id = ni.periodo_id)) AS periodocodigo,
    ( SELECT periodo.descripcion
           FROM academico.periodo
          WHERE (periodo.periodo_id = ni.periodo_id)) AS periododescripcion,
    ( SELECT carrera.nombre
           FROM academico.carrera
          WHERE (carrera.carrera_id = ni.carrera_id)) AS carrera,
    ni.descripcion AS descripcioncurso,
    ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = cn.jornada_id)) AS jornada,
    cn.paralelo,
    op.banco,
    op.numerocuenta,
    op.tipocuenta,
    op.fechageneracion,
    op.fechamaximapago,
    op.concepto
   FROM ((((academico.ordenpago op
     JOIN academico.persona pe ON ((pe.persona_id = op.persona_id)))
     JOIN academico.registronivelacion rn ON ((op.registronivelacion_id = rn.registronivelacion_id)))
     JOIN academico.cursonivelacionjornada cn ON ((cn.cursonivelacionjornada_id = rn.cursonivelacionjornada_id)))
     JOIN academico.cursonivelacion ni ON ((ni.cursonivelacion_id = cn.cursonivelacion_id)));


ALTER TABLE academico.vi_ordenpagonivelacion OWNER TO attinae_user;

--
-- Name: vi_paralelo_elemento_educativo; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_paralelo_elemento_educativo AS
 SELECT paralelo.paralelo_id,
    concat(ciclo.descripcion, ' ', carrera.nombre, ' ', (paralelo.paralelo)::character varying, ' - ', elementoeducativo.nombre) AS nombre_materia_paralelo
   FROM (((academico.carrera
     JOIN academico.paralelo ON ((carrera.carrera_id = paralelo.carrera_id)))
     JOIN academico.elementoeducativo ON ((paralelo.elementoeducativo_id = elementoeducativo.elementoeducativo_id)))
     JOIN academico.ciclo ON ((paralelo.ciclo_id = ciclo.ciclo_id)));


ALTER TABLE academico.vi_paralelo_elemento_educativo OWNER TO attinae_user;

--
-- Name: vi_paralelos_docentes; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_paralelos_docentes AS
 SELECT par.paralelo_id,
    par.anio_lectivo_id,
    ale.anio,
    par.periodo_id,
    per.codigo AS periodo_codigo,
    per.descripcion AS periodo_descripcion,
    per.fecha_inicio AS periodo_fechainicio,
    per.fecha_fin AS periodo_fechafin,
    par.carrera_id,
    car.nombre AS carrera_nombre,
    car.titulo_ofrece,
    car.cantidad_ciclo,
    car.creditos,
    par.malla_id,
    mal.codigo AS malla_codigo,
    mal.descripcion AS malla_descripcion,
    mal.fechainicio AS malla_fechainicio,
    mal.fechacaducidad AS malla_fechacaducidad,
    mal.numeroresolucion,
    mal.fechaaprobacioninterna AS malla_fechaaprobacioninterna,
    mal.fechaaprobacionexterna AS malla_fechaaprobacionexterna,
    par.ciclo_id,
    cic.descripcion AS ciclo_descripcion,
    cic.orden AS ciclo_orden,
    par.jornada_id,
    jor.descripcion AS jornada_descripcion,
    par.elementoeducativo_id,
    edu.codigo AS elementoeducativo_codigo,
    edu.nombre AS elementoeducativo_nombre,
    par.paralelo,
    par.cupo,
    par.disponible,
    pdo.persona_id,
    pso.tipodocumento_id,
    ( SELECT tipodocumento.descripcion
           FROM academico.tipodocumento
          WHERE (tipodocumento.tipodocumento_id = pso.tipodocumento_id)) AS tipodocumento,
    pso.documentoidentificacion,
    ((((((
        CASE
            WHEN ((( SELECT titulo.abreviatura
               FROM academico.titulo
              WHERE (titulo.titulo_id = doc.titulo_id)))::text IS NULL) THEN ''::text
            ELSE (( SELECT titulo.abreviatura
               FROM academico.titulo
              WHERE (titulo.titulo_id = doc.titulo_id)))::text
        END || ' '::text) || (pso.apellido1)::text) || ' '::text) ||
        CASE
            WHEN ((pso.apellido2)::text IS NULL) THEN ''::text
            ELSE (pso.apellido2)::text
        END) || ', '::text) || (pso.nombre1)::text) AS docente,
    pso.telefonoconvencional,
    pso.telefonocelular,
    pso.emailpersonal,
    pso.emailinstitucional,
    pso.estado_id,
    ( SELECT est.descripion
           FROM seguridad.estado est
          WHERE (est.estado_id = par.estado_id)) AS estado_descripcion
   FROM ((((((((((academico.paralelo par
     JOIN academico.anio_lectivo ale ON ((ale.anio_lectivo_id = par.anio_lectivo_id)))
     JOIN academico.periodo per ON ((per.periodo_id = par.periodo_id)))
     JOIN academico.carrera car ON ((car.carrera_id = par.carrera_id)))
     JOIN academico.malla mal ON ((mal.malla_id = par.malla_id)))
     JOIN academico.ciclo cic ON ((cic.ciclo_id = par.ciclo_id)))
     JOIN academico.elementoeducativo edu ON ((edu.elementoeducativo_id = par.elementoeducativo_id)))
     JOIN academico.jornada jor ON ((jor.jornada_id = par.jornada_id)))
     LEFT JOIN academico.paralelodocente pdo ON ((pdo.paralelo_id = par.paralelo_id)))
     LEFT JOIN academico.docente doc ON ((doc.persona_id = pdo.persona_id)))
     LEFT JOIN academico.persona pso ON ((pso.persona_id = pdo.persona_id)))
  WHERE ((par.activo = 'S'::bpchar) AND ((pdo.activo = 'S'::bpchar) OR (pdo.activo IS NULL)))
  ORDER BY ale.anio, per.codigo, car.nombre, cic.descripcion, par.jornada_id, par.elementoeducativo_id, par.paralelo;


ALTER TABLE academico.vi_paralelos_docentes OWNER TO attinae_user;

--
-- Name: vi_paralelos_docentes_asignados; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_paralelos_docentes_asignados AS
 SELECT pdo.paralelodocente_id,
    par.paralelo_id,
    par.anio_lectivo_id,
    ale.anio,
    par.periodo_id,
    per.codigo AS periodo_codigo,
    per.descripcion AS periodo_descripcion,
    per.fecha_inicio AS periodo_fechainicio,
    per.fecha_fin AS periodo_fechafin,
    par.carrera_id,
    car.nombre AS carrera_nombre,
    car.titulo_ofrece,
    car.cantidad_ciclo,
    car.creditos,
    par.malla_id,
    mal.codigo AS malla_codigo,
    mal.descripcion AS malla_descripcion,
    mal.fechainicio AS malla_fechainicio,
    mal.fechacaducidad AS malla_fechacaducidad,
    mal.numeroresolucion,
    mal.fechaaprobacioninterna AS malla_fechaaprobacioninterna,
    mal.fechaaprobacionexterna AS malla_fechaaprobacionexterna,
    par.ciclo_id,
    cic.descripcion AS ciclo_descripcion,
    cic.orden AS ciclo_orden,
    par.jornada_id,
    jor.descripcion AS jornada_descripcion,
    par.elementoeducativo_id,
    edu.codigo AS elementoeducativo_codigo,
    edu.nombre AS elementoeducativo_nombre,
    par.paralelo,
    par.cupo,
    par.disponible,
    pdo.persona_id,
    pso.tipodocumento_id,
    ( SELECT tipodocumento.descripcion
           FROM academico.tipodocumento
          WHERE (tipodocumento.tipodocumento_id = pso.tipodocumento_id)) AS tipodocumento,
    pso.documentoidentificacion,
    ((((((
        CASE
            WHEN ((( SELECT titulo.abreviatura
               FROM academico.titulo
              WHERE (titulo.titulo_id = doc.titulo_id)))::text IS NULL) THEN ''::text
            ELSE (( SELECT titulo.abreviatura
               FROM academico.titulo
              WHERE (titulo.titulo_id = doc.titulo_id)))::text
        END || ' '::text) || (pso.apellido1)::text) || ' '::text) ||
        CASE
            WHEN ((pso.apellido2)::text IS NULL) THEN ''::text
            ELSE (pso.apellido2)::text
        END) || ', '::text) || (pso.nombre1)::text) AS docente,
    pso.telefonoconvencional,
    pso.telefonocelular,
    pso.emailpersonal,
    pso.emailinstitucional,
    pdo.estado_id AS estadoparalelodocente,
    ( SELECT est.descripion
           FROM seguridad.estado est
          WHERE (est.estado_id = pdo.estado_id)) AS estado_asignacion,
    pdo.observacion,
    par.estado_id AS estadoparalelo,
    ( SELECT est.descripion
           FROM seguridad.estado est
          WHERE (est.estado_id = par.estado_id)) AS estado_descripcion
   FROM ((((((((((academico.paralelo par
     JOIN academico.anio_lectivo ale ON ((ale.anio_lectivo_id = par.anio_lectivo_id)))
     JOIN academico.periodo per ON ((per.periodo_id = par.periodo_id)))
     JOIN academico.carrera car ON ((car.carrera_id = par.carrera_id)))
     JOIN academico.malla mal ON ((mal.malla_id = par.malla_id)))
     JOIN academico.ciclo cic ON ((cic.ciclo_id = par.ciclo_id)))
     JOIN academico.elementoeducativo edu ON ((edu.elementoeducativo_id = par.elementoeducativo_id)))
     JOIN academico.jornada jor ON ((jor.jornada_id = par.jornada_id)))
     JOIN academico.paralelodocente pdo ON ((pdo.paralelo_id = par.paralelo_id)))
     JOIN academico.docente doc ON ((doc.persona_id = pdo.persona_id)))
     JOIN academico.persona pso ON ((pso.persona_id = pdo.persona_id)))
  WHERE ((par.activo = 'S'::bpchar) AND ((pdo.activo = 'S'::bpchar) OR (pdo.activo IS NULL)))
  ORDER BY ale.anio, per.codigo, car.nombre, cic.descripcion, par.jornada_id, par.elementoeducativo_id, par.paralelo;


ALTER TABLE academico.vi_paralelos_docentes_asignados OWNER TO attinae_user;

--
-- Name: vi_paralelos_docentes_str; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_paralelos_docentes_str AS
 SELECT par.paralelo_id,
    par.anio_lectivo_id,
    ale.anio,
    par.periodo_id,
    per.codigo AS periodo_codigo,
    per.descripcion AS periodo_descripcion,
    per.fecha_inicio AS periodo_fechainicio,
    per.fecha_fin AS periodo_fechafin,
    par.carrera_id,
    car.nombre AS carrera_nombre,
    car.titulo_ofrece,
    car.cantidad_ciclo,
    car.creditos,
    par.malla_id,
    mal.codigo AS malla_codigo,
    mal.descripcion AS malla_descripcion,
    mal.fechainicio AS malla_fechainicio,
    mal.fechacaducidad AS malla_fechacaducidad,
    mal.numeroresolucion,
    mal.fechaaprobacioninterna AS malla_fechaaprobacioninterna,
    mal.fechaaprobacionexterna AS malla_fechaaprobacionexterna,
    par.ciclo_id,
    cic.descripcion AS ciclo_descripcion,
    cic.orden AS ciclo_orden,
    par.jornada_id,
    jor.descripcion AS jornada_descripcion,
    par.elementoeducativo_id,
    edu.codigo AS elementoeducativo_codigo,
    edu.nombre AS elementoeducativo_nombre,
    par.paralelo,
    par.cupo,
    par.disponible,
    ( SELECT query_paralelodocente.query_paralelodocente
           FROM academico.query_paralelodocente(par.paralelo_id) query_paralelodocente(query_paralelodocente)) AS docentes,
    par.estado_id,
    ( SELECT est.descripion
           FROM seguridad.estado est
          WHERE (est.estado_id = par.estado_id)) AS estado_descripcion
   FROM (((((((academico.paralelo par
     JOIN academico.anio_lectivo ale ON ((ale.anio_lectivo_id = par.anio_lectivo_id)))
     JOIN academico.periodo per ON ((per.periodo_id = par.periodo_id)))
     JOIN academico.carrera car ON ((car.carrera_id = par.carrera_id)))
     JOIN academico.malla mal ON ((mal.malla_id = par.malla_id)))
     JOIN academico.ciclo cic ON ((cic.ciclo_id = par.ciclo_id)))
     JOIN academico.elementoeducativo edu ON ((edu.elementoeducativo_id = par.elementoeducativo_id)))
     JOIN academico.jornada jor ON ((jor.jornada_id = par.jornada_id)))
  WHERE (par.activo = 'S'::bpchar)
  ORDER BY ale.anio, per.codigo, car.nombre, cic.descripcion, par.jornada_id, par.elementoeducativo_id, par.paralelo;


ALTER TABLE academico.vi_paralelos_docentes_str OWNER TO attinae_user;

--
-- Name: vi_paralelos_existentes; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_paralelos_existentes AS
 SELECT par.paralelo_id,
    par.anio_lectivo_id,
    al.anio,
    par.periodo_id,
    per.descripcion AS periodo,
    par.carrera_id,
    car.nombre AS carrera,
    par.ciclo_id,
    cic.orden,
    cic.descripcion AS ciclo,
    par.paralelo,
    par.cupo,
    par.jornada_id,
    jor.descripcion AS jornada,
    par.malla_id,
    mal.descripcion AS malla,
    par.elementoeducativo_id,
    eedu.codigo AS elementoeducativo_codigo,
    eedu.nombre AS elementoeducativo_nombre,
    par.estado_id,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = par.estado_id)) AS estado_descripcion,
    par.activo
   FROM (((((((academico.paralelo par
     JOIN academico.anio_lectivo al ON ((al.anio_lectivo_id = par.anio_lectivo_id)))
     JOIN academico.periodo per ON ((per.periodo_id = par.periodo_id)))
     JOIN academico.carrera car ON ((car.carrera_id = par.carrera_id)))
     JOIN academico.ciclo cic ON ((cic.ciclo_id = par.ciclo_id)))
     JOIN academico.jornada jor ON ((jor.jornada_id = par.jornada_id)))
     JOIN academico.malla mal ON ((mal.malla_id = par.malla_id)))
     JOIN academico.elementoeducativo eedu ON ((eedu.elementoeducativo_id = par.elementoeducativo_id)))
  ORDER BY cic.orden, par.jornada_id, eedu.nombre, par.paralelo;


ALTER TABLE academico.vi_paralelos_existentes OWNER TO attinae_user;

--
-- Name: vi_paralelos_modoevaluacion; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_paralelos_modoevaluacion AS
 SELECT par.paralelo_id,
    par.anio_lectivo_id,
    ale.anio,
    par.periodo_id,
    per.codigo AS periodo_codigo,
    per.descripcion AS periodo_descripcion,
    per.fecha_inicio AS periodo_fechainicio,
    per.fecha_fin AS periodo_fechafin,
    par.carrera_id,
    car.nombre AS carrera_nombre,
    car.titulo_ofrece,
    car.cantidad_ciclo,
    car.creditos,
    par.malla_id,
    mal.codigo AS malla_codigo,
    mal.descripcion AS malla_descripcion,
    mal.fechainicio AS malla_fechainicio,
    mal.fechacaducidad AS malla_fechacaducidad,
    mal.numeroresolucion,
    mal.fechaaprobacioninterna AS malla_fechaaprobacioninterna,
    mal.fechaaprobacionexterna AS malla_fechaaprobacionexterna,
    par.ciclo_id,
    cic.descripcion AS ciclo_descripcion,
    cic.orden AS ciclo_orden,
    par.jornada_id,
    jor.descripcion AS jornada_descripcion,
    par.elementoeducativo_id,
    edu.codigo AS elementoeducativo_codigo,
    edu.nombre AS elementoeducativo_nombre,
    par.paralelo,
    par.cupo,
    par.disponible,
    moev.modoevaluacion_id,
    moev.descripcion AS descripcionmodoevaluacion,
    desev.desgloseevaluacion_id,
    desev.desdeintegradora,
    detev.descripcion AS descripciondetallemodoevaluacion,
    desev.porcentajecalificacion,
    cal.calificacion_id,
    cal.descripcion AS descripcioncalificacion,
    cal.tipocalificacion,
    cal.permitedecimales,
    cal.valorminimo,
    cal.valormaximo,
    decal.detallecalificacion_id,
    decal.calificacion,
    decal.valornumerico,
    paes.paraleloestudiante_id,
    paes.persona_id,
    paes.tipoaprobacionmateria,
    paes.observacion,
    caes.calificacionestudiante_id,
    caes.parcial_id,
    caes.calificacion_numerica AS calificacionestudiante_numerica,
    caes.calificacion_equivalencia AS calificacionestudiante_equivalencia,
    descaes.desglosecalificacionestudiante_id,
    descaes.calificacion_numerica AS desglosecalificacion_numerica,
    descaes.calificacion_equivalencia AS desglosecalificacion_equivalencia,
    par.estado_id,
    ( SELECT est.descripion
           FROM seguridad.estado est
          WHERE (est.estado_id = par.estado_id)) AS estado_descripcion
   FROM ((((((((((((((((academico.paralelo par
     JOIN academico.anio_lectivo ale ON ((ale.anio_lectivo_id = par.anio_lectivo_id)))
     JOIN academico.periodo per ON ((per.periodo_id = par.periodo_id)))
     JOIN academico.carrera car ON ((car.carrera_id = par.carrera_id)))
     JOIN academico.malla mal ON ((mal.malla_id = par.malla_id)))
     JOIN academico.ciclo cic ON ((cic.ciclo_id = par.ciclo_id)))
     JOIN academico.elementoeducativo edu ON ((edu.elementoeducativo_id = par.elementoeducativo_id)))
     JOIN academico.jornada jor ON ((jor.jornada_id = par.jornada_id)))
     JOIN academico.mallaelemento mael ON (((mael.malla_id = mal.malla_id) AND (mael.elementoeducativo_id = edu.elementoeducativo_id) AND (mael.ciclo_id = cic.ciclo_id))))
     JOIN academico.modoevaluacion moev ON ((moev.modoevaluacion_id = mael.modoevaluacion_id)))
     JOIN academico.desgloseevaluacion desev ON ((desev.mallaelemento_id = mael.mallaelemento_id)))
     JOIN academico.detallemodoevaluacion detev ON (((detev.modoevaluacion_id = moev.modoevaluacion_id) AND (detev.detallemodoevaluacion_id = desev.detallemodoevaluacion_id))))
     JOIN academico.calificacion cal ON ((cal.calificacion_id = detev.calificacion_id)))
     LEFT JOIN academico.detallecalificacion decal ON ((decal.calificacion_id = cal.calificacion_id)))
     JOIN academico.paraleloestudiante paes ON ((paes.paralelo_id = par.paralelo_id)))
     JOIN academico.calificacionestudiante caes ON ((caes.paraleloestudiante_id = paes.paraleloestudiante_id)))
     JOIN academico.desglosecalificaciconestudiante descaes ON ((descaes.calificacionestudiante_id = caes.calificacionestudiante_id)))
  WHERE ((par.activo = 'S'::bpchar) AND (desev.activo = 'S'::bpchar) AND (descaes.activo = 'S'::bpchar))
  ORDER BY ale.anio, per.codigo, car.nombre, cic.descripcion, par.jornada_id, par.elementoeducativo_id, par.paralelo;


ALTER TABLE academico.vi_paralelos_modoevaluacion OWNER TO attinae_user;

--
-- Name: vi_planificacioncarrera; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_planificacioncarrera AS
 SELECT pcc.planificacioncarrera_id,
    pcc.planificacionregistro_id,
    pcc.carrera_id,
    ( SELECT carrera.nombre
           FROM academico.carrera
          WHERE (carrera.carrera_id = pcc.carrera_id)) AS nombrecarrera
   FROM academico.planificacioncarrera pcc
  WHERE (pcc.activo = 'S'::bpchar);


ALTER TABLE academico.vi_planificacioncarrera OWNER TO attinae_user;

--
-- Name: vi_planificacionregistro; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_planificacionregistro AS
 SELECT pre.planificacionregistro_id,
    pre.entidadeducativa_id,
    ( SELECT entidadeducativa.nombre
           FROM academico.entidadeducativa
          WHERE (entidadeducativa.entidadeducativa_id = pre.entidadeducativa_id)) AS entidadeducativa,
    pre.ambito,
        CASE
            WHEN (pre.ambito = 'A'::bpchar) THEN 'Registro Aspirante'::text
            WHEN (pre.ambito = 'M'::bpchar) THEN 'Matriculación'::text
            WHEN (pre.ambito = 'C'::bpchar) THEN 'Registro Curso Educación Contínua'::text
            ELSE NULL::text
        END AS descripcion_ambito,
    pre.descripcion,
    pre.aniolectivo_id,
    ale.anio,
    pre.periodo_id,
    ( SELECT periodo.codigo
           FROM academico.periodo
          WHERE (periodo.periodo_id = pre.periodo_id)) AS codigo_periodo,
    ( SELECT periodo.descripcion
           FROM academico.periodo
          WHERE (periodo.periodo_id = pre.periodo_id)) AS descripcion_periodo,
    pre.tienecursonivelacion,
    pre.fechainicio_inscripcion,
    pre.fechafin_inscripcion,
    pre.fechainicio_curso,
    pre.fechafin_curso,
    pre.fechamaximopago,
    pre.tienedescuento,
    pre.porcentajedescuento,
    pre.fechapagodescuento,
    pre.estado_id,
    ( SELECT est.descripion
           FROM seguridad.estado est
          WHERE (est.estado_id = pre.estado_id)) AS descripcion_estado
   FROM (academico.planificacionregistro pre
     JOIN academico.anio_lectivo ale ON ((ale.anio_lectivo_id = pre.aniolectivo_id)))
  WHERE (pre.activo = 'S'::bpchar)
  ORDER BY pre.planificacionregistro_id;


ALTER TABLE academico.vi_planificacionregistro OWNER TO attinae_user;

--
-- Name: rubro; Type: TABLE; Schema: finanzas; Owner: attinae_user
--

CREATE TABLE finanzas.rubro (
    rubro_id integer NOT NULL,
    descripcion character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE finanzas.rubro OWNER TO attinae_user;

--
-- Name: COLUMN rubro.estado_id; Type: COMMENT; Schema: finanzas; Owner: attinae_user
--

COMMENT ON COLUMN finanzas.rubro.estado_id IS '6 Vigente
7 No Vigente
8 Planificado';


--
-- Name: CONSTRAINT chk_activo ON rubro; Type: COMMENT; Schema: finanzas; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON finanzas.rubro IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: vi_planificacionrequisito; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_planificacionrequisito AS
 SELECT prq.planificacionrequisito_id,
    prq.planificacionregistro_id,
    prq.tiporequisito,
    prq.requisito_id,
    ( SELECT requisito.descripcion
           FROM academico.requisito
          WHERE (requisito.requisito_id = prq.requisito_id)) AS descripcionrequisito,
    prq.rubro_id,
    ( SELECT rubro.descripcion
           FROM finanzas.rubro
          WHERE (rubro.rubro_id = prq.rubro_id)) AS descripcionrubro,
    prq.aplicadescuento,
    prq.valor
   FROM academico.planificacionrequisito prq
  WHERE (prq.activo = 'S'::bpchar);


ALTER TABLE academico.vi_planificacionrequisito OWNER TO attinae_user;

--
-- Name: vi_prerequisitocicloelementoeducativo; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_prerequisitocicloelementoeducativo AS
 SELECT pre.prerequisitoelemento_id,
    pre.mallaelemento_id,
    ea.nombre,
    c.descripcion
   FROM (((academico.prerequisitoelemento pre
     JOIN academico.elementoeducativo ea ON ((ea.elementoeducativo_id = pre.elementoeducativo_id)))
     JOIN academico.mallaelemento me ON ((me.elementoeducativo_id = pre.elementoeducativo_id)))
     JOIN academico.ciclo c ON ((c.ciclo_id = me.ciclo_id)))
  WHERE (pre.activo = 'S'::bpchar)
  ORDER BY pre.prerequisitoelemento_id;


ALTER TABLE academico.vi_prerequisitocicloelementoeducativo OWNER TO attinae_user;

--
-- Name: vi_unidadeducativa; Type: VIEW; Schema: academico; Owner: attinae_user
--

CREATE VIEW academico.vi_unidadeducativa AS
 SELECT unidadeducativa.unidadeducativa_id,
    unidadeducativa.tipounidadeducativa_id,
    unidadeducativa.nombre,
    unidadeducativa.pais_id,
    unidadeducativa.ciudad_id,
    unidadeducativa.estado_id,
    unidadeducativa.creadopor,
    unidadeducativa.creado,
    unidadeducativa.actualizadopor,
    unidadeducativa.actualizado,
    unidadeducativa.activo,
    unidadeducativa.provincia_id,
    pais.nombre AS pais,
    provincia.nombre AS provincia,
    ciudad.nombre AS ciudad
   FROM (((academico.pais
     RIGHT JOIN academico.unidadeducativa ON ((pais.pais_id = unidadeducativa.pais_id)))
     JOIN academico.provincia ON (((unidadeducativa.provincia_id = provincia.provincia_id) AND (unidadeducativa.pais_id = provincia.pais_id))))
     LEFT JOIN academico.ciudad ON (((unidadeducativa.ciudad_id = ciudad.ciudad_id) AND (unidadeducativa.provincia_id = ciudad.provincia_id))));


ALTER TABLE academico.vi_unidadeducativa OWNER TO attinae_user;

--
-- Name: pk_rubro_id_seq; Type: SEQUENCE; Schema: finanzas; Owner: attinae_user
--

CREATE SEQUENCE finanzas.pk_rubro_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE finanzas.pk_rubro_id_seq OWNER TO attinae_user;

--
-- Name: pk_rubro_id_seq; Type: SEQUENCE OWNED BY; Schema: finanzas; Owner: attinae_user
--

ALTER SEQUENCE finanzas.pk_rubro_id_seq OWNED BY finanzas.rubro.rubro_id;


--
-- Name: pga_exception; Type: TABLE; Schema: pgagent; Owner: attinae_user
--

CREATE TABLE pgagent.pga_exception (
    jexid integer NOT NULL,
    jexscid integer NOT NULL,
    jexdate date,
    jextime time without time zone
);


ALTER TABLE pgagent.pga_exception OWNER TO attinae_user;

--
-- Name: pga_exception_jexid_seq; Type: SEQUENCE; Schema: pgagent; Owner: attinae_user
--

CREATE SEQUENCE pgagent.pga_exception_jexid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgagent.pga_exception_jexid_seq OWNER TO attinae_user;

--
-- Name: pga_exception_jexid_seq; Type: SEQUENCE OWNED BY; Schema: pgagent; Owner: attinae_user
--

ALTER SEQUENCE pgagent.pga_exception_jexid_seq OWNED BY pgagent.pga_exception.jexid;


--
-- Name: pga_job; Type: TABLE; Schema: pgagent; Owner: attinae_user
--

CREATE TABLE pgagent.pga_job (
    jobid integer NOT NULL,
    jobjclid integer NOT NULL,
    jobname text NOT NULL,
    jobdesc text DEFAULT ''::text NOT NULL,
    jobhostagent text DEFAULT ''::text NOT NULL,
    jobenabled boolean DEFAULT true NOT NULL,
    jobcreated timestamp with time zone DEFAULT now() NOT NULL,
    jobchanged timestamp with time zone DEFAULT now() NOT NULL,
    jobagentid integer,
    jobnextrun timestamp with time zone,
    joblastrun timestamp with time zone
);


ALTER TABLE pgagent.pga_job OWNER TO attinae_user;

--
-- Name: TABLE pga_job; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON TABLE pgagent.pga_job IS 'Job main entry';


--
-- Name: COLUMN pga_job.jobagentid; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON COLUMN pgagent.pga_job.jobagentid IS 'Agent that currently executes this job.';


--
-- Name: pga_job_jobid_seq; Type: SEQUENCE; Schema: pgagent; Owner: attinae_user
--

CREATE SEQUENCE pgagent.pga_job_jobid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgagent.pga_job_jobid_seq OWNER TO attinae_user;

--
-- Name: pga_job_jobid_seq; Type: SEQUENCE OWNED BY; Schema: pgagent; Owner: attinae_user
--

ALTER SEQUENCE pgagent.pga_job_jobid_seq OWNED BY pgagent.pga_job.jobid;


--
-- Name: pga_jobagent; Type: TABLE; Schema: pgagent; Owner: attinae_user
--

CREATE TABLE pgagent.pga_jobagent (
    jagpid integer NOT NULL,
    jaglogintime timestamp with time zone DEFAULT now() NOT NULL,
    jagstation text NOT NULL
);


ALTER TABLE pgagent.pga_jobagent OWNER TO attinae_user;

--
-- Name: TABLE pga_jobagent; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON TABLE pgagent.pga_jobagent IS 'Active job agents';


--
-- Name: pga_jobclass; Type: TABLE; Schema: pgagent; Owner: attinae_user
--

CREATE TABLE pgagent.pga_jobclass (
    jclid integer NOT NULL,
    jclname text NOT NULL
);


ALTER TABLE pgagent.pga_jobclass OWNER TO attinae_user;

--
-- Name: TABLE pga_jobclass; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON TABLE pgagent.pga_jobclass IS 'Job classification';


--
-- Name: pga_jobclass_jclid_seq; Type: SEQUENCE; Schema: pgagent; Owner: attinae_user
--

CREATE SEQUENCE pgagent.pga_jobclass_jclid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgagent.pga_jobclass_jclid_seq OWNER TO attinae_user;

--
-- Name: pga_jobclass_jclid_seq; Type: SEQUENCE OWNED BY; Schema: pgagent; Owner: attinae_user
--

ALTER SEQUENCE pgagent.pga_jobclass_jclid_seq OWNED BY pgagent.pga_jobclass.jclid;


--
-- Name: pga_joblog; Type: TABLE; Schema: pgagent; Owner: attinae_user
--

CREATE TABLE pgagent.pga_joblog (
    jlgid integer NOT NULL,
    jlgjobid integer NOT NULL,
    jlgstatus character(1) DEFAULT 'r'::bpchar NOT NULL,
    jlgstart timestamp with time zone DEFAULT now() NOT NULL,
    jlgduration interval,
    CONSTRAINT pga_joblog_jlgstatus_check CHECK ((jlgstatus = ANY (ARRAY['r'::bpchar, 's'::bpchar, 'f'::bpchar, 'i'::bpchar, 'd'::bpchar])))
);


ALTER TABLE pgagent.pga_joblog OWNER TO attinae_user;

--
-- Name: TABLE pga_joblog; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON TABLE pgagent.pga_joblog IS 'Job run logs.';


--
-- Name: COLUMN pga_joblog.jlgstatus; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON COLUMN pgagent.pga_joblog.jlgstatus IS 'Status of job: r=running, s=successfully finished, f=failed, i=no steps to execute, d=aborted';


--
-- Name: pga_joblog_jlgid_seq; Type: SEQUENCE; Schema: pgagent; Owner: attinae_user
--

CREATE SEQUENCE pgagent.pga_joblog_jlgid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgagent.pga_joblog_jlgid_seq OWNER TO attinae_user;

--
-- Name: pga_joblog_jlgid_seq; Type: SEQUENCE OWNED BY; Schema: pgagent; Owner: attinae_user
--

ALTER SEQUENCE pgagent.pga_joblog_jlgid_seq OWNED BY pgagent.pga_joblog.jlgid;


--
-- Name: pga_jobstep; Type: TABLE; Schema: pgagent; Owner: attinae_user
--

CREATE TABLE pgagent.pga_jobstep (
    jstid integer NOT NULL,
    jstjobid integer NOT NULL,
    jstname text NOT NULL,
    jstdesc text DEFAULT ''::text NOT NULL,
    jstenabled boolean DEFAULT true NOT NULL,
    jstkind character(1) NOT NULL,
    jstcode text NOT NULL,
    jstconnstr text DEFAULT ''::text NOT NULL,
    jstdbname name DEFAULT ''::name NOT NULL,
    jstonerror character(1) DEFAULT 'f'::bpchar NOT NULL,
    jscnextrun timestamp with time zone,
    CONSTRAINT pga_jobstep_check1 CHECK ((((jstdbname <> ''::name) AND (jstkind = 's'::bpchar)) OR ((jstdbname = ''::name) AND ((jstkind = 'b'::bpchar) OR (jstconnstr <> ''::text))))),
    CONSTRAINT pga_jobstep_dbname_check CHECK ((((jstdbname <> ''::name) AND (jstkind = 's'::bpchar)) OR ((jstdbname = ''::name) AND ((jstkind = 'b'::bpchar) OR (jstconnstr <> ''::text))))),
    CONSTRAINT pga_jobstep_jstkind_check CHECK ((jstkind = ANY (ARRAY['b'::bpchar, 's'::bpchar]))),
    CONSTRAINT pga_jobstep_jstonerror_check CHECK ((jstonerror = ANY (ARRAY['f'::bpchar, 's'::bpchar, 'i'::bpchar])))
);


ALTER TABLE pgagent.pga_jobstep OWNER TO attinae_user;

--
-- Name: TABLE pga_jobstep; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON TABLE pgagent.pga_jobstep IS 'Job step to be executed';


--
-- Name: COLUMN pga_jobstep.jstkind; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON COLUMN pgagent.pga_jobstep.jstkind IS 'Kind of jobstep: s=sql, b=batch';


--
-- Name: COLUMN pga_jobstep.jstonerror; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON COLUMN pgagent.pga_jobstep.jstonerror IS 'What to do if step returns an error: f=fail the job, s=mark step as succeeded and continue, i=mark as fail but ignore it and proceed';


--
-- Name: pga_jobstep_jstid_seq; Type: SEQUENCE; Schema: pgagent; Owner: attinae_user
--

CREATE SEQUENCE pgagent.pga_jobstep_jstid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgagent.pga_jobstep_jstid_seq OWNER TO attinae_user;

--
-- Name: pga_jobstep_jstid_seq; Type: SEQUENCE OWNED BY; Schema: pgagent; Owner: attinae_user
--

ALTER SEQUENCE pgagent.pga_jobstep_jstid_seq OWNED BY pgagent.pga_jobstep.jstid;


--
-- Name: pga_jobsteplog; Type: TABLE; Schema: pgagent; Owner: attinae_user
--

CREATE TABLE pgagent.pga_jobsteplog (
    jslid integer NOT NULL,
    jsljlgid integer NOT NULL,
    jsljstid integer NOT NULL,
    jslstatus character(1) DEFAULT 'r'::bpchar NOT NULL,
    jslresult integer,
    jslstart timestamp with time zone DEFAULT now() NOT NULL,
    jslduration interval,
    jsloutput text,
    CONSTRAINT pga_jobsteplog_jslstatus_check CHECK ((jslstatus = ANY (ARRAY['r'::bpchar, 's'::bpchar, 'i'::bpchar, 'f'::bpchar, 'd'::bpchar])))
);


ALTER TABLE pgagent.pga_jobsteplog OWNER TO attinae_user;

--
-- Name: TABLE pga_jobsteplog; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON TABLE pgagent.pga_jobsteplog IS 'Job step run logs.';


--
-- Name: COLUMN pga_jobsteplog.jslstatus; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON COLUMN pgagent.pga_jobsteplog.jslstatus IS 'Status of job step: r=running, s=successfully finished,  f=failed stopping job, i=ignored failure, d=aborted';


--
-- Name: COLUMN pga_jobsteplog.jslresult; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON COLUMN pgagent.pga_jobsteplog.jslresult IS 'Return code of job step';


--
-- Name: pga_jobsteplog_jslid_seq; Type: SEQUENCE; Schema: pgagent; Owner: attinae_user
--

CREATE SEQUENCE pgagent.pga_jobsteplog_jslid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgagent.pga_jobsteplog_jslid_seq OWNER TO attinae_user;

--
-- Name: pga_jobsteplog_jslid_seq; Type: SEQUENCE OWNED BY; Schema: pgagent; Owner: attinae_user
--

ALTER SEQUENCE pgagent.pga_jobsteplog_jslid_seq OWNED BY pgagent.pga_jobsteplog.jslid;


--
-- Name: pga_schedule; Type: TABLE; Schema: pgagent; Owner: attinae_user
--

CREATE TABLE pgagent.pga_schedule (
    jscid integer NOT NULL,
    jscjobid integer NOT NULL,
    jscname text NOT NULL,
    jscdesc text DEFAULT ''::text NOT NULL,
    jscenabled boolean DEFAULT true NOT NULL,
    jscstart timestamp with time zone DEFAULT now() NOT NULL,
    jscend timestamp with time zone,
    jscminutes boolean[] DEFAULT '{f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f}'::boolean[] NOT NULL,
    jschours boolean[] DEFAULT '{f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f}'::boolean[] NOT NULL,
    jscweekdays boolean[] DEFAULT '{f,f,f,f,f,f,f}'::boolean[] NOT NULL,
    jscmonthdays boolean[] DEFAULT '{f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f,f}'::boolean[] NOT NULL,
    jscmonths boolean[] DEFAULT '{f,f,f,f,f,f,f,f,f,f,f,f}'::boolean[] NOT NULL,
    CONSTRAINT pga_schedule_jschours_size CHECK ((array_upper(jschours, 1) = 24)),
    CONSTRAINT pga_schedule_jscminutes_size CHECK ((array_upper(jscminutes, 1) = 60)),
    CONSTRAINT pga_schedule_jscmonthdays_size CHECK ((array_upper(jscmonthdays, 1) = 32)),
    CONSTRAINT pga_schedule_jscmonths_size CHECK ((array_upper(jscmonths, 1) = 12)),
    CONSTRAINT pga_schedule_jscweekdays_size CHECK ((array_upper(jscweekdays, 1) = 7))
);


ALTER TABLE pgagent.pga_schedule OWNER TO attinae_user;

--
-- Name: TABLE pga_schedule; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON TABLE pgagent.pga_schedule IS 'Job schedule exceptions';


--
-- Name: pga_schedule_jscid_seq; Type: SEQUENCE; Schema: pgagent; Owner: attinae_user
--

CREATE SEQUENCE pgagent.pga_schedule_jscid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgagent.pga_schedule_jscid_seq OWNER TO attinae_user;

--
-- Name: pga_schedule_jscid_seq; Type: SEQUENCE OWNED BY; Schema: pgagent; Owner: attinae_user
--

ALTER SEQUENCE pgagent.pga_schedule_jscid_seq OWNED BY pgagent.pga_schedule.jscid;


--
-- Name: flyway_schema_history; Type: TABLE; Schema: public; Owner: attinae_user
--

CREATE TABLE public.flyway_schema_history (
    installed_rank integer NOT NULL,
    version character varying(50),
    description character varying(200) NOT NULL,
    type character varying(20) NOT NULL,
    script character varying(1000) NOT NULL,
    checksum integer,
    installed_by character varying(100) NOT NULL,
    installed_on timestamp without time zone DEFAULT now() NOT NULL,
    execution_time integer NOT NULL,
    success boolean NOT NULL
);


ALTER TABLE public.flyway_schema_history OWNER TO attinae_user;

--
-- Name: hibernate_sequence; Type: SEQUENCE; Schema: public; Owner: attinae_user
--

CREATE SEQUENCE public.hibernate_sequence
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.hibernate_sequence OWNER TO attinae_user;

--
-- Name: localidades; Type: TABLE; Schema: public; Owner: attinae_user
--

CREATE TABLE public.localidades (
    localidcod integer NOT NULL,
    localidnom character varying(150) NOT NULL,
    provincod integer NOT NULL,
    paiscod integer NOT NULL
);


ALTER TABLE public.localidades OWNER TO attinae_user;

--
-- Name: paises; Type: TABLE; Schema: public; Owner: attinae_user
--

CREATE TABLE public.paises (
    paiscod integer NOT NULL,
    paisnom character varying(150)
);


ALTER TABLE public.paises OWNER TO attinae_user;

--
-- Name: persona; Type: TABLE; Schema: public; Owner: attinae_user
--

CREATE TABLE public.persona (
    codigo integer NOT NULL,
    nombre character varying(250) NOT NULL,
    activo boolean NOT NULL,
    calle character varying(150),
    numero character varying(150),
    complemento character varying(150),
    barrio character varying(150),
    cep character varying(150),
    ciudad character varying(200),
    estado character varying(150)
);


ALTER TABLE public.persona OWNER TO attinae_user;

--
-- Name: persona_codigo_seq; Type: SEQUENCE; Schema: public; Owner: attinae_user
--

CREATE SEQUENCE public.persona_codigo_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.persona_codigo_seq OWNER TO attinae_user;

--
-- Name: persona_codigo_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: attinae_user
--

ALTER SEQUENCE public.persona_codigo_seq OWNED BY public.persona.codigo;


--
-- Name: provincia; Type: TABLE; Schema: public; Owner: attinae_user
--

CREATE TABLE public.provincia (
    provincod integer NOT NULL,
    provinnom character varying(150),
    paiscod integer NOT NULL
);


ALTER TABLE public.provincia OWNER TO attinae_user;

--
-- Name: var_calificacion_id; Type: TABLE; Schema: public; Owner: attinae_user
--

CREATE TABLE public.var_calificacion_id (
    calificacion_id integer
);


ALTER TABLE public.var_calificacion_id OWNER TO attinae_user;

--
-- Name: vi_libretacalificacionesperiodo; Type: VIEW; Schema: public; Owner: attinae_user
--

CREATE VIEW public.vi_libretacalificacionesperiodo AS
 SELECT DISTINCT ee.codigo,
    (((((((((split_part((ee.nombre)::text, ' '::text, 1) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 2)) || ' <br> '::text) || split_part((ee.nombre)::text, ' '::text, 3)) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 4)) || ' '::text) || split_part((ee.nombre)::text, ' '::text, 5)) || ' '::text) AS nombreentidadeducativa,
    ee.direccion AS direccionentidadeducativa,
    ee.telefonoconvencional AS telconvencionalentidadeducativa,
    ee.telefonocelular AS telcelularentidadeducativa,
    ee.email AS mailentidadeducativa,
    ee.ruc AS rucentidadeducativa,
    paes.paraleloestudiante_id,
    paes.persona_id,
    pe.tipopersona,
    pe.tipodocumento_id,
    ( SELECT tipodocumento.descripcion
           FROM academico.tipodocumento
          WHERE (tipodocumento.tipodocumento_id = pe.tipodocumento_id)) AS descripciontipodocumento,
    pe.documentoidentificacion,
    pe.nombre1,
    pe.nombre2,
    pe.apellido1,
    pe.apellido2,
    (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text) AS nombrecompleto,
    pe.paisnacimiento_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisnacimiento_id)) AS nombrepaisnacimiento,
    pe.provincianacimiento_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provincianacimiento_id)) AS nombreprovincianacimiento,
    pe.ciudadnacimiento_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudadnacimiento_id)) AS nombreciudadnacimiento,
    pe.parroquianacimiento_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquianacimiento_id)) AS nombreparroquianacimiento,
    pe.fechanacimiento,
    pe.paisdomicilio_id,
    ( SELECT pais.nombre
           FROM academico.pais
          WHERE (pais.pais_id = pe.paisdomicilio_id)) AS nombrepaisdomicilio,
    pe.provinciadomicilio_id,
    ( SELECT provincia.nombre
           FROM academico.provincia
          WHERE (provincia.provincia_id = pe.provinciadomicilio_id)) AS nombreprovinciadomicilio,
    pe.ciudaddomicilio_id,
    ( SELECT ciudad.nombre
           FROM academico.ciudad
          WHERE (ciudad.ciudad_id = pe.ciudaddomicilio_id)) AS nombreciudaddomicilio,
    pe.parroquiadomicilio_id,
    ( SELECT parroquia.nombre
           FROM academico.parroquia
          WHERE (parroquia.parroquia_id = pe.parroquiadomicilio_id)) AS nombreparroquiadomicilio,
    pe.barrio,
    pe.direccion,
    pe.referenciadireccion,
    pe.telefonoconvencional,
    pe.telefonocelular,
    pe.operadora_fk,
    ( SELECT operadora.descripcion
           FROM academico.operadora
          WHERE (operadora.operadora_id = pe.operadora_fk)) AS descripcionoperadora,
    pe.emailpersonal,
    pe.emailinstitucional,
    pe.nacionalidad_id,
    ( SELECT nacionalidad.descripcion
           FROM academico.nacionalidad
          WHERE (nacionalidad.nacionalidad_id = pe.nacionalidad_id)) AS descripcionacionalidad,
    pe.sexo_id,
    ( SELECT sexo.descripcion
           FROM academico.sexo
          WHERE (sexo.sexo_id = pe.sexo_id)) AS descripcionsexo,
    pe.identidadgenero_id,
    ( SELECT identidadgenero.descripcion
           FROM academico.identidadgenero
          WHERE (identidadgenero.identidadgenero_id = pe.identidadgenero_id)) AS descripcionidentidadgenero,
    pe.estadocivil_id,
    ( SELECT estadocivil.descripcion
           FROM academico.estadocivil
          WHERE (estadocivil.estadocivil_id = pe.estadocivil_id)) AS descripcionestadocivil,
    pe.tiposangre,
    pe.tipodiscapacidad_id,
    ( SELECT tipodiscapacidad.descripcion
           FROM academico.tipodiscapacidad
          WHERE (tipodiscapacidad.tipodiscapacidad_id = pe.tipodiscapacidad_id)) AS descripciontipodiscapacidad,
    pe.porcentajediscapacidad,
    pe.descripciondiscapacidad,
    pe.numerocarnetdiscapacidad,
    pe.idioma_id,
    ( SELECT idioma.descripcion
           FROM academico.idioma
          WHERE (idioma.idioma_id = pe.idioma_id)) AS descripcionidioma,
    pe.etnia_id,
    ( SELECT etnia.descripcion
           FROM academico.etnia
          WHERE (etnia.etnia_id = pe.etnia_id)) AS descripcionetnia,
    pe.personacontacto,
    pe.telefonoconctacto,
    pe.fechaingreso,
    pe.estado_id AS estadopersona,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = pe.estado_id)) AS descripcionestadopersona,
    paes.fechamatriculacion,
    pa.paralelo_id,
    pa.anio_lectivo_id,
    ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)) AS aniolectivo,
    per.periodo_id,
    per.descripcion AS descripcionperiodo,
    pa.carrera_id,
    car.codigo AS codigocarrera,
    car.nombre AS nombrecarrera,
    pa.ciclo_id,
    ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)) AS descripcionciclo,
    pa.jornada_id,
    ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)) AS descripcionjornada,
    pa.paralelo,
    pa.estado_id AS estadoparalelo,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = pa.estado_id)) AS descripcionestadoparalelo,
    pa.elementoeducativo_id,
    ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = pa.elementoeducativo_id)) AS nombreelementoeducativo,
    mael.campoformacion_id,
    paes.tipoaprobacionmateria,
    ( SELECT mallaelemento.integradora
           FROM academico.mallaelemento
          WHERE ((mallaelemento.malla_id = pa.malla_id) AND (mallaelemento.ciclo_id = pa.ciclo_id) AND (mallaelemento.elementoeducativo_id = pa.elementoeducativo_id))) AS sepromedia,
    paes.observacion,
    paes.estado_id AS estadoparaleloestudiante,
    ( SELECT estado.descripion
           FROM seguridad.estado
          WHERE (estado.estado_id = paes.estado_id)) AS descripcionestadoparaleloestudiante,
    ( SELECT round(calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.calificacionestudiante
          WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 1))) AS p1_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 1))) = (0)::numeric) THEN '--'::text
            ELSE ( SELECT calificacionestudiante.calificacion_equivalencia
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 1)))
        END AS p1_calificacion_equivalencia,
    ( SELECT round(calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.calificacionestudiante
          WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 2))) AS p2_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 2))) = (0)::numeric) THEN '--'::text
            ELSE ( SELECT calificacionestudiante.calificacion_equivalencia
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 2)))
        END AS p2_calificacion_equivalencia,
    ( SELECT round(calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.calificacionestudiante
          WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 3))) AS p3_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 3))) = (0)::numeric) THEN '--'::text
            ELSE ( SELECT calificacionestudiante.calificacion_equivalencia
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 3)))
        END AS p3_calificacion_equivalencia,
    ( SELECT round(calificacionestudiante.calificacion_numerica, 2) AS round
           FROM academico.calificacionestudiante
          WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 4))) AS ex_calificacion_numerica,
        CASE
            WHEN (( SELECT
                    CASE
                        WHEN (calificacionestudiante.calificacion_numerica IS NULL) THEN (0)::numeric
                        ELSE round(calificacionestudiante.calificacion_numerica, 2)
                    END AS round
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 4))) = (0)::numeric) THEN '--'::text
            ELSE ( SELECT calificacionestudiante.calificacion_equivalencia
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 4)))
        END AS ex_calificacion_equivalencia,
    ( SELECT academico.query_promedioparcial_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedioparcial_periodo) AS promedioperiodo_parciales,
    ( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo) AS promedio_periodo,
        CASE
            WHEN (( SELECT round(calificacionestudiante.calificacion_numerica, 2) AS round
               FROM academico.calificacionestudiante
              WHERE ((calificacionestudiante.paraleloestudiante_id = paes.paraleloestudiante_id) AND (calificacionestudiante.parcial_id = 4))) IS NULL) THEN '--'::text
            ELSE
            CASE
                WHEN (((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric >= (9)::numeric) AND ((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric <= (10)::numeric)) THEN 'DAR'::text
                WHEN (((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric >= (7)::numeric) AND ((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric <= 8.99)) THEN 'AAR'::text
                WHEN (((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric >= 4.001) AND ((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric <= 6.99)) THEN 'PAAR'::text
                WHEN ((( SELECT academico.query_promedio_periodo(pa.anio_lectivo_id, pa.periodo_id, car.carrera_id, pa.ciclo_id, pa.paralelo, pa.elementoeducativo_id, paes.persona_id) AS query_promedio_periodo))::numeric <= (4)::numeric) THEN 'NAAR'::text
                ELSE NULL::text
            END
        END AS obs
   FROM ((((((((academico.paraleloestudiante paes
     JOIN academico.paralelo pa ON ((pa.paralelo_id = paes.paralelo_id)))
     JOIN academico.mallaelemento mael ON (((mael.malla_id = pa.malla_id) AND (mael.elementoeducativo_id = pa.elementoeducativo_id) AND (mael.ciclo_id = pa.ciclo_id))))
     JOIN academico.carrera car ON ((car.carrera_id = pa.carrera_id)))
     JOIN academico.entidadeducativa ee ON ((ee.entidadeducativa_id = car.entidad_educativa)))
     JOIN academico.persona pe ON ((pe.persona_id = paes.persona_id)))
     JOIN academico.estudiante es ON ((es.persona_id = pe.persona_id)))
     JOIN academico.anio_lectivo al ON ((al.anio_lectivo_id = pa.anio_lectivo_id)))
     JOIN academico.periodo per ON ((per.anio_lectivo_id = al.anio_lectivo_id)))
  WHERE ((al.activo = 'S'::bpchar) AND (paes.activo = 'S'::bpchar) AND (pa.elementoeducativo_id <> 38) AND (mael.activo = 'S'::bpchar))
  ORDER BY ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = pa.anio_lectivo_id)), per.descripcion, ( SELECT ciclo.descripcion
           FROM academico.ciclo
          WHERE (ciclo.ciclo_id = pa.ciclo_id)), ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = pa.jornada_id)), pa.paralelo, ( SELECT elementoeducativo.nombre
           FROM academico.elementoeducativo
          WHERE (elementoeducativo.elementoeducativo_id = pa.elementoeducativo_id)), (((((((pe.apellido1)::text || ' '::text) || (pe.apellido2)::text) || ', '::text) || (pe.nombre1)::text) || ' '::text) || (pe.nombre2)::text);


ALTER TABLE public.vi_libretacalificacionesperiodo OWNER TO attinae_user;

--
-- Name: authority; Type: TABLE; Schema: seguridad; Owner: attinae_user
--

CREATE TABLE seguridad.authority (
    id integer NOT NULL,
    authorities character varying(150) NOT NULL
);


ALTER TABLE seguridad.authority OWNER TO attinae_user;

--
-- Name: TABLE authority; Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON TABLE seguridad.authority IS 'Esta tabla es para definir los authorities que necesitaria spring security';


--
-- Name: authority_id_seq; Type: SEQUENCE; Schema: seguridad; Owner: attinae_user
--

CREATE SEQUENCE seguridad.authority_id_seq
        START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seguridad.authority_id_seq OWNER TO attinae_user;

--
-- Name: authority_id_seq; Type: SEQUENCE OWNED BY; Schema: seguridad; Owner: attinae_user
--

ALTER SEQUENCE seguridad.authority_id_seq OWNED BY seguridad.authority.id;


--
-- Name: log; Type: TABLE; Schema: seguridad; Owner: attinae_user
--

CREATE TABLE seguridad.log (
    log_id integer NOT NULL,
    evento character(1) NOT NULL,
    tabla character varying(60) NOT NULL,
    columna character varying(60),
    registro_id integer,
    valor_anterior text,
    valor_nuevo text,
    usuario_id integer NOT NULL,
    fecha_evento timestamp without time zone NOT NULL,
    ip character varying(20),
    CONSTRAINT chk_evento CHECK ((evento = ANY (ARRAY['I'::bpchar, 'U'::bpchar, 'D'::bpchar, 'L'::bpchar, 'O'::bpchar])))
);


ALTER TABLE seguridad.log OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_evento ON log; Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_evento ON seguridad.log IS 'I = Ingresar (nuevo registro)
U = Actualizar
E = Eliminar
L = Login
O = Logout';


--
-- Name: opcion; Type: TABLE; Schema: seguridad; Owner: attinae_user
--

CREATE TABLE seguridad.opcion (
    opcion_id integer NOT NULL,
    opcionpadre_id integer DEFAULT 0 NOT NULL,
    nombre character varying(100),
    url character varying(200),
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    orden smallint,
    dashboard boolean DEFAULT false,
    titulodashboard character varying(200),
    imagendashboard character varying(200),
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE seguridad.opcion OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON opcion; Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON seguridad.opcion IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: paginajsf; Type: TABLE; Schema: seguridad; Owner: attinae_user
--

CREATE TABLE seguridad.paginajsf (
    paginajsf_id integer NOT NULL,
    nombre character varying NOT NULL,
    descripcion character varying NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE seguridad.paginajsf OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON paginajsf; Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON seguridad.paginajsf IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: parametro; Type: TABLE; Schema: seguridad; Owner: attinae_user
--

CREATE TABLE seguridad.parametro (
    parametro_id integer NOT NULL,
    descripcion character varying(100) NOT NULL,
    valor character varying(250),
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone
);


ALTER TABLE seguridad.parametro OWNER TO attinae_user;

--
-- Name: pk_archivo_id_seq; Type: SEQUENCE; Schema: seguridad; Owner: attinae_user
--

CREATE SEQUENCE seguridad.pk_archivo_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seguridad.pk_archivo_id_seq OWNER TO attinae_user;

--
-- Name: pk_archivo_id_seq; Type: SEQUENCE OWNED BY; Schema: seguridad; Owner: attinae_user
--

ALTER SEQUENCE seguridad.pk_archivo_id_seq OWNED BY seguridad.archivo.archivo_id;


--
-- Name: pk_elementojsf_id_seq; Type: SEQUENCE; Schema: seguridad; Owner: attinae_user
--

CREATE SEQUENCE seguridad.pk_elementojsf_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seguridad.pk_elementojsf_id_seq OWNER TO attinae_user;

--
-- Name: pk_elementojsf_id_seq; Type: SEQUENCE OWNED BY; Schema: seguridad; Owner: attinae_user
--

ALTER SEQUENCE seguridad.pk_elementojsf_id_seq OWNED BY seguridad.elementojsf.elementojsf_id;


--
-- Name: pk_estado_id_seq; Type: SEQUENCE; Schema: seguridad; Owner: attinae_user
--

CREATE SEQUENCE seguridad.pk_estado_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seguridad.pk_estado_id_seq OWNER TO attinae_user;

--
-- Name: pk_estado_id_seq; Type: SEQUENCE OWNED BY; Schema: seguridad; Owner: attinae_user
--

ALTER SEQUENCE seguridad.pk_estado_id_seq OWNED BY seguridad.estado.estado_id;


--
-- Name: pk_log_id_seq; Type: SEQUENCE; Schema: seguridad; Owner: attinae_user
--

CREATE SEQUENCE seguridad.pk_log_id_seq
    START WITH 10875
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seguridad.pk_log_id_seq OWNER TO attinae_user;

--
-- Name: pk_log_id_seq; Type: SEQUENCE OWNED BY; Schema: seguridad; Owner: attinae_user
--

ALTER SEQUENCE seguridad.pk_log_id_seq OWNED BY seguridad.log.log_id;


--
-- Name: pk_opcion_id_seq; Type: SEQUENCE; Schema: seguridad; Owner: attinae_user
--

CREATE SEQUENCE seguridad.pk_opcion_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seguridad.pk_opcion_id_seq OWNER TO attinae_user;

--
-- Name: pk_opcion_id_seq; Type: SEQUENCE OWNED BY; Schema: seguridad; Owner: attinae_user
--

ALTER SEQUENCE seguridad.pk_opcion_id_seq OWNED BY seguridad.opcion.opcion_id;


--
-- Name: pk_paginajsf_id_seq; Type: SEQUENCE; Schema: seguridad; Owner: attinae_user
--

CREATE SEQUENCE seguridad.pk_paginajsf_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seguridad.pk_paginajsf_id_seq OWNER TO attinae_user;

--
-- Name: pk_paginajsf_id_seq; Type: SEQUENCE OWNED BY; Schema: seguridad; Owner: attinae_user
--

ALTER SEQUENCE seguridad.pk_paginajsf_id_seq OWNED BY seguridad.paginajsf.paginajsf_id;


--
-- Name: pk_revisionelementojsf_id_seq; Type: SEQUENCE; Schema: seguridad; Owner: attinae_user
--

CREATE SEQUENCE seguridad.pk_revisionelementojsf_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seguridad.pk_revisionelementojsf_id_seq OWNER TO attinae_user;

--
-- Name: pk_revisionelementojsf_id_seq; Type: SEQUENCE OWNED BY; Schema: seguridad; Owner: attinae_user
--

ALTER SEQUENCE seguridad.pk_revisionelementojsf_id_seq OWNED BY seguridad.revisionelementojsf.revisionelementojsf_id;


--
-- Name: rol; Type: TABLE; Schema: seguridad; Owner: attinae_user
--

CREATE TABLE seguridad.rol (
    rol_id integer NOT NULL,
    nombre character varying(200),
    descripcion text,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    entidadeducativa_id integer NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE seguridad.rol OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON rol; Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON seguridad.rol IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_rol_id_seq; Type: SEQUENCE; Schema: seguridad; Owner: attinae_user
--

CREATE SEQUENCE seguridad.pk_rol_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seguridad.pk_rol_id_seq OWNER TO attinae_user;

--
-- Name: pk_rol_id_seq; Type: SEQUENCE OWNED BY; Schema: seguridad; Owner: attinae_user
--

ALTER SEQUENCE seguridad.pk_rol_id_seq OWNED BY seguridad.rol.rol_id;


--
-- Name: rolopcion; Type: TABLE; Schema: seguridad; Owner: attinae_user
--

CREATE TABLE seguridad.rolopcion (
    rolopcion_id integer NOT NULL,
    rol_id integer NOT NULL,
    opcion_id integer NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE seguridad.rolopcion OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON rolopcion; Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON seguridad.rolopcion IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_rolopcion_id_seq; Type: SEQUENCE; Schema: seguridad; Owner: attinae_user
--

CREATE SEQUENCE seguridad.pk_rolopcion_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seguridad.pk_rolopcion_id_seq OWNER TO attinae_user;

--
-- Name: pk_rolopcion_id_seq; Type: SEQUENCE OWNED BY; Schema: seguridad; Owner: attinae_user
--

ALTER SEQUENCE seguridad.pk_rolopcion_id_seq OWNED BY seguridad.rolopcion.rolopcion_id;


--
-- Name: rolusuario; Type: TABLE; Schema: seguridad; Owner: attinae_user
--

CREATE TABLE seguridad.rolusuario (
    rolusuario_id integer NOT NULL,
    rol_id integer NOT NULL,
    usuario_id integer NOT NULL,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE seguridad.rolusuario OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON rolusuario; Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON seguridad.rolusuario IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_rolusuario_id_seq; Type: SEQUENCE; Schema: seguridad; Owner: attinae_user
--

CREATE SEQUENCE seguridad.pk_rolusuario_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seguridad.pk_rolusuario_id_seq OWNER TO attinae_user;

--
-- Name: pk_rolusuario_id_seq; Type: SEQUENCE OWNED BY; Schema: seguridad; Owner: attinae_user
--

ALTER SEQUENCE seguridad.pk_rolusuario_id_seq OWNED BY seguridad.rolusuario.rolusuario_id;


--
-- Name: usuario; Type: TABLE; Schema: seguridad; Owner: attinae_user
--

CREATE TABLE seguridad.usuario (
    usuario_id integer NOT NULL,
    login character varying(20) NOT NULL,
    persona_id integer NOT NULL,
    fecha_ultimo_ingreso timestamp without time zone,
    estado_id integer NOT NULL,
    creadopor integer NOT NULL,
    creado timestamp without time zone NOT NULL,
    actualizadopor integer,
    actualizado timestamp without time zone,
    activo character(1) DEFAULT 'S'::bpchar NOT NULL,
    password character varying(100),
    pregunta_1 character varying(100),
    respuesta_1 character varying(100),
    pregunta_2 character varying(100),
    respuesta_2 character varying(100),
    pregunta_3 character varying(100),
    respuesta_3 character varying(100),
    is_active boolean,
    is_not_locked integer,
    last_login_date_display timestamp without time zone,
    CONSTRAINT chk_activo CHECK ((activo = ANY (ARRAY['S'::bpchar, 'N'::bpchar])))
);


ALTER TABLE seguridad.usuario OWNER TO attinae_user;

--
-- Name: CONSTRAINT chk_activo ON usuario; Type: COMMENT; Schema: seguridad; Owner: attinae_user
--

COMMENT ON CONSTRAINT chk_activo ON seguridad.usuario IS 'S = Si (Registrado activo)
N = No (Eliminado)';


--
-- Name: pk_usuario_id_seq; Type: SEQUENCE; Schema: seguridad; Owner: attinae_user
--

CREATE SEQUENCE seguridad.pk_usuario_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE seguridad.pk_usuario_id_seq OWNER TO attinae_user;

--
-- Name: pk_usuario_id_seq; Type: SEQUENCE OWNED BY; Schema: seguridad; Owner: attinae_user
--

ALTER SEQUENCE seguridad.pk_usuario_id_seq OWNED BY seguridad.usuario.usuario_id;


--
-- Name: rol_authorities; Type: TABLE; Schema: seguridad; Owner: attinae_user
--

CREATE TABLE seguridad.rol_authorities (
    fk_rol_id integer NOT NULL,
    fk_authority integer NOT NULL
);


ALTER TABLE seguridad.rol_authorities OWNER TO attinae_user;

--
-- Name: vi_datosusuario; Type: VIEW; Schema: seguridad; Owner: attinae_user
--

CREATE VIEW seguridad.vi_datosusuario AS
 SELECT usu.usuario_id,
    usu.login,
    usu.fecha_ultimo_ingreso,
    usu.persona_id,
    usu.password,
    usu.pregunta_1,
    usu.respuesta_1,
    usu.pregunta_2,
    usu.respuesta_2,
    usu.pregunta_3,
    usu.respuesta_3,
    per.documentoidentificacion,
    (((((((per.apellido1)::text || ' '::text) || (per.apellido2)::text) || ', '::text) || (per.nombre1)::text) || ' '::text) || (per.nombre2)::text) AS nombrecompleto,
    per.tipopersona,
        CASE
            WHEN (per.tipopersona = 'E'::bpchar) THEN 'Estudiante'::text
            WHEN (per.tipopersona = 'D'::bpchar) THEN 'Docente'::text
            WHEN (per.tipopersona = 'A'::bpchar) THEN 'Administrativo'::text
            WHEN (per.tipopersona = 'S'::bpchar) THEN 'Aspirante'::text
            ELSE NULL::text
        END AS tipopersonadescripcion,
    per.emailinstitucional,
    usu.estado_id,
    usu.activo,
    usu.creadopor,
    usu.creado,
    usu.actualizadopor,
    usu.actualizado
   FROM (seguridad.usuario usu
     JOIN academico.persona per ON ((per.persona_id = usu.persona_id)));


ALTER TABLE seguridad.vi_datosusuario OWNER TO attinae_user;

--
-- Name: vi_entidadeducativausuario; Type: VIEW; Schema: seguridad; Owner: attinae_user
--

CREATE VIEW seguridad.vi_entidadeducativausuario AS
 SELECT DISTINCT (row_number() OVER (ORDER BY usu.usuario_id, rol.entidadeducativa_id))::integer AS id,
    usu.usuario_id,
    usu.login,
    usu.fecha_ultimo_ingreso,
    rol.entidadeducativa_id,
    ed.nombre AS entidadeducatva
   FROM (((seguridad.usuario usu
     JOIN seguridad.rolusuario rus ON ((rus.usuario_id = usu.usuario_id)))
     JOIN seguridad.rol rol ON ((rol.rol_id = rus.rol_id)))
     JOIN academico.entidadeducativa ed ON ((ed.entidadeducativa_id = rol.entidadeducativa_id)))
  WHERE ((usu.estado_id = 1) AND (usu.activo = 'S'::bpchar) AND (rus.estado_id = 1) AND (rus.activo = 'S'::bpchar) AND (ed.estado_id = 1))
  ORDER BY ((row_number() OVER (ORDER BY usu.usuario_id, rol.entidadeducativa_id))::integer);


ALTER TABLE seguridad.vi_entidadeducativausuario OWNER TO attinae_user;

--
-- Name: vi_entidadeducativausuariodistinct; Type: VIEW; Schema: seguridad; Owner: attinae_user
--

CREATE VIEW seguridad.vi_entidadeducativausuariodistinct AS
 SELECT DISTINCT usu.usuario_id,
    usu.login,
    rol.entidadeducativa_id,
    ( SELECT entidadeducativa.nombre
           FROM academico.entidadeducativa
          WHERE (entidadeducativa.entidadeducativa_id = rol.entidadeducativa_id)) AS entidadeducatva
   FROM ((seguridad.usuario usu
     JOIN seguridad.rolusuario rus ON ((rus.usuario_id = usu.usuario_id)))
     JOIN seguridad.rol rol ON ((rol.rol_id = rus.rol_id)))
  WHERE ((usu.estado_id = 1) AND (usu.activo = 'S'::bpchar) AND (rus.estado_id = 1) AND (rus.activo = 'S'::bpchar))
  ORDER BY usu.usuario_id;


ALTER TABLE seguridad.vi_entidadeducativausuariodistinct OWNER TO attinae_user;

--
-- Name: vi_opcionesrolusuario; Type: VIEW; Schema: seguridad; Owner: attinae_user
--

CREATE VIEW seguridad.vi_opcionesrolusuario AS
 SELECT row_number() OVER () AS rnum,
    usu.usuario_id,
    usu.login,
    ( SELECT ((((((persona.apellido1)::text || ' '::text) || (persona.apellido2)::text) || ' '::text) || (persona.nombre1)::text) || ' '::text) AS nombre2
           FROM academico.persona
          WHERE (persona.persona_id = usu.persona_id)) AS nombreusuario,
    usu.fecha_ultimo_ingreso,
    ( SELECT rol.entidadeducativa_id
           FROM seguridad.rol
          WHERE (rol.rol_id = rus.rol_id)) AS entidadeducativa_id,
    rus.rol_id,
    ( SELECT rol.nombre
           FROM seguridad.rol
          WHERE (rol.rol_id = rus.rol_id)) AS nombrerol,
    rop.opcion_id,
    opc.nombre,
    opc.url,
    opc.opcionpadre_id,
    opc.orden,
    opc.dashboard,
    opc.titulodashboard,
    opc.imagendashboard
   FROM (((seguridad.rolusuario rus
     JOIN seguridad.rolopcion rop ON ((rop.rol_id = rus.rol_id)))
     JOIN seguridad.usuario usu ON ((usu.usuario_id = rus.usuario_id)))
     JOIN seguridad.opcion opc ON ((opc.opcion_id = rop.opcion_id)))
  WHERE ((opc.estado_id = 1) AND (rop.estado_id = 1) AND (rus.activo = 'S'::bpchar) AND (rop.activo = 'S'::bpchar) AND (opc.activo = 'S'::bpchar))
  ORDER BY opc.opcionpadre_id, opc.orden;


ALTER TABLE seguridad.vi_opcionesrolusuario OWNER TO attinae_user;

--
-- Name: vi_personasusuario; Type: VIEW; Schema: seguridad; Owner: attinae_user
--

CREATE VIEW seguridad.vi_personasusuario AS
 SELECT usu.usuario_id,
    usu.login,
    usu.fecha_ultimo_ingreso,
    per.persona_id,
    usu.password,
    usu.pregunta_1,
    usu.respuesta_1,
    usu.pregunta_2,
    usu.respuesta_2,
    usu.pregunta_3,
    usu.respuesta_3,
    per.documentoidentificacion,
    (((((((per.apellido1)::text || ' '::text) || (per.apellido2)::text) || ', '::text) || (per.nombre1)::text) || ' '::text) || (per.nombre2)::text) AS nombrecompleto,
    per.tipopersona,
        CASE
            WHEN (per.tipopersona = 'E'::bpchar) THEN 'Estudiante'::text
            WHEN (per.tipopersona = 'D'::bpchar) THEN 'Docente'::text
            WHEN (per.tipopersona = 'A'::bpchar) THEN 'Administrativo'::text
            WHEN (per.tipopersona = 'S'::bpchar) THEN 'Aspirante'::text
            ELSE NULL::text
        END AS tipopersonadescripcion,
    per.emailinstitucional,
    usu.estado_id,
    per.activo,
    usu.creadopor,
    usu.creado,
    usu.actualizadopor,
    usu.actualizado
   FROM (seguridad.usuario usu
     RIGHT JOIN academico.persona per ON ((per.persona_id = usu.persona_id)));


ALTER TABLE seguridad.vi_personasusuario OWNER TO attinae_user;

--
-- Name: vi_revisionelementojsf; Type: VIEW; Schema: seguridad; Owner: attinae_user
--

CREATE VIEW seguridad.vi_revisionelementojsf AS
 SELECT DISTINCT row_number() OVER () AS rnum,
    cn.aniolectivo_id,
    ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = cn.aniolectivo_id)) AS aniolectivo,
    cn.periodo_id,
    ( SELECT periodo.codigo
           FROM academico.periodo
          WHERE (periodo.periodo_id = cn.periodo_id)) AS periodo,
    cn.carrera_id,
    ( SELECT carrera.codigo
           FROM academico.carrera
          WHERE (carrera.carrera_id = cn.carrera_id)) AS codigocarrera,
    ( SELECT carrera.nombre
           FROM academico.carrera
          WHERE (carrera.carrera_id = cn.carrera_id)) AS carrera,
    cj.jornada_id,
    ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = cj.jornada_id)) AS jornada,
    cj.paralelo,
    cn.cursonivelacion_id,
    rn.persona_id,
    ( SELECT persona.documentoidentificacion
           FROM academico.persona
          WHERE (persona.persona_id = rn.persona_id)) AS documentoidentificacion,
    ( SELECT (((persona.apellido1)::text || ' '::text) || (persona.apellido2)::text)
           FROM academico.persona
          WHERE (persona.persona_id = rn.persona_id)) AS apellidos,
    ( SELECT (((persona.nombre1)::text || ' '::text) || (persona.nombre2)::text)
           FROM academico.persona
          WHERE (persona.persona_id = rn.persona_id)) AS nombres,
        CASE
            WHEN (( SELECT count(*) AS count
               FROM seguridad.revisionelementojsf
              WHERE ((revisionelementojsf.persona_id = rn.persona_id) AND (revisionelementojsf.activo = 'S'::bpchar))) = 0) THEN
            CASE
                WHEN (EXISTS ( SELECT revisionelementojsf.revisionelementojsf_id,
                    revisionelementojsf.paginajsf_id,
                    revisionelementojsf.elementojsf_id,
                    revisionelementojsf.persona_id,
                    revisionelementojsf.estado_id,
                    revisionelementojsf.creadopor,
                    revisionelementojsf.creado,
                    revisionelementojsf.actualizadopor,
                    revisionelementojsf.actualizado,
                    revisionelementojsf.activo
                   FROM seguridad.revisionelementojsf
                  WHERE ((revisionelementojsf.persona_id = rn.persona_id) AND (revisionelementojsf.activo = 'S'::bpchar)))) THEN true
                ELSE false
            END
            ELSE false
        END AS revisado
   FROM ((academico.cursonivelacion cn
     JOIN academico.cursonivelacionjornada cj ON (((cj.cursonivelacion_id = cn.cursonivelacion_id) AND (cj.activo = 'S'::bpchar))))
     JOIN academico.registronivelacion rn ON (((cj.cursonivelacionjornada_id = rn.cursonivelacionjornada_id) AND (rn.activo = 'S'::bpchar))))
  WHERE (cn.activo = 'S'::bpchar)
  ORDER BY ( SELECT anio_lectivo.anio
           FROM academico.anio_lectivo
          WHERE (anio_lectivo.anio_lectivo_id = cn.aniolectivo_id)), ( SELECT periodo.codigo
           FROM academico.periodo
          WHERE (periodo.periodo_id = cn.periodo_id)), ( SELECT carrera.codigo
           FROM academico.carrera
          WHERE (carrera.carrera_id = cn.carrera_id)), ( SELECT jornada.descripcion
           FROM academico.jornada
          WHERE (jornada.jornada_id = cj.jornada_id)), cj.paralelo, ( SELECT (((persona.apellido1)::text || ' '::text) || (persona.apellido2)::text)
           FROM academico.persona
          WHERE (persona.persona_id = rn.persona_id)), ( SELECT (((persona.nombre1)::text || ' '::text) || (persona.nombre2)::text)
           FROM academico.persona
          WHERE (persona.persona_id = rn.persona_id));


ALTER TABLE seguridad.vi_revisionelementojsf OWNER TO attinae_user;

--
-- Name: vi_rolusuario; Type: VIEW; Schema: seguridad; Owner: attinae_user
--

CREATE VIEW seguridad.vi_rolusuario AS
 SELECT (row_number() OVER (ORDER BY usu.usuario_id, rol.rol_id))::integer AS id,
    usu.usuario_id,
    per.persona_id,
    usu.login,
    per.emailinstitucional,
    (((((((per.apellido1)::text || ' '::text) || (per.apellido2)::text) || ', '::text) || (per.nombre1)::text) || ' '::text) || (per.nombre2)::text) AS nombre_persona,
    rol.rol_id,
    rol.nombre AS rolusuario,
    rol.entidadeducativa_id,
    ( SELECT entidadeducativa.nombre
           FROM academico.entidadeducativa
          WHERE (entidadeducativa.entidadeducativa_id = rol.entidadeducativa_id)) AS entidadeducativa
   FROM (((seguridad.usuario usu
     JOIN academico.persona per ON ((usu.persona_id = per.persona_id)))
     JOIN seguridad.rolusuario rus ON ((usu.usuario_id = rus.usuario_id)))
     JOIN seguridad.rol rol ON ((rus.rol_id = rol.rol_id)))
  WHERE ((per.estado_id = 1) AND (per.activo = 'S'::bpchar) AND (usu.estado_id = 1) AND (usu.activo = 'S'::bpchar) AND (rus.estado_id = 1) AND (rus.activo = 'S'::bpchar) AND (rol.estado_id = 1) AND (rol.activo = 'S'::bpchar));


ALTER TABLE seguridad.vi_rolusuario OWNER TO attinae_user;

--
-- Name: anio_lectivo anio_lectivo_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.anio_lectivo ALTER COLUMN anio_lectivo_id SET DEFAULT nextval('academico.pk_anio_lectivo_id_seq'::regclass);


--
-- Name: calificacion calificacion_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.calificacion ALTER COLUMN calificacion_id SET DEFAULT nextval('academico.pk_calificacion_id_seq'::regclass);


--
-- Name: calificacionestudiante calificacionestudiante_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.calificacionestudiante ALTER COLUMN calificacionestudiante_id SET DEFAULT nextval('academico.pk_calificacionestudiante_id_seq'::regclass);


--
-- Name: campoformacion campoformacion_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.campoformacion ALTER COLUMN campoformacion_id SET DEFAULT nextval('academico.pk_campoformacion_id_seq'::regclass);


--
-- Name: carrera carrera_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.carrera ALTER COLUMN carrera_id SET DEFAULT nextval('academico.pk_carrera_id_seq'::regclass);


--
-- Name: ciclo ciclo_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.ciclo ALTER COLUMN ciclo_id SET DEFAULT nextval('academico.pk_ciclo_id_seq'::regclass);


--
-- Name: ciudad ciudad_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.ciudad ALTER COLUMN ciudad_id SET DEFAULT nextval('academico.pk_ciudad_id_seq'::regclass);


--
-- Name: cursocertificacion cursocertificacion_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.cursocertificacion ALTER COLUMN cursocertificacion_id SET DEFAULT nextval('academico.pk_cursocertificacion_id_seq'::regclass);


--
-- Name: cursonivelacion cursonivelacion_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.cursonivelacion ALTER COLUMN cursonivelacion_id SET DEFAULT nextval('academico.pk_cursonivelacion_id_seq'::regclass);


--
-- Name: cursonivelacionjornada cursonivelacionjornada_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.cursonivelacionjornada ALTER COLUMN cursonivelacionjornada_id SET DEFAULT nextval('academico.pk_cursonivelacionjornada_id_seq'::regclass);


--
-- Name: desglosecalificaciconestudiante desglosecalificacionestudiante_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.desglosecalificaciconestudiante ALTER COLUMN desglosecalificacionestudiante_id SET DEFAULT nextval('academico.pk_desglosecalificacionestudiant_seq'::regclass);


--
-- Name: desgloseevaluacion desgloseevaluacion_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.desgloseevaluacion ALTER COLUMN desgloseevaluacion_id SET DEFAULT nextval('academico.pk_desgloseevaluacion_id_seq'::regclass);


--
-- Name: detallecalificacion detallecalificacion_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.detallecalificacion ALTER COLUMN detallecalificacion_id SET DEFAULT nextval('academico.pk_detallecalificacion_id_seq'::regclass);


--
-- Name: detallemodoevaluacion detallemodoevaluacion_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.detallemodoevaluacion ALTER COLUMN detallemodoevaluacion_id SET DEFAULT nextval('academico.pk_detallemodoevaluacion_id_seq'::regclass);


--
-- Name: elementoeducativo elementoeducativo_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.elementoeducativo ALTER COLUMN elementoeducativo_id SET DEFAULT nextval('academico.pk_elementoeducativo_id_seq'::regclass);


--
-- Name: elementointegra elementointegra_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.elementointegra ALTER COLUMN elementointegra_id SET DEFAULT nextval('academico.pk_elementointegra_id_seq'::regclass);


--
-- Name: entidadeducativa entidadeducativa_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.entidadeducativa ALTER COLUMN entidadeducativa_id SET DEFAULT nextval('academico.pk_entidadeducativa_id_seq'::regclass);


--
-- Name: estadocivil estadocivil_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.estadocivil ALTER COLUMN estadocivil_id SET DEFAULT nextval('academico.pk_estadocivil_id_seq'::regclass);


--
-- Name: etnia etnia_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.etnia ALTER COLUMN etnia_id SET DEFAULT nextval('academico.pk_etnia_id_seq'::regclass);


--
-- Name: facultad facultad_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.facultad ALTER COLUMN facultad_id SET DEFAULT nextval('academico.pk_facultad_id_seq'::regclass);


--
-- Name: formapago formapago_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.formapago ALTER COLUMN formapago_id SET DEFAULT nextval('academico.pk_formapago_id_seq'::regclass);


--
-- Name: identidadgenero identidadgenero_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.identidadgenero ALTER COLUMN identidadgenero_id SET DEFAULT nextval('academico.pk_identidadgenero_id_seq'::regclass);


--
-- Name: idioma idioma_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.idioma ALTER COLUMN idioma_id SET DEFAULT nextval('academico.pk_idioma_id_seq'::regclass);


--
-- Name: items_requisitos items_requisito_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.items_requisitos ALTER COLUMN items_requisito_id SET DEFAULT nextval('academico.pk_requisitos_items_requisito_id_seq'::regclass);


--
-- Name: jornada jornada_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.jornada ALTER COLUMN jornada_id SET DEFAULT nextval('academico.pk_jornada_id_seq'::regclass);


--
-- Name: malla malla_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.malla ALTER COLUMN malla_id SET DEFAULT nextval('academico.pk_malla_id_seq'::regclass);


--
-- Name: mallaciclo mallaciclo_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.mallaciclo ALTER COLUMN mallaciclo_id SET DEFAULT nextval('academico.pk_mallaciclo_id_seq'::regclass);


--
-- Name: mallaelemento mallaelemento_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.mallaelemento ALTER COLUMN mallaelemento_id SET DEFAULT nextval('academico.pk_mallaelemento_id_seq'::regclass);


--
-- Name: modoevaluacion modoevaluacion_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.modoevaluacion ALTER COLUMN modoevaluacion_id SET DEFAULT nextval('academico.pk_modoevaluacion_id_seq'::regclass);


--
-- Name: nacionalidad nacionalidad_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.nacionalidad ALTER COLUMN nacionalidad_id SET DEFAULT nextval('academico.pk_nacionalidad_id_seq'::regclass);


--
-- Name: nucleoproblemico nucleoproblemico_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.nucleoproblemico ALTER COLUMN nucleoproblemico_id SET DEFAULT nextval('academico.pk_nucleoproblemico_id_seq'::regclass);


--
-- Name: operadora operadora_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.operadora ALTER COLUMN operadora_id SET DEFAULT nextval('academico.pk_operadora_id_seq'::regclass);


--
-- Name: ordenpago ordenpago_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.ordenpago ALTER COLUMN ordenpago_id SET DEFAULT nextval('academico.pk_ordenpago_id_seq'::regclass);


--
-- Name: pais pais_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.pais ALTER COLUMN pais_id SET DEFAULT nextval('academico.pk_pais_id_seq'::regclass);


--
-- Name: paralelo paralelo_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.paralelo ALTER COLUMN paralelo_id SET DEFAULT nextval('academico.pk_paralelo_id_seq'::regclass);


--
-- Name: paralelodocente paralelodocente_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.paralelodocente ALTER COLUMN paralelodocente_id SET DEFAULT nextval('academico.pk_paralelodocente_id_seq'::regclass);


--
-- Name: paraleloestudiante paraleloestudiante_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.paraleloestudiante ALTER COLUMN paraleloestudiante_id SET DEFAULT nextval('academico.pk_paraleloestudiante_id_seq'::regclass);


--
-- Name: parcial parcial_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.parcial ALTER COLUMN parcial_id SET DEFAULT nextval('academico.pk_parcial_id_seq'::regclass);


--
-- Name: parroquia parroquia_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.parroquia ALTER COLUMN parroquia_id SET DEFAULT nextval('academico.pk_parroquia_id_seq'::regclass);


--
-- Name: periodo periodo_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.periodo ALTER COLUMN periodo_id SET DEFAULT nextval('academico.pk_periodo_id_seq'::regclass);


--
-- Name: persona persona_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.persona ALTER COLUMN persona_id SET DEFAULT nextval('academico.pk_persona_id_seq'::regclass);


--
-- Name: planificacioncarrera planificacioncarrera_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.planificacioncarrera ALTER COLUMN planificacioncarrera_id SET DEFAULT nextval('academico.pk_planificacioncarreracurso_id_seq'::regclass);


--
-- Name: planificacionregistro planificacionregistro_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.planificacionregistro ALTER COLUMN planificacionregistro_id SET DEFAULT nextval('academico.pk_planificacionregistro_id_seq'::regclass);


--
-- Name: planificacionrequisito planificacionrequisito_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.planificacionrequisito ALTER COLUMN planificacionrequisito_id SET DEFAULT nextval('academico.pk_planificacionrequisito_id_seq'::regclass);


--
-- Name: prerequisitoelemento prerequisitoelemento_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.prerequisitoelemento ALTER COLUMN prerequisitoelemento_id SET DEFAULT nextval('academico.pk_prerequisitoelemento_id_seq'::regclass);


--
-- Name: provincia provincia_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.provincia ALTER COLUMN provincia_id SET DEFAULT nextval('academico.pk_provincia_id_seq'::regclass);


--
-- Name: registronivelacion registronivelacion_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.registronivelacion ALTER COLUMN registronivelacion_id SET DEFAULT nextval('academico.pk_registronivelacion_id_seq'::regclass);


--
-- Name: requisito requisito_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.requisito ALTER COLUMN requisito_id SET DEFAULT nextval('academico.pk_requisito_id_seq'::regclass);


--
-- Name: sexo sexo_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.sexo ALTER COLUMN sexo_id SET DEFAULT nextval('academico.pk_sexo_id_seq'::regclass);


--
-- Name: tipoaprobacionmateria tipoaprobacionmateria_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.tipoaprobacionmateria ALTER COLUMN tipoaprobacionmateria_id SET DEFAULT nextval('academico.tipoaprobacionmateria_tipoaprobacionmateria_id_seq'::regclass);


--
-- Name: tipodiscapacidad tipodiscapacidad_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.tipodiscapacidad ALTER COLUMN tipodiscapacidad_id SET DEFAULT nextval('academico.pk_tipodiscapacidad_id_seq'::regclass);


--
-- Name: tipodocumento tipodocumento_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.tipodocumento ALTER COLUMN tipodocumento_id SET DEFAULT nextval('academico.pk_tipodocumento_id_seq'::regclass);


--
-- Name: tipounidadeducativa tipounidadeducativa_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.tipounidadeducativa ALTER COLUMN tipounidadeducativa_id SET DEFAULT nextval('academico.pk_tipounidadeducativa_id_seq'::regclass);


--
-- Name: titulo titulo_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.titulo ALTER COLUMN titulo_id SET DEFAULT nextval('academico.pk_titulo_id_seq'::regclass);


--
-- Name: unidadeducativa unidadeducativa_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.unidadeducativa ALTER COLUMN unidadeducativa_id SET DEFAULT nextval('academico.pk_unidadeducativa_id_seq'::regclass);


--
-- Name: unidadformacion unidadformacion_id; Type: DEFAULT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.unidadformacion ALTER COLUMN unidadformacion_id SET DEFAULT nextval('academico.pk_unidadformacion_id_seq'::regclass);


--
-- Name: rubro rubro_id; Type: DEFAULT; Schema: finanzas; Owner: attinae_user
--

ALTER TABLE ONLY finanzas.rubro ALTER COLUMN rubro_id SET DEFAULT nextval('finanzas.pk_rubro_id_seq'::regclass);


--
-- Name: pga_exception jexid; Type: DEFAULT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_exception ALTER COLUMN jexid SET DEFAULT nextval('pgagent.pga_exception_jexid_seq'::regclass);


--
-- Name: pga_job jobid; Type: DEFAULT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_job ALTER COLUMN jobid SET DEFAULT nextval('pgagent.pga_job_jobid_seq'::regclass);


--
-- Name: pga_jobclass jclid; Type: DEFAULT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_jobclass ALTER COLUMN jclid SET DEFAULT nextval('pgagent.pga_jobclass_jclid_seq'::regclass);


--
-- Name: pga_joblog jlgid; Type: DEFAULT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_joblog ALTER COLUMN jlgid SET DEFAULT nextval('pgagent.pga_joblog_jlgid_seq'::regclass);


--
-- Name: pga_jobstep jstid; Type: DEFAULT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_jobstep ALTER COLUMN jstid SET DEFAULT nextval('pgagent.pga_jobstep_jstid_seq'::regclass);


--
-- Name: pga_jobsteplog jslid; Type: DEFAULT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_jobsteplog ALTER COLUMN jslid SET DEFAULT nextval('pgagent.pga_jobsteplog_jslid_seq'::regclass);


--
-- Name: pga_schedule jscid; Type: DEFAULT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_schedule ALTER COLUMN jscid SET DEFAULT nextval('pgagent.pga_schedule_jscid_seq'::regclass);


--
-- Name: persona codigo; Type: DEFAULT; Schema: public; Owner: attinae_user
--

ALTER TABLE ONLY public.persona ALTER COLUMN codigo SET DEFAULT nextval('public.persona_codigo_seq'::regclass);


--
-- Name: archivo archivo_id; Type: DEFAULT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.archivo ALTER COLUMN archivo_id SET DEFAULT nextval('seguridad.pk_archivo_id_seq'::regclass);


--
-- Name: authority id; Type: DEFAULT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.authority ALTER COLUMN id SET DEFAULT nextval('seguridad.authority_id_seq'::regclass);


--
-- Name: elementojsf elementojsf_id; Type: DEFAULT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.elementojsf ALTER COLUMN elementojsf_id SET DEFAULT nextval('seguridad.pk_elementojsf_id_seq'::regclass);


--
-- Name: estado estado_id; Type: DEFAULT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.estado ALTER COLUMN estado_id SET DEFAULT nextval('seguridad.pk_estado_id_seq'::regclass);


--
-- Name: log log_id; Type: DEFAULT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.log ALTER COLUMN log_id SET DEFAULT nextval('seguridad.pk_log_id_seq'::regclass);


--
-- Name: opcion opcion_id; Type: DEFAULT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.opcion ALTER COLUMN opcion_id SET DEFAULT nextval('seguridad.pk_opcion_id_seq'::regclass);


--
-- Name: paginajsf paginajsf_id; Type: DEFAULT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.paginajsf ALTER COLUMN paginajsf_id SET DEFAULT nextval('seguridad.pk_paginajsf_id_seq'::regclass);


--
-- Name: revisionelementojsf revisionelementojsf_id; Type: DEFAULT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.revisionelementojsf ALTER COLUMN revisionelementojsf_id SET DEFAULT nextval('seguridad.pk_revisionelementojsf_id_seq'::regclass);


--
-- Name: rol rol_id; Type: DEFAULT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.rol ALTER COLUMN rol_id SET DEFAULT nextval('seguridad.pk_rol_id_seq'::regclass);


--
-- Name: rolopcion rolopcion_id; Type: DEFAULT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.rolopcion ALTER COLUMN rolopcion_id SET DEFAULT nextval('seguridad.pk_rolopcion_id_seq'::regclass);


--
-- Name: rolusuario rolusuario_id; Type: DEFAULT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.rolusuario ALTER COLUMN rolusuario_id SET DEFAULT nextval('seguridad.pk_rolusuario_id_seq'::regclass);


--
-- Name: usuario usuario_id; Type: DEFAULT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.usuario ALTER COLUMN usuario_id SET DEFAULT nextval('seguridad.pk_usuario_id_seq'::regclass);


--
-- Data for Name: anio_lectivo; Type: TABLE DATA; Schema: academico; Owner: attinae_user
--

-----------------SECCION DE ALTERS ---------------
ALTER TABLE ONLY academico.operadora
    ADD CONSTRAINT operadora_pkey PRIMARY KEY (operadora_id);


--
-- Name: anio_lectivo pk_anio_lectivo; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.anio_lectivo
    ADD CONSTRAINT pk_anio_lectivo PRIMARY KEY (anio_lectivo_id);


--
-- Name: aspirante pk_aspirante; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.aspirante
    ADD CONSTRAINT pk_aspirante PRIMARY KEY (persona_id);


--
-- Name: calificacion pk_calificacion; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.calificacion
    ADD CONSTRAINT pk_calificacion PRIMARY KEY (calificacion_id);


--
-- Name: calificacionestudiante pk_calificacionestudiante; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.calificacionestudiante
    ADD CONSTRAINT pk_calificacionestudiante PRIMARY KEY (calificacionestudiante_id);


--
-- Name: carrera pk_carrera; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.carrera
    ADD CONSTRAINT pk_carrera PRIMARY KEY (carrera_id);


--
-- Name: ciclo pk_ciclo; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.ciclo
    ADD CONSTRAINT pk_ciclo PRIMARY KEY (ciclo_id);


--
-- Name: ciudad pk_ciudad; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.ciudad
    ADD CONSTRAINT pk_ciudad PRIMARY KEY (ciudad_id);


--
-- Name: cursocertificacion pk_cursocertificacion; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.cursocertificacion
    ADD CONSTRAINT pk_cursocertificacion PRIMARY KEY (cursocertificacion_id);


--
-- Name: cursonivelacion pk_cursonivelacion; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.cursonivelacion
    ADD CONSTRAINT pk_cursonivelacion PRIMARY KEY (cursonivelacion_id);


--
-- Name: cursonivelacionjornada pk_cursonivelacionjornada; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.cursonivelacionjornada
    ADD CONSTRAINT pk_cursonivelacionjornada PRIMARY KEY (cursonivelacionjornada_id);


--
-- Name: desglosecalificaciconestudiante pk_desglosecalificaciconestudiante; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.desglosecalificaciconestudiante
    ADD CONSTRAINT pk_desglosecalificaciconestudiante PRIMARY KEY (desglosecalificacionestudiante_id);


--
-- Name: desgloseevaluacion pk_desgloseevaluacion; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.desgloseevaluacion
    ADD CONSTRAINT pk_desgloseevaluacion PRIMARY KEY (desgloseevaluacion_id);


--
-- Name: detallecalificacion pk_detallacalificacion; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.detallecalificacion
    ADD CONSTRAINT pk_detallacalificacion PRIMARY KEY (detallecalificacion_id);


--
-- Name: detallemodoevaluacion pk_detallemodoevaluacion; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.detallemodoevaluacion
    ADD CONSTRAINT pk_detallemodoevaluacion PRIMARY KEY (detallemodoevaluacion_id);


--
-- Name: docente pk_docente; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.docente
    ADD CONSTRAINT pk_docente PRIMARY KEY (persona_id);


--
-- Name: elementoeducativo pk_elementoeducativo; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.elementoeducativo
    ADD CONSTRAINT pk_elementoeducativo PRIMARY KEY (elementoeducativo_id);


--
-- Name: elementointegra pk_elementointegra; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.elementointegra
    ADD CONSTRAINT pk_elementointegra PRIMARY KEY (elementointegra_id);


--
-- Name: entidadeducativa pk_entidadeducativa; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.entidadeducativa
    ADD CONSTRAINT pk_entidadeducativa PRIMARY KEY (entidadeducativa_id);


--
-- Name: estadocivil pk_estadocivil; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.estadocivil
    ADD CONSTRAINT pk_estadocivil PRIMARY KEY (estadocivil_id);


--
-- Name: estudiante pk_estudiante; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.estudiante
    ADD CONSTRAINT pk_estudiante PRIMARY KEY (persona_id);


--
-- Name: etnia pk_etnia; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.etnia
    ADD CONSTRAINT pk_etnia PRIMARY KEY (etnia_id);


--
-- Name: facultad pk_facultad; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.facultad
    ADD CONSTRAINT pk_facultad PRIMARY KEY (facultad_id);


--
-- Name: formapago pk_formapago; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.formapago
    ADD CONSTRAINT pk_formapago PRIMARY KEY (formapago_id);


--
-- Name: identidadgenero pk_identidadgenero; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.identidadgenero
    ADD CONSTRAINT pk_identidadgenero PRIMARY KEY (identidadgenero_id);


--
-- Name: idioma pk_idioma; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.idioma
    ADD CONSTRAINT pk_idioma PRIMARY KEY (idioma_id);


--
-- Name: items_requisitos pk_items_requisitos; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.items_requisitos
    ADD CONSTRAINT pk_items_requisitos PRIMARY KEY (items_requisito_id);


--
-- Name: jornada pk_jornada; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.jornada
    ADD CONSTRAINT pk_jornada PRIMARY KEY (jornada_id);


--
-- Name: malla pk_malla; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.malla
    ADD CONSTRAINT pk_malla PRIMARY KEY (malla_id);


--
-- Name: mallaciclo pk_mallaciclo; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.mallaciclo
    ADD CONSTRAINT pk_mallaciclo PRIMARY KEY (mallaciclo_id);


--
-- Name: mallaelemento pk_mallaelemento; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.mallaelemento
    ADD CONSTRAINT pk_mallaelemento PRIMARY KEY (mallaelemento_id);


--
-- Name: modoevaluacion pk_modoevaluacion; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.modoevaluacion
    ADD CONSTRAINT pk_modoevaluacion PRIMARY KEY (modoevaluacion_id);


--
-- Name: nacionalidad pk_nacionalidad; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.nacionalidad
    ADD CONSTRAINT pk_nacionalidad PRIMARY KEY (nacionalidad_id);


--
-- Name: nucleoproblemico pk_nucleoproblemico; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.nucleoproblemico
    ADD CONSTRAINT pk_nucleoproblemico PRIMARY KEY (nucleoproblemico_id);


--
-- Name: ordenpago pk_ordenpago; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.ordenpago
    ADD CONSTRAINT pk_ordenpago PRIMARY KEY (ordenpago_id);


--
-- Name: pais pk_pais; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.pais
    ADD CONSTRAINT pk_pais PRIMARY KEY (pais_id);


--
-- Name: paralelo pk_paralelo; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.paralelo
    ADD CONSTRAINT pk_paralelo PRIMARY KEY (paralelo_id);


--
-- Name: paralelodocente pk_paralelodocente; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.paralelodocente
    ADD CONSTRAINT pk_paralelodocente PRIMARY KEY (paralelodocente_id);


--
-- Name: paraleloestudiante pk_paraleloestudiante; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.paraleloestudiante
    ADD CONSTRAINT pk_paraleloestudiante PRIMARY KEY (paraleloestudiante_id);


--
-- Name: parcial pk_parcial; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.parcial
    ADD CONSTRAINT pk_parcial PRIMARY KEY (parcial_id);


--
-- Name: parroquia pk_parroquia; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.parroquia
    ADD CONSTRAINT pk_parroquia PRIMARY KEY (parroquia_id);


--
-- Name: periodo pk_periodo; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.periodo
    ADD CONSTRAINT pk_periodo PRIMARY KEY (periodo_id);


--
-- Name: persona pk_persona; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.persona
    ADD CONSTRAINT pk_persona PRIMARY KEY (persona_id);


--
-- Name: planificacioncarrera pk_planificacioncarreracurso; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.planificacioncarrera
    ADD CONSTRAINT pk_planificacioncarreracurso PRIMARY KEY (planificacioncarrera_id);


--
-- Name: planificacionregistro pk_planificacionregistro; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.planificacionregistro
    ADD CONSTRAINT pk_planificacionregistro PRIMARY KEY (planificacionregistro_id);


--
-- Name: planificacionrequisito pk_planificacionrequisito; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.planificacionrequisito
    ADD CONSTRAINT pk_planificacionrequisito PRIMARY KEY (planificacionrequisito_id);


--
-- Name: prerequisitoelemento pk_prerequisitoelemento; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.prerequisitoelemento
    ADD CONSTRAINT pk_prerequisitoelemento PRIMARY KEY (prerequisitoelemento_id);


--
-- Name: provincia pk_provincia; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.provincia
    ADD CONSTRAINT pk_provincia PRIMARY KEY (provincia_id);


--
-- Name: registronivelacion pk_registroevaluacion; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.registronivelacion
    ADD CONSTRAINT pk_registroevaluacion PRIMARY KEY (registronivelacion_id);


--
-- Name: requisito pk_requisito; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.requisito
    ADD CONSTRAINT pk_requisito PRIMARY KEY (requisito_id);


--
-- Name: sexo pk_sexo; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.sexo
    ADD CONSTRAINT pk_sexo PRIMARY KEY (sexo_id);


--
-- Name: tipoaprobacionmateria pk_tipoaprobacionmateria; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.tipoaprobacionmateria
    ADD CONSTRAINT pk_tipoaprobacionmateria PRIMARY KEY (tipoaprobacionmateria_id);


--
-- Name: tipodiscapacidad pk_tipodiscapacidad; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.tipodiscapacidad
    ADD CONSTRAINT pk_tipodiscapacidad PRIMARY KEY (tipodiscapacidad_id);


--
-- Name: tipodocumento pk_tipodocumento; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.tipodocumento
    ADD CONSTRAINT pk_tipodocumento PRIMARY KEY (tipodocumento_id);


--
-- Name: campoformacion pk_tipoelementoeducativo; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.campoformacion
    ADD CONSTRAINT pk_tipoelementoeducativo PRIMARY KEY (campoformacion_id);


--
-- Name: tipounidadeducativa pk_tipounidadeducativa; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.tipounidadeducativa
    ADD CONSTRAINT pk_tipounidadeducativa PRIMARY KEY (tipounidadeducativa_id);


--
-- Name: titulo pk_titulo; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.titulo
    ADD CONSTRAINT pk_titulo PRIMARY KEY (titulo_id);


--
-- Name: unidadeducativa pk_unidadeducativa; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.unidadeducativa
    ADD CONSTRAINT pk_unidadeducativa PRIMARY KEY (unidadeducativa_id);


--
-- Name: unidadformacion pk_unidadformacion; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.unidadformacion
    ADD CONSTRAINT pk_unidadformacion PRIMARY KEY (unidadformacion_id);


--
-- Name: ciclo unq_orden; Type: CONSTRAINT; Schema: academico; Owner: attinae_user
--

ALTER TABLE ONLY academico.ciclo
    ADD CONSTRAINT unq_orden UNIQUE (orden);


--
-- Name: rubro pk_rubro; Type: CONSTRAINT; Schema: finanzas; Owner: attinae_user
--

ALTER TABLE ONLY finanzas.rubro
    ADD CONSTRAINT pk_rubro PRIMARY KEY (rubro_id);


--
-- Name: pga_exception pga_exception_pkey; Type: CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_exception
    ADD CONSTRAINT pga_exception_pkey PRIMARY KEY (jexid);


--
-- Name: pga_job pga_job_pkey; Type: CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_job
    ADD CONSTRAINT pga_job_pkey PRIMARY KEY (jobid);


--
-- Name: pga_jobagent pga_jobagent_pkey; Type: CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_jobagent
    ADD CONSTRAINT pga_jobagent_pkey PRIMARY KEY (jagpid);


--
-- Name: pga_jobclass pga_jobclass_pkey; Type: CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_jobclass
    ADD CONSTRAINT pga_jobclass_pkey PRIMARY KEY (jclid);


--
-- Name: pga_joblog pga_joblog_pkey; Type: CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_joblog
    ADD CONSTRAINT pga_joblog_pkey PRIMARY KEY (jlgid);


--
-- Name: pga_jobstep pga_jobstep_pkey; Type: CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_jobstep
    ADD CONSTRAINT pga_jobstep_pkey PRIMARY KEY (jstid);


--
-- Name: pga_jobsteplog pga_jobsteplog_pkey; Type: CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_jobsteplog
    ADD CONSTRAINT pga_jobsteplog_pkey PRIMARY KEY (jslid);


--
-- Name: pga_schedule pga_schedule_pkey; Type: CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_schedule
    ADD CONSTRAINT pga_schedule_pkey PRIMARY KEY (jscid);


--
-- Name: flyway_schema_history flyway_schema_history_pk; Type: CONSTRAINT; Schema: public; Owner: attinae_user
--

ALTER TABLE ONLY public.flyway_schema_history
    ADD CONSTRAINT flyway_schema_history_pk PRIMARY KEY (installed_rank);


--
-- Name: localidades localidades_pkey; Type: CONSTRAINT; Schema: public; Owner: attinae_user
--

ALTER TABLE ONLY public.localidades
    ADD CONSTRAINT localidades_pkey PRIMARY KEY (localidcod);


--
-- Name: paises paises_pkey; Type: CONSTRAINT; Schema: public; Owner: attinae_user
--

ALTER TABLE ONLY public.paises
    ADD CONSTRAINT paises_pkey PRIMARY KEY (paiscod);


--
-- Name: persona persona_pkey; Type: CONSTRAINT; Schema: public; Owner: attinae_user
--

ALTER TABLE ONLY public.persona
    ADD CONSTRAINT persona_pkey PRIMARY KEY (codigo);


--
-- Name: provincia provincia_pkey; Type: CONSTRAINT; Schema: public; Owner: attinae_user
--

ALTER TABLE ONLY public.provincia
    ADD CONSTRAINT provincia_pkey PRIMARY KEY (provincod);


--
-- Name: authority authority_pk; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.authority
    ADD CONSTRAINT authority_pk PRIMARY KEY (id);


--
-- Name: estado estado_pkey; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.estado
    ADD CONSTRAINT estado_pkey PRIMARY KEY (estado_id);


--
-- Name: archivo pk_archivo; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.archivo
    ADD CONSTRAINT pk_archivo PRIMARY KEY (archivo_id);


--
-- Name: elementojsf pk_elementojsf; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.elementojsf
    ADD CONSTRAINT pk_elementojsf PRIMARY KEY (elementojsf_id);


--
-- Name: log pk_log; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.log
    ADD CONSTRAINT pk_log PRIMARY KEY (log_id);


--
-- Name: opcion pk_opcion; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.opcion
    ADD CONSTRAINT pk_opcion PRIMARY KEY (opcion_id);


--
-- Name: paginajsf pk_paginajsf; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.paginajsf
    ADD CONSTRAINT pk_paginajsf PRIMARY KEY (paginajsf_id);


--
-- Name: parametro pk_parametro; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.parametro
    ADD CONSTRAINT pk_parametro PRIMARY KEY (parametro_id);


--
-- Name: revisionelementojsf pk_revisionelementojsf; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.revisionelementojsf
    ADD CONSTRAINT pk_revisionelementojsf PRIMARY KEY (revisionelementojsf_id);


--
-- Name: rol pk_rol; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.rol
    ADD CONSTRAINT pk_rol PRIMARY KEY (rol_id);


--
-- Name: rolopcion pk_rolopcion; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.rolopcion
    ADD CONSTRAINT pk_rolopcion PRIMARY KEY (rolopcion_id);


--
-- Name: rolusuario pk_rolusuario; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.rolusuario
    ADD CONSTRAINT pk_rolusuario PRIMARY KEY (rolusuario_id);


--
-- Name: usuario pk_usuario; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.usuario
    ADD CONSTRAINT pk_usuario PRIMARY KEY (usuario_id);


--
-- Name: rol_authorities rol_authorities_pk; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.rol_authorities
    ADD CONSTRAINT rol_authorities_pk PRIMARY KEY (fk_authority);


--
-- Name: usuario unq_usuario_login; Type: CONSTRAINT; Schema: seguridad; Owner: attinae_user
--

ALTER TABLE ONLY seguridad.usuario
    ADD CONSTRAINT unq_usuario_login UNIQUE (login, estado_id);


--
-- Name: idx_TipoUnidadEducativaActivo; Type: INDEX; Schema: academico; Owner: attinae_user
--

CREATE INDEX "idx_TipoUnidadEducativaActivo" ON academico.unidadeducativa USING btree (tipounidadeducativa_id, activo);


--
-- Name: idx_calificacionestudiante_1; Type: INDEX; Schema: academico; Owner: attinae_user
--

CREATE INDEX idx_calificacionestudiante_1 ON academico.calificacionestudiante USING btree (paraleloestudiante_id, parcial_id, activo);


--
-- Name: idx_calificacionestudiante_2; Type: INDEX; Schema: academico; Owner: attinae_user
--

CREATE INDEX idx_calificacionestudiante_2 ON academico.calificacionestudiante USING btree (paraleloestudiante_id, calificacion_equivalencia);


--
-- Name: idx_paraleloestudiante_1; Type: INDEX; Schema: academico; Owner: attinae_user
--

CREATE INDEX idx_paraleloestudiante_1 ON academico.paraleloestudiante USING btree (paralelo_id, estado_id, activo);


--
-- Name: pga_exception_datetime; Type: INDEX; Schema: pgagent; Owner: attinae_user
--

CREATE UNIQUE INDEX pga_exception_datetime ON pgagent.pga_exception USING btree (jexdate, jextime);


--
-- Name: pga_exception_jexscid; Type: INDEX; Schema: pgagent; Owner: attinae_user
--

CREATE INDEX pga_exception_jexscid ON pgagent.pga_exception USING btree (jexscid);


--
-- Name: pga_jobclass_name; Type: INDEX; Schema: pgagent; Owner: attinae_user
--

CREATE UNIQUE INDEX pga_jobclass_name ON pgagent.pga_jobclass USING btree (jclname);


--
-- Name: pga_joblog_jobid; Type: INDEX; Schema: pgagent; Owner: attinae_user
--

CREATE INDEX pga_joblog_jobid ON pgagent.pga_joblog USING btree (jlgjobid);


--
-- Name: pga_jobschedule_jobid; Type: INDEX; Schema: pgagent; Owner: attinae_user
--

CREATE INDEX pga_jobschedule_jobid ON pgagent.pga_schedule USING btree (jscjobid);


--
-- Name: pga_jobstep_jobid; Type: INDEX; Schema: pgagent; Owner: attinae_user
--

CREATE INDEX pga_jobstep_jobid ON pgagent.pga_jobstep USING btree (jstjobid);


--
-- Name: pga_jobsteplog_jslid; Type: INDEX; Schema: pgagent; Owner: attinae_user
--

CREATE INDEX pga_jobsteplog_jslid ON pgagent.pga_jobsteplog USING btree (jsljlgid);


--
-- Name: flyway_schema_history_s_idx; Type: INDEX; Schema: public; Owner: attinae_user
--

CREATE INDEX flyway_schema_history_s_idx ON public.flyway_schema_history USING btree (success);


--
-- Name: authority_authorities_uindex; Type: INDEX; Schema: seguridad; Owner: attinae_user
--

CREATE UNIQUE INDEX authority_authorities_uindex ON seguridad.authority USING btree (authorities);


--
-- Name: anio_lectivo trg_anio; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_anio BEFORE INSERT OR UPDATE OF anio ON academico.anio_lectivo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_anio_aniolectivo();


--
-- Name: periodo trg_anio_lectivo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_anio_lectivo BEFORE INSERT OR UPDATE OF anio_lectivo_id ON academico.periodo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_periodo_aniolectivo();


--
-- Name: cursonivelacion trg_aniolectivo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_aniolectivo BEFORE INSERT OR UPDATE OF aniolectivo_id ON academico.cursonivelacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_cursonivelacion_aniolectivo();


--
-- Name: paralelo trg_aniolectivo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_aniolectivo BEFORE INSERT OR UPDATE OF anio_lectivo_id ON academico.paralelo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_paralelo_aniolectivo();


--
-- Name: persona trg_aspirante; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_aspirante BEFORE UPDATE OF activo ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_aspirante();


--
-- Name: unidadeducativa trg_aspirante; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_aspirante BEFORE UPDATE OF activo ON academico.unidadeducativa FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_unidadeducativa_aspirante();


--
-- Name: registronivelacion trg_aspirante; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_aspirante BEFORE INSERT OR UPDATE OF persona_id ON academico.registronivelacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_registronivelacion_aspirante();


--
-- Name: desglosecalificaciconestudiante trg_calculapromedioestudiante; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_calculapromedioestudiante BEFORE UPDATE ON academico.desglosecalificaciconestudiante FOR EACH ROW EXECUTE PROCEDURE academico.trg_calculapromedioestudiante();


--
-- Name: mallaelemento trg_campoformacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_campoformacion BEFORE INSERT OR UPDATE OF campoformacion_id ON academico.mallaelemento FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_mallaelemento_campoformacion();


--
-- Name: facultad trg_carrera; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_carrera BEFORE UPDATE OF activo ON academico.facultad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_facultad_carrera();


--
-- Name: malla trg_carrera; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_carrera BEFORE INSERT OR UPDATE OF carrera_id ON academico.malla FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_malla_carrera();


--
-- Name: nucleoproblemico trg_carrera; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_carrera BEFORE INSERT OR UPDATE OF carrera_id ON academico.nucleoproblemico FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_nucleoproblemico_carrera();


--
-- Name: cursonivelacion trg_carrera; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_carrera BEFORE INSERT OR UPDATE OF carrera_id ON academico.cursonivelacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_cursonivelacion_carrera();


--
-- Name: paralelo trg_carrera; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_carrera BEFORE INSERT OR UPDATE OF carrera_id ON academico.paralelo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_paralelo_carrera();


--
-- Name: mallaciclo trg_ciclo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_ciclo BEFORE INSERT OR UPDATE OF ciclo_id ON academico.mallaciclo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_mallaciclo_ciclo();


--
-- Name: mallaelemento trg_ciclo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_ciclo BEFORE INSERT OR UPDATE OF ciclo_id ON academico.mallaelemento FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_mallaelemento_ciclo();


--
-- Name: paralelo trg_ciclo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_ciclo BEFORE INSERT OR UPDATE OF ciclo_id ON academico.paralelo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_paralelo_ciclo();


--
-- Name: provincia trg_ciudad; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_ciudad BEFORE UPDATE OF activo ON academico.provincia FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_provincia_ciudad();


--
-- Name: parroquia trg_ciudad; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_ciudad BEFORE INSERT OR UPDATE OF ciudad_id ON academico.parroquia FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_parroquia_ciudad();


--
-- Name: unidadeducativa trg_ciudad; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_ciudad BEFORE INSERT OR UPDATE OF ciudad_id ON academico.unidadeducativa FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_unidadeducativa_ciudad();


--
-- Name: persona trg_ciudaddomicilio; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_ciudaddomicilio BEFORE INSERT OR UPDATE OF ciudaddomicilio_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_ciudaddomicilio();


--
-- Name: persona trg_ciudadnacimiento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_ciudadnacimiento BEFORE INSERT OR UPDATE OF ciudadnacimiento_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_ciudadnacimiento();


--
-- Name: carrera trg_codigo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_codigo BEFORE INSERT OR UPDATE OF codigo ON academico.carrera FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_codigo_carrera();


--
-- Name: elementoeducativo trg_codigo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_codigo BEFORE INSERT OR UPDATE OF codigo ON academico.elementoeducativo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_codigo_elementoeducativo();


--
-- Name: facultad trg_codigo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_codigo BEFORE INSERT OR UPDATE OF codigo ON academico.facultad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_codigo_facultad();


--
-- Name: malla trg_codigo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_codigo BEFORE INSERT OR UPDATE OF codigo ON academico.malla FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_codigo_malla();


--
-- Name: parcial trg_codigo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_codigo BEFORE INSERT OR UPDATE OF periodo_id, codigo ON academico.parcial FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_codigo_parcial();


--
-- Name: periodo trg_codigo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_codigo BEFORE INSERT OR UPDATE OF anio_lectivo_id, codigo ON academico.periodo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_codigo_periodo();


--
-- Name: cursocertificacion trg_codigo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_codigo BEFORE INSERT OR UPDATE OF codigo ON academico.cursocertificacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_codigo_cursocertificacion();


--
-- Name: cursonivelacionjornada trg_cursonivelacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_cursonivelacion BEFORE INSERT OR UPDATE OF cursonivelacion_id ON academico.cursonivelacionjornada FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_cursonivelacionjornada_cursonivelacion();


--
-- Name: anio_lectivo trg_cursonivelacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_cursonivelacion BEFORE UPDATE OF activo ON academico.anio_lectivo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_aniolectivo_cursonivelacion();


--
-- Name: periodo trg_cursonivelacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_cursonivelacion BEFORE UPDATE OF activo ON academico.periodo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_periodo_cursonivelacion();


--
-- Name: carrera trg_cursonivelacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_cursonivelacion BEFORE UPDATE OF activo ON academico.carrera FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_carrera_cursonivelacion();


--
-- Name: jornada trg_cursonivelacionjornada; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_cursonivelacionjornada BEFORE UPDATE OF activo ON academico.jornada FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_jornada_cursonivelacionjornada();


--
-- Name: cursonivelacion trg_cursonivelacionjornada; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_cursonivelacionjornada BEFORE UPDATE OF activo ON academico.cursonivelacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_cursonivelacion_cursonivelacionjornada();


--
-- Name: ciclo trg_descripcion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_descripcion BEFORE INSERT OR UPDATE OF descripcion ON academico.ciclo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_ciclo();


--
-- Name: modoevaluacion trg_descripcion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_descripcion BEFORE INSERT OR UPDATE OF descripcion ON academico.modoevaluacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_modoevaluacion();


--
-- Name: unidadformacion trg_descripcion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_descripcion BEFORE INSERT OR UPDATE OF descripcion ON academico.unidadformacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_unidadformacion();


--
-- Name: campoformacion trg_descripcion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_descripcion BEFORE INSERT OR UPDATE OF descripcion ON academico.campoformacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_campoformacion();


--
-- Name: estadocivil trg_descripcion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_descripcion BEFORE INSERT OR UPDATE OF descripcion ON academico.estadocivil FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_estadocivil();


--
-- Name: tipodiscapacidad trg_descripcion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_descripcion BEFORE INSERT OR UPDATE OF descripcion ON academico.tipodiscapacidad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_tipodiscapacidad();


--
-- Name: etnia trg_descripcion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_descripcion BEFORE INSERT OR UPDATE OF descripcion ON academico.etnia FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_etnia();


--
-- Name: identidadgenero trg_descripcion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_descripcion BEFORE INSERT OR UPDATE OF descripcion ON academico.identidadgenero FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_identidadgenero();


--
-- Name: sexo trg_descripcion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_descripcion BEFORE INSERT OR UPDATE OF descripcion ON academico.sexo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_sexo();


--
-- Name: idioma trg_descripcion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_descripcion BEFORE INSERT OR UPDATE OF descripcion ON academico.idioma FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_idioma();


--
-- Name: tipodocumento trg_descripcion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_descripcion BEFORE INSERT OR UPDATE OF descripcion ON academico.tipodocumento FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_tipodocumento();


--
-- Name: periodo trg_descripcion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_descripcion BEFORE INSERT OR UPDATE OF descripcion ON academico.periodo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_periodo();


--
-- Name: parcial trg_descripcion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_descripcion BEFORE INSERT OR UPDATE OF descripcion ON academico.parcial FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_parcial();


--
-- Name: formapago trg_descripcion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_descripcion BEFORE INSERT OR UPDATE OF descripcion ON academico.formapago FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_formapago();


--
-- Name: detallemodoevaluacion trg_desdeintegradora_paraintegrar; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_desdeintegradora_paraintegrar BEFORE INSERT OR UPDATE OF desdeintegradora ON academico.detallemodoevaluacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_detallemodoevaluaciondesdeintegradora();


--
-- Name: detallemodoevaluacion trg_desdeintegradoraunique; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_desdeintegradoraunique BEFORE INSERT OR UPDATE OF desdeintegradora ON academico.detallemodoevaluacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_detallemodoevaluacionsoloundesdeintegradora();


--
-- Name: detallemodoevaluacion trg_desgloseevaluacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_desgloseevaluacion BEFORE UPDATE OF activo ON academico.detallemodoevaluacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_detallemodoevaluacion_desgloseevaluacion();


--
-- Name: modoevaluacion trg_detallemodoevaluacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_detallemodoevaluacion BEFORE UPDATE OF activo ON academico.modoevaluacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_modoevaluacion_detallemodoevaluacion();


--
-- Name: desgloseevaluacion trg_detallemodoevaluacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_detallemodoevaluacion BEFORE INSERT OR UPDATE OF detallemodoevaluacion_id ON academico.desgloseevaluacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_desgloseevaluacion_detallemodoevaluacion();


--
-- Name: registronivelacion trg_disponible; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_disponible BEFORE INSERT ON academico.registronivelacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_disponible_cursonivelacion();


--
-- Name: persona trg_docente; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_docente BEFORE UPDATE OF activo ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_docente();


--
-- Name: titulo trg_docente; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_docente BEFORE UPDATE OF activo ON academico.titulo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_titulo_docente();


--
-- Name: persona trg_documento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_documento BEFORE INSERT OR UPDATE OF documentoidentificacion ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_documento_persona();


--
-- Name: mallaelemento trg_elementoeducativo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_elementoeducativo BEFORE INSERT OR UPDATE OF elementoeducativo_id ON academico.mallaelemento FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_mallaelemento_elementoeducativo();


--
-- Name: prerequisitoelemento trg_elementoeducativo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_elementoeducativo BEFORE INSERT OR UPDATE OF elementoeducativo_id ON academico.prerequisitoelemento FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_prerequisitoelemento_elementoeducativo();


--
-- Name: paralelo trg_elementoeducativo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_elementoeducativo BEFORE INSERT OR UPDATE OF elementoeducativo_id ON academico.paralelo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_paralelo_elementoeducativo();


--
-- Name: mallaelemento trg_elementointegra; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_elementointegra BEFORE UPDATE OF activo ON academico.mallaelemento FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_mallaelemento_elementointegra();


--
-- Name: pais trg_eslocal; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_eslocal BEFORE INSERT OR UPDATE OF eslocal ON academico.pais FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_eslocal_pais();


--
-- Name: provincia trg_eslocal; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_eslocal BEFORE INSERT OR UPDATE OF eslocal ON academico.provincia FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_eslocal_provincia();


--
-- Name: ciudad trg_eslocal; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_eslocal BEFORE INSERT OR UPDATE OF eslocal ON academico.ciudad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_eslocal_ciudad();


--
-- Name: nacionalidad trg_eslocal; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_eslocal BEFORE INSERT OR UPDATE OF eslocal ON academico.nacionalidad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_eslocal_nacionalidad();


--
-- Name: idioma trg_eslocal; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_eslocal BEFORE INSERT OR UPDATE OF eslocal ON academico.idioma FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_eslocal_idioma();


--
-- Name: anio_lectivo trg_estado; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estado BEFORE INSERT OR UPDATE OF estado_id ON academico.anio_lectivo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estado_aniolectivo();


--
-- Name: periodo trg_estado; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estado BEFORE INSERT OR UPDATE OF estado_id ON academico.periodo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estado_periodo();


--
-- Name: parcial trg_estado; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estado BEFORE INSERT OR UPDATE OF estado_id ON academico.parcial FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estado_parcial();


--
-- Name: persona trg_estadocivil; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadocivil BEFORE INSERT OR UPDATE OF estadocivil_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_estadocivil();


--
-- Name: anio_lectivo trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.anio_lectivo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito1();


--
-- Name: carrera trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.carrera FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: ciclo trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.ciclo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: desgloseevaluacion trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.desgloseevaluacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: facultad trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.facultad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito1();


--
-- Name: malla trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.malla FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito2();


--
-- Name: mallaelemento trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.mallaelemento FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: mallaciclo trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.mallaciclo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: modoevaluacion trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.modoevaluacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: nacionalidad trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.nacionalidad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: parcial trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.parcial FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito1();


--
-- Name: periodo trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.periodo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito1();


--
-- Name: persona trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: unidadformacion trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.unidadformacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: campoformacion trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.campoformacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: estadocivil trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.estadocivil FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: tipodiscapacidad trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.tipodiscapacidad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: etnia trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.etnia FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: identidadgenero trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.identidadgenero FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: sexo trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.sexo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: idioma trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.idioma FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: pais trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.pais FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: provincia trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.provincia FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: ciudad trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.ciudad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: parroquia trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.parroquia FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: tipounidadeducativa trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.tipounidadeducativa FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: jornada trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.jornada FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: tipodocumento trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.tipodocumento FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: unidadeducativa trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.unidadeducativa FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: cursonivelacion trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.cursonivelacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito1();


--
-- Name: cursonivelacionjornada trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.cursonivelacionjornada FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito1();


--
-- Name: requisito trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid AFTER INSERT OR UPDATE OF estado_id ON academico.requisito FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: paralelo trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.paralelo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito1();


--
-- Name: elementoeducativo trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.elementoeducativo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: registronivelacion trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE ON academico.registronivelacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito3();


--
-- Name: ordenpago trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE ON academico.ordenpago FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito4();


--
-- Name: aspirante trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE ON academico.aspirante FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: formapago trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.formapago FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: cursocertificacion trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.cursocertificacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: detallemodoevaluacion trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.detallemodoevaluacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: docente trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE ON academico.docente FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: paralelodocente trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE ON academico.paralelodocente FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito6();


--
-- Name: titulo trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE OF estado_id ON academico.titulo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: estudiante trg_estadoid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estadoid BEFORE INSERT OR UPDATE ON academico.estudiante FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadoid_ambito0();


--
-- Name: persona trg_estudiante; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_estudiante BEFORE UPDATE OF activo ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_estudiante();


--
-- Name: persona trg_etnia; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_etnia BEFORE INSERT OR UPDATE OF etnia_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_etnia();


--
-- Name: carrera trg_facultad; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_facultad BEFORE INSERT OR UPDATE OF facultad_id ON academico.carrera FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_carrera_facultad();


--
-- Name: cursocertificacion trg_facultad; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_facultad BEFORE INSERT OR UPDATE OF facultad_id ON academico.cursocertificacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_cursocertificacion_facultad();


--
-- Name: persona trg_identidadgenero; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_identidadgenero BEFORE INSERT OR UPDATE OF identidadgenero_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_identidadgenero();


--
-- Name: persona trg_idioma; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_idioma BEFORE INSERT OR UPDATE OF idioma_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_idioma();


--
-- Name: cursonivelacionjornada trg_jornada; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_jornada BEFORE INSERT OR UPDATE OF jornada_id ON academico.cursonivelacionjornada FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_cursonivelacionjornada_jornada();


--
-- Name: paralelo trg_jornada; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_jornada BEFORE INSERT OR UPDATE OF jornada_id ON academico.paralelo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_paralelo_jornada();


--
-- Name: carrera trg_malla; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_malla BEFORE UPDATE OF activo ON academico.carrera FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_carrera_malla();


--
-- Name: mallaciclo trg_malla; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_malla BEFORE INSERT OR UPDATE OF malla_id ON academico.mallaciclo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_mallaciclo_malla();


--
-- Name: mallaelemento trg_malla; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_malla BEFORE INSERT OR UPDATE OF malla_id ON academico.mallaelemento FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_mallaelemento_malla();


--
-- Name: paralelo trg_malla; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_malla BEFORE INSERT OR UPDATE OF malla_id ON academico.paralelo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_paralelo_malla();


--
-- Name: cursocertificacion trg_malla; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_malla BEFORE UPDATE OF activo ON academico.cursocertificacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_cursocertificacion_malla();


--
-- Name: unidadformacion trg_mallaciclo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_mallaciclo BEFORE UPDATE OF activo ON academico.unidadformacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_unidadformacion_mallaciclo();


--
-- Name: ciclo trg_mallaciclo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_mallaciclo BEFORE UPDATE OF activo ON academico.ciclo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_ciclo_mallaciclo();


--
-- Name: mallaelemento trg_mallaciclo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_mallaciclo BEFORE INSERT OR UPDATE OF mallaciclo_id ON academico.mallaelemento FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_mallaelemento_mallaciclo();


--
-- Name: nucleoproblemico trg_mallaciclo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_mallaciclo BEFORE UPDATE OF activo ON academico.nucleoproblemico FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_nucleoproblemico_mallaciclo();


--
-- Name: malla trg_mallaelemento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_mallaelemento BEFORE UPDATE OF activo ON academico.malla FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_malla_mallaelemento();


--
-- Name: ciclo trg_mallaelemento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_mallaelemento BEFORE UPDATE OF activo ON academico.ciclo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_ciclo_mallaelemento();


--
-- Name: campoformacion trg_mallaelemento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_mallaelemento BEFORE UPDATE OF activo ON academico.campoformacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_campoformacion_mallaelemento();


--
-- Name: elementoeducativo trg_mallaelemento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_mallaelemento BEFORE UPDATE OF activo ON academico.elementoeducativo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_elementoeducativo_mallaelemento();


--
-- Name: modoevaluacion trg_mallaelemento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_mallaelemento BEFORE UPDATE OF activo ON academico.modoevaluacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_modoevaluacion_mallaelemento();


--
-- Name: desgloseevaluacion trg_mallaelemento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_mallaelemento BEFORE INSERT OR UPDATE OF mallaelemento_id ON academico.desgloseevaluacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_desgloseevaluacion_mallaelemento();


--
-- Name: prerequisitoelemento trg_mallaelemento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_mallaelemento BEFORE INSERT OR UPDATE OF mallaelemento_id ON academico.prerequisitoelemento FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_prerequisitoelemento_mallaelemento();


--
-- Name: mallaciclo trg_mallaelemento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_mallaelemento BEFORE UPDATE OF activo ON academico.mallaciclo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_mallaciclo_mallaelemento();


--
-- Name: elementointegra trg_mallaelemento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_mallaelemento BEFORE INSERT OR UPDATE OF elementointegra_id ON academico.elementointegra FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_prerequisitoelemento_mallaelemento();


--
-- Name: mallaciclo trg_mallaid_cicloid; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_mallaid_cicloid BEFORE INSERT OR UPDATE OF malla_id, ciclo_id ON academico.mallaciclo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_mallaciclo_mallaciclo();


--
-- Name: mallaelemento trg_modoevaluacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_modoevaluacion BEFORE INSERT OR UPDATE OF modoevaluacion_id ON academico.mallaelemento FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_mallaelemento_modoevaluacion();


--
-- Name: detallemodoevaluacion trg_modoevaluacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_modoevaluacion BEFORE INSERT OR UPDATE OF modoevaluacion_id ON academico.detallemodoevaluacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_detallemodoevaluacion_modoevaluacion();


--
-- Name: nacionalidad trg_nacionalidad; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_nacionalidad BEFORE INSERT OR UPDATE OF descripcion ON academico.nacionalidad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_descripcion_nacionalidad();


--
-- Name: elementoeducativo trg_nombre; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_nombre BEFORE INSERT OR UPDATE OF nombre ON academico.elementoeducativo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_nombre_elementoeducativo();


--
-- Name: facultad trg_nombre; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_nombre BEFORE INSERT OR UPDATE OF nombre ON academico.facultad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_nombre_facultad();


--
-- Name: pais trg_nombre; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_nombre BEFORE INSERT OR UPDATE OF nombre ON academico.pais FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_nombre_pais();


--
-- Name: mallaciclo trg_nucleoproblemico; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_nucleoproblemico BEFORE INSERT OR UPDATE OF nucleoproblemico_id ON academico.mallaciclo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_mallaciclo_nucleoproblemico();


--
-- Name: carrera trg_nucleoproblemico; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_nucleoproblemico BEFORE UPDATE OF activo ON academico.carrera FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_carrera_nucleoproblemico();


--
-- Name: persona trg_operadora; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_operadora BEFORE INSERT OR UPDATE OF operadora_fk ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_operadora();

ALTER TABLE academico.persona DISABLE TRIGGER trg_operadora;


--
-- Name: persona trg_ordenpago; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_ordenpago BEFORE UPDATE OF activo ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_ordenpago();


--
-- Name: registronivelacion trg_ordenpago; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_ordenpago BEFORE UPDATE OF activo ON academico.registronivelacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_registronivelacion_ordenpago();


--
-- Name: formapago trg_ordenpago; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_ordenpago BEFORE UPDATE OF activo ON academico.formapago FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_formapago_ordenpago();


--
-- Name: provincia trg_pais; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_pais BEFORE INSERT OR UPDATE OF pais_id ON academico.provincia FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_provincia_pais();


--
-- Name: unidadeducativa trg_pais; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_pais BEFORE INSERT OR UPDATE OF pais_id ON academico.unidadeducativa FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_unidadeducativa_pais();


--
-- Name: persona trg_paisdomicilio; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_paisdomicilio BEFORE INSERT OR UPDATE OF paisdomicilio_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_paisdomicilio();


--
-- Name: persona trg_paisnacimiento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_paisnacimiento BEFORE INSERT OR UPDATE OF paisnacimiento_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_paisnacimiento();


--
-- Name: anio_lectivo trg_paralelo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_paralelo BEFORE UPDATE OF activo ON academico.anio_lectivo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_aniolectivo_paralelo();


--
-- Name: periodo trg_paralelo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_paralelo BEFORE UPDATE OF activo ON academico.periodo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_periodo_paralelo();


--
-- Name: carrera trg_paralelo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_paralelo BEFORE UPDATE OF activo ON academico.carrera FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_carrera_paralelo();


--
-- Name: ciclo trg_paralelo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_paralelo BEFORE UPDATE OF activo ON academico.ciclo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_ciclo_paralelo();


--
-- Name: malla trg_paralelo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_paralelo BEFORE UPDATE OF activo ON academico.malla FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_malla_paralelo();


--
-- Name: elementoeducativo trg_paralelo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_paralelo BEFORE UPDATE OF activo ON academico.elementoeducativo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_elementoeducativo_paralelo();


--
-- Name: jornada trg_paralelo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_paralelo BEFORE UPDATE OF activo ON academico.jornada FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_jornada_paralelo();


--
-- Name: paralelodocente trg_paralelo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_paralelo BEFORE INSERT OR UPDATE OF paralelo_id ON academico.paralelodocente FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_paralelodocente_paralelo();


--
-- Name: persona trg_paralelodocente; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_paralelodocente BEFORE UPDATE OF activo ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_paralelodocente();


--
-- Name: paralelo trg_paralelodocente; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_paralelodocente BEFORE UPDATE OF activo ON academico.paralelo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_paralelo_paralelodocente();


--
-- Name: periodo trg_parcial; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_parcial BEFORE UPDATE OF activo ON academico.periodo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_periodo_parcial();


--
-- Name: ciudad trg_parroquia; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_parroquia BEFORE UPDATE OF activo ON academico.ciudad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_ciudad_parroquia();


--
-- Name: persona trg_parroquiadomicilio; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_parroquiadomicilio BEFORE INSERT OR UPDATE OF parroquiadomicilio_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_parroquiadomicilio();


--
-- Name: persona trg_parroquianacimiento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_parroquianacimiento BEFORE INSERT OR UPDATE OF parroquianacimiento_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_parroquianacimiento();


--
-- Name: anio_lectivo trg_periodo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_periodo BEFORE UPDATE OF activo ON academico.anio_lectivo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_aniolectivo_periodo();


--
-- Name: parcial trg_periodo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_periodo BEFORE INSERT OR UPDATE OF periodo_id ON academico.parcial FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_parcial_periodo();


--
-- Name: cursonivelacion trg_periodo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_periodo BEFORE INSERT OR UPDATE OF periodo_id ON academico.cursonivelacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_cursonivelacion_periodo();


--
-- Name: paralelo trg_periodo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_periodo BEFORE INSERT OR UPDATE OF periodo_id ON academico.paralelo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_paralelo_periodo();


--
-- Name: estadocivil trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE UPDATE OF activo ON academico.estadocivil FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estadocivil_persona();


--
-- Name: tipodiscapacidad trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE UPDATE OF activo ON academico.tipodiscapacidad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_tipodiscapacidad_persona();


--
-- Name: etnia trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE UPDATE OF activo ON academico.etnia FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_etnia_persona();


--
-- Name: identidadgenero trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE UPDATE OF activo ON academico.identidadgenero FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_identidadgenero_persona();


--
-- Name: sexo trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE UPDATE OF activo ON academico.sexo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_sexo_persona();


--
-- Name: idioma trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE UPDATE OF activo ON academico.idioma FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_idioma_persona();


--
-- Name: pais trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE UPDATE OF activo ON academico.pais FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_paisnacimiento_persona();


--
-- Name: provincia trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE UPDATE OF activo ON academico.provincia FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_provincianacimiento_persona();


--
-- Name: ciudad trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE UPDATE OF activo ON academico.ciudad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_ciudadnacimiento_persona();


--
-- Name: parroquia trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE UPDATE OF activo ON academico.parroquia FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_parroquianacimiento_persona();


--
-- Name: tipodocumento trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE UPDATE OF activo ON academico.tipodocumento FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_tipodocumento_persona();


--
-- Name: aspirante trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE INSERT OR UPDATE OF persona_id ON academico.aspirante FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_aspirante_persona();


--
-- Name: ordenpago trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE INSERT OR UPDATE OF persona_id ON academico.ordenpago FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_ordenpago_persona();


--
-- Name: operadora trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE UPDATE ON academico.operadora FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_operadora_persona();


--
-- Name: docente trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE INSERT OR UPDATE OF persona_id ON academico.docente FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_docente_persona();


--
-- Name: paralelodocente trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE INSERT OR UPDATE OF persona_id ON academico.paralelodocente FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_paralelodocente_persona();


--
-- Name: estudiante trg_persona; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona BEFORE INSERT OR UPDATE OF persona_id ON academico.estudiante FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_estudiante_persona();


--
-- Name: pais trg_persona2; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona2 BEFORE UPDATE OF activo ON academico.pais FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_paisdomicilio_persona();


--
-- Name: provincia trg_persona2; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona2 BEFORE UPDATE OF activo ON academico.provincia FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_provinciadomicilio_persona();


--
-- Name: ciudad trg_persona2; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona2 BEFORE UPDATE OF activo ON academico.ciudad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_ciudaddomicilio_persona();


--
-- Name: parroquia trg_persona2; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_persona2 BEFORE UPDATE OF activo ON academico.parroquia FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_parroquiadomicilio_persona();


--
-- Name: detallemodoevaluacion trg_porcentajecalificacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_porcentajecalificacion BEFORE INSERT OR UPDATE ON academico.detallemodoevaluacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_detallemodoevaluacionsumecien();

ALTER TABLE academico.detallemodoevaluacion DISABLE TRIGGER trg_porcentajecalificacion;


--
-- Name: mallaelemento trg_prerequisitoelemento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_prerequisitoelemento BEFORE UPDATE OF activo ON academico.mallaelemento FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_mallaelemento_prerequisitoelemento();


--
-- Name: elementoeducativo trg_prerequisitoelemento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_prerequisitoelemento BEFORE UPDATE OF activo ON academico.elementoeducativo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_elementoeducativo_prerequisitoelemento();


--
-- Name: pais trg_provincia; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_provincia BEFORE UPDATE OF activo ON academico.pais FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_pais_provincia();


--
-- Name: ciudad trg_provincia; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_provincia BEFORE INSERT OR UPDATE OF provincia_id ON academico.ciudad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_ciudad_provincia();


--
-- Name: persona trg_provinciadomicilio; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_provinciadomicilio BEFORE INSERT OR UPDATE OF provinciadomicilio_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_provinciadomicilio();


--
-- Name: persona trg_provincianacimiento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_provincianacimiento BEFORE INSERT OR UPDATE OF provincianacimiento_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_provincianacimiento();


--
-- Name: aspirante trg_registronivelacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_registronivelacion BEFORE UPDATE OF activo ON academico.aspirante FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_aspirante_registronivelacion();


--
-- Name: cursonivelacion trg_registronivelacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_registronivelacion BEFORE UPDATE OF activo ON academico.cursonivelacion FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_cursonivelacion_registronivelacion();


--
-- Name: cursonivelacionjornada trg_registronivelacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_registronivelacion BEFORE UPDATE OF activo ON academico.cursonivelacionjornada FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_cursonivelacionjornada_registronivelacion();


--
-- Name: ordenpago trg_registronivelacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_registronivelacion BEFORE INSERT OR UPDATE OF registronivelacion_id ON academico.ordenpago FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_ordenpago_registronivelacion();


--
-- Name: requisito trg_registrorequisitoaspirante; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_registrorequisitoaspirante BEFORE UPDATE OF activo ON academico.requisito FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_requisito_registrorequisitoaspirante();


--
-- Name: aspirante trg_registrorequisitoaspirante; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_registrorequisitoaspirante BEFORE UPDATE OF activo ON academico.aspirante FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_aspirante_registrorequisitoaspirante();


--
-- Name: requisito trg_requisitoaspiranteperiodo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_requisitoaspiranteperiodo BEFORE UPDATE OF activo ON academico.requisito FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_requisito_requisitoaspiranteperiodo();


--
-- Name: periodo trg_requisitoaspiranteperiodo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_requisitoaspiranteperiodo BEFORE UPDATE OF activo ON academico.periodo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_periodo_requisitoaspiranteperiodo();


--
-- Name: persona trg_sexo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_sexo BEFORE INSERT OR UPDATE OF sexo_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_sexo();

ALTER TABLE academico.persona DISABLE TRIGGER trg_sexo;


--
-- Name: persona trg_tipodiscapacidad; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_tipodiscapacidad BEFORE INSERT OR UPDATE OF tipodiscapacidad_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_tipodiscapacidad();


--
-- Name: persona trg_tipodocumento; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_tipodocumento BEFORE INSERT OR UPDATE OF tipodocumento_id ON academico.persona FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_persona_tipodocumento();


--
-- Name: unidadeducativa trg_tipounidadeducativa; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_tipounidadeducativa BEFORE INSERT OR UPDATE OF tipounidadeducativa_id ON academico.unidadeducativa FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_unidadeducativa_tipounidadeducativa();


--
-- Name: docente trg_titulo; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_titulo BEFORE UPDATE OF titulo_id ON academico.docente FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_docente_titulo();


--
-- Name: pais trg_unidadeducativa; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_unidadeducativa BEFORE UPDATE OF activo ON academico.pais FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_pais_unidadeducativa();


--
-- Name: ciudad trg_unidadeducativa; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_unidadeducativa BEFORE UPDATE OF activo ON academico.ciudad FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_ciudad_unidadeducativa();


--
-- Name: tipounidadeducativa trg_unidadeducativa; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_unidadeducativa BEFORE UPDATE OF activo ON academico.tipounidadeducativa FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_tipounidadeducativa_unidadeducativa();


--
-- Name: aspirante trg_unidadeducativa; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_unidadeducativa BEFORE INSERT OR UPDATE OF unidadeducativa_id ON academico.aspirante FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_aspirante_unidadeducativa();


--
-- Name: mallaciclo trg_unidadformacion; Type: TRIGGER; Schema: academico; Owner: attinae_user
--

CREATE TRIGGER trg_unidadformacion BEFORE INSERT OR UPDATE OF unidadformacion_id ON academico.mallaciclo FOR EACH ROW EXECUTE PROCEDURE academico.trg_valida_mallaciclo_unidadformacion();


--
-- Name: pga_exception pga_exception_trigger; Type: TRIGGER; Schema: pgagent; Owner: attinae_user
--

CREATE TRIGGER pga_exception_trigger AFTER INSERT OR DELETE OR UPDATE ON pgagent.pga_exception FOR EACH ROW EXECUTE PROCEDURE pgagent.pga_exception_trigger();


--
-- Name: TRIGGER pga_exception_trigger ON pga_exception; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON TRIGGER pga_exception_trigger ON pgagent.pga_exception IS 'Update the job''s next run time whenever an exception changes';


--
-- Name: pga_job pga_job_trigger; Type: TRIGGER; Schema: pgagent; Owner: attinae_user
--

CREATE TRIGGER pga_job_trigger BEFORE UPDATE ON pgagent.pga_job FOR EACH ROW EXECUTE PROCEDURE pgagent.pga_job_trigger();


--
-- Name: TRIGGER pga_job_trigger ON pga_job; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON TRIGGER pga_job_trigger ON pgagent.pga_job IS 'Update the job''s next run time.';


--
-- Name: pga_schedule pga_schedule_trigger; Type: TRIGGER; Schema: pgagent; Owner: attinae_user
--

CREATE TRIGGER pga_schedule_trigger AFTER INSERT OR DELETE OR UPDATE ON pgagent.pga_schedule FOR EACH ROW EXECUTE PROCEDURE pgagent.pga_schedule_trigger();


--
-- Name: TRIGGER pga_schedule_trigger ON pga_schedule; Type: COMMENT; Schema: pgagent; Owner: attinae_user
--

COMMENT ON TRIGGER pga_schedule_trigger ON pgagent.pga_schedule IS 'Update the job''s next run time whenever a schedule changes';


--
-- Name: opcion opcion_tr_for_rolopcion; Type: TRIGGER; Schema: seguridad; Owner: attinae_user
--

CREATE TRIGGER opcion_tr_for_rolopcion AFTER INSERT ON seguridad.opcion FOR EACH ROW EXECUTE PROCEDURE seguridad.trg_add_opcion_en_rolopcion();


--
-- Name: usuario trg_login; Type: TRIGGER; Schema: seguridad; Owner: attinae_user
--

CREATE TRIGGER trg_login BEFORE INSERT OR UPDATE OF login ON seguridad.usuario FOR EACH ROW EXECUTE PROCEDURE seguridad.trg_valida_login_usuario();


--
-- Name: opcion trg_opcionpadre; Type: TRIGGER; Schema: seguridad; Owner: attinae_user
--

CREATE TRIGGER trg_opcionpadre BEFORE UPDATE ON seguridad.opcion FOR EACH ROW EXECUTE PROCEDURE seguridad.trg_valida_opcion();


--
-- Name: usuario trg_persona_id; Type: TRIGGER; Schema: seguridad; Owner: attinae_user
--

CREATE TRIGGER trg_persona_id BEFORE INSERT OR UPDATE OF persona_id ON seguridad.usuario FOR EACH ROW EXECUTE PROCEDURE seguridad.trg_valida_persona_usuario();


--
-- Name: rol trg_rol_opci; Type: TRIGGER; Schema: seguridad; Owner: attinae_user
--

CREATE TRIGGER trg_rol_opci AFTER INSERT OR UPDATE ON seguridad.rol FOR EACH ROW EXECUTE PROCEDURE seguridad.trg_add_permisios_on_roles();


--
-- Name: pga_exception pga_exception_jexscid_fkey; Type: FK CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_exception
    ADD CONSTRAINT pga_exception_jexscid_fkey FOREIGN KEY (jexscid) REFERENCES pgagent.pga_schedule(jscid) ON UPDATE RESTRICT ON DELETE CASCADE;


--
-- Name: pga_job pga_job_jobagentid_fkey; Type: FK CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_job
    ADD CONSTRAINT pga_job_jobagentid_fkey FOREIGN KEY (jobagentid) REFERENCES pgagent.pga_jobagent(jagpid) ON UPDATE RESTRICT ON DELETE SET NULL;


--
-- Name: pga_job pga_job_jobjclid_fkey; Type: FK CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_job
    ADD CONSTRAINT pga_job_jobjclid_fkey FOREIGN KEY (jobjclid) REFERENCES pgagent.pga_jobclass(jclid) ON UPDATE RESTRICT ON DELETE RESTRICT;


--
-- Name: pga_joblog pga_joblog_jlgjobid_fkey; Type: FK CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_joblog
    ADD CONSTRAINT pga_joblog_jlgjobid_fkey FOREIGN KEY (jlgjobid) REFERENCES pgagent.pga_job(jobid) ON UPDATE RESTRICT ON DELETE CASCADE;


--
-- Name: pga_jobstep pga_jobstep_jstjobid_fkey; Type: FK CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_jobstep
    ADD CONSTRAINT pga_jobstep_jstjobid_fkey FOREIGN KEY (jstjobid) REFERENCES pgagent.pga_job(jobid) ON UPDATE RESTRICT ON DELETE CASCADE;


--
-- Name: pga_jobsteplog pga_jobsteplog_jsljlgid_fkey; Type: FK CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_jobsteplog
    ADD CONSTRAINT pga_jobsteplog_jsljlgid_fkey FOREIGN KEY (jsljlgid) REFERENCES pgagent.pga_joblog(jlgid) ON UPDATE RESTRICT ON DELETE CASCADE;


--
-- Name: pga_jobsteplog pga_jobsteplog_jsljstid_fkey; Type: FK CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_jobsteplog
    ADD CONSTRAINT pga_jobsteplog_jsljstid_fkey FOREIGN KEY (jsljstid) REFERENCES pgagent.pga_jobstep(jstid) ON UPDATE RESTRICT ON DELETE CASCADE;


--
-- Name: pga_schedule pga_schedule_jscjobid_fkey; Type: FK CONSTRAINT; Schema: pgagent; Owner: attinae_user
--

ALTER TABLE ONLY pgagent.pga_schedule
    ADD CONSTRAINT pga_schedule_jscjobid_fkey FOREIGN KEY (jscjobid) REFERENCES pgagent.pga_job(jobid) ON UPDATE RESTRICT ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--